{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/editor/common/model/indentationGuesser.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/model/intervalTree.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/model.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/model/editStack.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/model/mirrorTextModel.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/rbTreeBase.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeBase.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBuffer.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBufferBuilder.js"],"names":["SpacesDiffResult","this","spacesDiff","looksLikeAlignment","a","aLength","b","bLength","result","i","aCharCode","charCodeAt","bCharCode","aSpacesCnt","aTabsCount","j","bSpacesCnt","bTabsCount","tabsDiff","Math","abs","length","guessIndentation","source","defaultTabSize","defaultInsertSpaces","linesCount","min","getLineCount","linesIndentedWithTabsCount","linesIndentedWithSpacesCount","previousLineText","previousLineIndentation","ALLOWED_TAB_SIZE_GUESSES","MAX_ALLOWED_TAB_SIZE_GUESS","spacesDiffCount","tmp","lineNumber","currentLineLength","getLineLength","currentLineText","getLineContent","useCurrentLineText","currentLineHasContent","currentLineIndentation","currentLineSpacesCount","currentLineTabsCount","lenJ","charCode","getLineCharCode","currentSpacesDiff","insertSpaces","tabSize","tabSizeScore_1","forEach","possibleTabSize","possibleTabSizeScore","getNodeColor","node","metadata","setNodeColor","color","getNodeIsVisited","setNodeIsVisited","value","getNodeIsForValidation","setNodeIsForValidation","getNodeIsInOverviewRuler","setNodeIsInOverviewRuler","getNodeStickiness","_setNodeStickiness","stickiness","getCollapseOnReplaceEdit","setCollapseOnReplaceEdit","IntervalNode","id","start","end","parent","left","right","delta","maxEnd","ownerId","options","cachedVersionId","cachedAbsoluteStart","cachedAbsoluteEnd","range","prototype","reset","versionId","setOptions","className","overviewRuler","collapseOnReplaceEdit","setCachedOffsets","absoluteStart","absoluteEnd","detach","SENTINEL","IntervalTree","root","requestNormalizeDelta","intervalSearch","filterOwnerId","filterOutValidation","search","collectNodesFromOwner","collectNodesPostOrder","insert","rbTreeInsert","_normalizeDeltaIfNecessary","delete","rbTreeDelete","resolveNode","initialNode","nodeStart","nodeEnd","acceptReplace","offset","textLength","forceMoveMarkers","nodesOfInterest","searchForEditing","len","noOverlapReplace","nodeAcceptEdit","normalizeDelta","T","recomputeMaxEnd","adjustMarkerBeforeColumn","markerOffset","markerStickToPreviousCharacter","checkOffset","moveSemantics","nodeStickiness","startStickToPreviousCharacter","endStickToPreviousCharacter","deletingCnt","insertingCnt","commonLength","startDone","endDone","deltaColumn","max","nodeMaxEnd","resultLen","editDelta","include","intervalStart","intervalEnd","newNode","treeInsert","recomputeMaxEndWalkToRoot","x","y","leftRotate","rightRotate","z","zAbsoluteStart","zAbsoluteEnd","cmp","intervalCompare","leftest","resetSentinel","w","yWasRed","computeMaxEnd","leftMaxEnd","rightMaxEnd","aStart","aEnd","bStart","bEnd","OverviewRulerLane","MinimapPosition","TextModelResolvedOptions","src","indentSize","Boolean","defaultEOL","trimAutoWhitespace","equals","other","createChangeEvent","newOpts","FindMatch","matches","ApplyEditsResult","reverseEdits","changes","trimAutoWhitespaceLineNumbers","EditStackElement","beforeVersionId","beforeCursorState","afterCursorState","afterVersionId","editOperations","undo","model","operations","applyEdits","redo","getModelEOL","eol","getEOL","EOLStackElement","setEOL","redoEOL","undoEOL","EditStack","currentOpenStackElement","past","future","pushStackElement","push","clear","pushEOL","prevEOL","stackElement","getAlternativeVersionId","getVersionId","pushEditOperation","cursorStateComputer","inverseEditOperation","_computeCursorState","inverseEditOperations","e","pastStackElement","pop","selections","recordedVersionId","canUndo","futureStackElement","canRedo","MirrorTextModel","uri","lines","_uri","_lines","_eol","_versionId","_lineStarts","dispose","getText","join","onEvents","_i","changes_1","change","_acceptDeleteRange","_acceptInsertText","startLineNumber","startColumn","text","_ensureLineStarts","eolLength","linesLength","lineStartValues","Uint32Array","_setLineText","lineIndex","newValue","changeValue","endLineNumber","substring","endColumn","splice","removeValues","position","insertText","insertLines","split","column","newLengths","insertValues","TreeNode","piece","size_left","lf_left","next","prev","righttest","calculateSize","calculateLF","lineFeedCnt","tree","rbDelete","recomputeTreeMetadata","newSizeLeft","newLFLeft","lf_delta","updateTreeMetadata","fixInsert","lineFeedCntDelta","AverageBufferSize","createUintArray","arr","r","Uint16Array","set","LineStarts","lineStarts","cr","lf","crlf","isBasicASCII","createLineStartsFast","str","readonly","rLength","chr","createLineStarts","Piece","bufferIndex","StringBuffer","buffer","PieceTreeSearchCache","limit","_limit","_cache","get","nodePos","nodeStartOffset","get2","nodeStartLineNumber","nodePosition","shift","valdiate","hasInvalidVal","newArr","tmp_1","entry","PieceTreeBase","chunks","eolNormalized","create","_buffers","_lastChangeBufferPos","line","_lineCnt","_length","_EOL","_EOLLength","_EOLNormalized","lastNode","rbInsertRight","_searchCache","_lastVisitedLine","computeBufferMetadata","normalizeEOL","_this","averageBufferSize","floor","tempChunk","tempChunkLen","iterate","getNodeContent","replace","newEOL","getOffsetAt","leftLen","accumualtedValInCurrentIndex","getAccumulatedValue","getPositionAt","lfCnt","originalOffset","out","getIndexOf","index","lineStartOffset","remainder","getValueInRange","startPosition","nodeAt2","endPosition","getValueInRange2","buffer_1","startOffset_1","offsetInBuffer","startOffset","ret","buffer_2","startOffset_2","substr","getLinesContent","currentLine","danglingCR","pieceLength","pieceStartLine","pieceEndLine","pieceStartOffset","getLength","getLineRawContent","matchingNode","targetOffset","findMatchesInNode","searcher","startCursor","endCursor","searchData","captureMatches","limitResultCount","m","searchText","startOffsetInBuffer","_wordSeparators","positionInBuffer","getLineFeedCnt","retStartColumn","retEndColumn","findMatchesLineByLine","searchRange","wordSeparators","regex","currentNode","lineBreakCnt","nextLineStartOffset","startColumn_1","startColumn_2","_findMatchesInLine","startColumn_3","deltaOffset","simpleSearch","searchString","searchStringLen","lastMatchIndex","indexOf","_a","nodeAt","insertPosInBuffer","appendToNode","insertContentToNodeLeft","nodesToDel","newRightPiece","shouldCheckCRLF","endWithCR","headOfRight","nodeCharCodeAt","newStart","startWithLF","tailOfLeft","previousPos","deleteNodeTail","newPieces","createNewPieces","tmpNode","k","deleteNodes","insertContentToNodeRight","pieces","rbInsertLeft","cnt","startNode","endNode","startSplitPosInBuffer_1","endSplitPosInBuffer_1","validateCRLFWithPrevNode","deleteNodeHead","validateCRLFWithNextNode","shrinkNode","startSplitPosInBuffer","endSplitPosInBuffer","secondNode","nPiece","adjustCarriageReturnFromNext","low","high","mid","midStop","midStart","endOffset","previousCharOffset","cursor","nodes","lastChar","splitText","lineStarts_1","lineStarts_2","concat","slice","endIndex","endPos","newPiece","cache","prevAccumualtedValue","accumualtedValue","originalLineNumber","accumulatedValue","pos","lineCnt","realLineCnt","expectedLineStartIndex","originalLFCnt","originalEndOffset","newEnd","newEndOffset","newLineFeedCnt","size_delta","newLength","originalStartOffset","newStartOffset","originalStartPos","originalEndPos","oldLength","oldLFCnt","hitCRLF","prevStartOffset","oldLineFeedCnt","nodeStartOffset_1","offsetOfNode","nodeStartOffset_2","newOffset","val","nextLineOffset","nextNode","fixCRLF","prevNewLength","prevNewLFCnt","callback","leftRet","currentContent","p","prevNode","PieceTreeTextBuffer","BOM","containsRTL","_BOM","_mightContainNonBasicASCII","_mightContainRTL","_pieceTree","mightContainRTL","mightContainNonBasicASCII","getBOM","getRangeAt","isEmpty","lineEnding","_getEndOfLine","getValueLengthInRange","getCharacterCountInRange","fromLineNumber","toLineNumber","lineContent","fromOffset","toOffset","strings","getLineFirstNonWhitespaceColumn","getLineLastNonWhitespaceColumn","Error","rawOperations","recordTrimAutoWhitespace","canReduceOperations","op","_isTracked","validatedRange","sortIndex","identifier","rangeOffset","rangeLength","isAutoWhitespaceEdit","sort","_sortOpsAscending","hasTouchingRanges","count","rangeEnd","getEndPosition","nextRangeStart","getStartPosition","isBeforeOrEqual","isBefore","_reduceOperations","reverseRanges","_getInverseEditRanges","newTrimAutoWhitespaceCandidates","reverseRange","currentLineContent","oldContent","reverseOperations","contentChanges","_doApplyEdits","prevContent","_toSingleEditOperation","firstEditRange","lastEditRange","entireEditRange","lastEndLineNumber","lastEndColumn","operation","_sortOpsDescending","deletingLinesCnt","insertingLinesCnt","editingLinesCnt","newLinesContent","contentChangeRange","prevOpEndLineNumber","prevOpEndColumn","prevOp","resultRange","lineCount","firstLine","lastLine","compareRangesUsingEnds","PieceTreeTextBufferFactory","_chunks","_bom","_cr","_lf","_crlf","_containsRTL","_isBasicASCII","_normalizeEOL","_getEOL","totalEOLCount","totalCRCount","newLineStart","PieceTreeTextBufferBuilder","_hasPreviousChar","_previousChar","_tmpLineStarts","acceptChunk","chunk","_acceptChunk1","allowEmptyStrings","_acceptChunk2","String","fromCharCode","finish","_finish","lastChunk","newLineStarts"],"mappings":"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","file":"js/chunk-vendors~4d911f2e.5d8259a8.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar SpacesDiffResult = /** @class */ (function () {\r\n    function SpacesDiffResult() {\r\n        this.spacesDiff = 0;\r\n        this.looksLikeAlignment = false;\r\n    }\r\n    return SpacesDiffResult;\r\n}());\r\n/**\r\n * Compute the diff in spaces between two line's indentation.\r\n */\r\nfunction spacesDiff(a, aLength, b, bLength, result) {\r\n    result.spacesDiff = 0;\r\n    result.looksLikeAlignment = false;\r\n    // This can go both ways (e.g.):\r\n    //  - a: \"\\t\"\r\n    //  - b: \"\\t    \"\r\n    //  => This should count 1 tab and 4 spaces\r\n    var i;\r\n    for (i = 0; i < aLength && i < bLength; i++) {\r\n        var aCharCode = a.charCodeAt(i);\r\n        var bCharCode = b.charCodeAt(i);\r\n        if (aCharCode !== bCharCode) {\r\n            break;\r\n        }\r\n    }\r\n    var aSpacesCnt = 0, aTabsCount = 0;\r\n    for (var j = i; j < aLength; j++) {\r\n        var aCharCode = a.charCodeAt(j);\r\n        if (aCharCode === 32 /* Space */) {\r\n            aSpacesCnt++;\r\n        }\r\n        else {\r\n            aTabsCount++;\r\n        }\r\n    }\r\n    var bSpacesCnt = 0, bTabsCount = 0;\r\n    for (var j = i; j < bLength; j++) {\r\n        var bCharCode = b.charCodeAt(j);\r\n        if (bCharCode === 32 /* Space */) {\r\n            bSpacesCnt++;\r\n        }\r\n        else {\r\n            bTabsCount++;\r\n        }\r\n    }\r\n    if (aSpacesCnt > 0 && aTabsCount > 0) {\r\n        return;\r\n    }\r\n    if (bSpacesCnt > 0 && bTabsCount > 0) {\r\n        return;\r\n    }\r\n    var tabsDiff = Math.abs(aTabsCount - bTabsCount);\r\n    var spacesDiff = Math.abs(aSpacesCnt - bSpacesCnt);\r\n    if (tabsDiff === 0) {\r\n        // check if the indentation difference might be caused by alignment reasons\r\n        // sometime folks like to align their code, but this should not be used as a hint\r\n        result.spacesDiff = spacesDiff;\r\n        if (spacesDiff > 0 && 0 <= bSpacesCnt - 1 && bSpacesCnt - 1 < a.length && bSpacesCnt < b.length) {\r\n            if (b.charCodeAt(bSpacesCnt) !== 32 /* Space */ && a.charCodeAt(bSpacesCnt - 1) === 32 /* Space */) {\r\n                if (a.charCodeAt(a.length - 1) === 44 /* Comma */) {\r\n                    // This looks like an alignment desire: e.g.\r\n                    // const a = b + c,\r\n                    //       d = b - c;\r\n                    result.looksLikeAlignment = true;\r\n                }\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    if (spacesDiff % tabsDiff === 0) {\r\n        result.spacesDiff = spacesDiff / tabsDiff;\r\n        return;\r\n    }\r\n}\r\nexport function guessIndentation(source, defaultTabSize, defaultInsertSpaces) {\r\n    // Look at most at the first 10k lines\r\n    var linesCount = Math.min(source.getLineCount(), 10000);\r\n    var linesIndentedWithTabsCount = 0; // number of lines that contain at least one tab in indentation\r\n    var linesIndentedWithSpacesCount = 0; // number of lines that contain only spaces in indentation\r\n    var previousLineText = ''; // content of latest line that contained non-whitespace chars\r\n    var previousLineIndentation = 0; // index at which latest line contained the first non-whitespace char\r\n    var ALLOWED_TAB_SIZE_GUESSES = [2, 4, 6, 8, 3, 5, 7]; // prefer even guesses for `tabSize`, limit to [2, 8].\r\n    var MAX_ALLOWED_TAB_SIZE_GUESS = 8; // max(ALLOWED_TAB_SIZE_GUESSES) = 8\r\n    var spacesDiffCount = [0, 0, 0, 0, 0, 0, 0, 0, 0]; // `tabSize` scores\r\n    var tmp = new SpacesDiffResult();\r\n    for (var lineNumber = 1; lineNumber <= linesCount; lineNumber++) {\r\n        var currentLineLength = source.getLineLength(lineNumber);\r\n        var currentLineText = source.getLineContent(lineNumber);\r\n        // if the text buffer is chunk based, so long lines are cons-string, v8 will flattern the string when we check charCode.\r\n        // checking charCode on chunks directly is cheaper.\r\n        var useCurrentLineText = (currentLineLength <= 65536);\r\n        var currentLineHasContent = false; // does `currentLineText` contain non-whitespace chars\r\n        var currentLineIndentation = 0; // index at which `currentLineText` contains the first non-whitespace char\r\n        var currentLineSpacesCount = 0; // count of spaces found in `currentLineText` indentation\r\n        var currentLineTabsCount = 0; // count of tabs found in `currentLineText` indentation\r\n        for (var j = 0, lenJ = currentLineLength; j < lenJ; j++) {\r\n            var charCode = (useCurrentLineText ? currentLineText.charCodeAt(j) : source.getLineCharCode(lineNumber, j));\r\n            if (charCode === 9 /* Tab */) {\r\n                currentLineTabsCount++;\r\n            }\r\n            else if (charCode === 32 /* Space */) {\r\n                currentLineSpacesCount++;\r\n            }\r\n            else {\r\n                // Hit non whitespace character on this line\r\n                currentLineHasContent = true;\r\n                currentLineIndentation = j;\r\n                break;\r\n            }\r\n        }\r\n        // Ignore empty or only whitespace lines\r\n        if (!currentLineHasContent) {\r\n            continue;\r\n        }\r\n        if (currentLineTabsCount > 0) {\r\n            linesIndentedWithTabsCount++;\r\n        }\r\n        else if (currentLineSpacesCount > 1) {\r\n            linesIndentedWithSpacesCount++;\r\n        }\r\n        spacesDiff(previousLineText, previousLineIndentation, currentLineText, currentLineIndentation, tmp);\r\n        if (tmp.looksLikeAlignment) {\r\n            // if defaultInsertSpaces === true && the spaces count == tabSize, we may want to count it as valid indentation\r\n            //\r\n            // - item1\r\n            //   - item2\r\n            //\r\n            // otherwise skip this line entirely\r\n            //\r\n            // const a = 1,\r\n            //       b = 2;\r\n            if (!(defaultInsertSpaces && defaultTabSize === tmp.spacesDiff)) {\r\n                continue;\r\n            }\r\n        }\r\n        var currentSpacesDiff = tmp.spacesDiff;\r\n        if (currentSpacesDiff <= MAX_ALLOWED_TAB_SIZE_GUESS) {\r\n            spacesDiffCount[currentSpacesDiff]++;\r\n        }\r\n        previousLineText = currentLineText;\r\n        previousLineIndentation = currentLineIndentation;\r\n    }\r\n    var insertSpaces = defaultInsertSpaces;\r\n    if (linesIndentedWithTabsCount !== linesIndentedWithSpacesCount) {\r\n        insertSpaces = (linesIndentedWithTabsCount < linesIndentedWithSpacesCount);\r\n    }\r\n    var tabSize = defaultTabSize;\r\n    // Guess tabSize only if inserting spaces...\r\n    if (insertSpaces) {\r\n        var tabSizeScore_1 = (insertSpaces ? 0 : 0.1 * linesCount);\r\n        // console.log(\"score threshold: \" + tabSizeScore);\r\n        ALLOWED_TAB_SIZE_GUESSES.forEach(function (possibleTabSize) {\r\n            var possibleTabSizeScore = spacesDiffCount[possibleTabSize];\r\n            if (possibleTabSizeScore > tabSizeScore_1) {\r\n                tabSizeScore_1 = possibleTabSizeScore;\r\n                tabSize = possibleTabSize;\r\n            }\r\n        });\r\n        // Let a tabSize of 2 win even if it is not the maximum\r\n        // (only in case 4 was guessed)\r\n        if (tabSize === 4 && spacesDiffCount[4] > 0 && spacesDiffCount[2] > 0 && spacesDiffCount[2] >= spacesDiffCount[4] / 2) {\r\n            tabSize = 2;\r\n        }\r\n    }\r\n    // console.log('--------------------------');\r\n    // console.log('linesIndentedWithTabsCount: ' + linesIndentedWithTabsCount + ', linesIndentedWithSpacesCount: ' + linesIndentedWithSpacesCount);\r\n    // console.log('spacesDiffCount: ' + spacesDiffCount);\r\n    // console.log('tabSize: ' + tabSize + ', tabSizeScore: ' + tabSizeScore);\r\n    return {\r\n        insertSpaces: insertSpaces,\r\n        tabSize: tabSize\r\n    };\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport function getNodeColor(node) {\r\n    return ((node.metadata & 1 /* ColorMask */) >>> 0 /* ColorOffset */);\r\n}\r\nfunction setNodeColor(node, color) {\r\n    node.metadata = ((node.metadata & 254 /* ColorMaskInverse */) | (color << 0 /* ColorOffset */));\r\n}\r\nfunction getNodeIsVisited(node) {\r\n    return ((node.metadata & 2 /* IsVisitedMask */) >>> 1 /* IsVisitedOffset */) === 1;\r\n}\r\nfunction setNodeIsVisited(node, value) {\r\n    node.metadata = ((node.metadata & 253 /* IsVisitedMaskInverse */) | ((value ? 1 : 0) << 1 /* IsVisitedOffset */));\r\n}\r\nfunction getNodeIsForValidation(node) {\r\n    return ((node.metadata & 4 /* IsForValidationMask */) >>> 2 /* IsForValidationOffset */) === 1;\r\n}\r\nfunction setNodeIsForValidation(node, value) {\r\n    node.metadata = ((node.metadata & 251 /* IsForValidationMaskInverse */) | ((value ? 1 : 0) << 2 /* IsForValidationOffset */));\r\n}\r\nexport function getNodeIsInOverviewRuler(node) {\r\n    return ((node.metadata & 8 /* IsInOverviewRulerMask */) >>> 3 /* IsInOverviewRulerOffset */) === 1;\r\n}\r\nfunction setNodeIsInOverviewRuler(node, value) {\r\n    node.metadata = ((node.metadata & 247 /* IsInOverviewRulerMaskInverse */) | ((value ? 1 : 0) << 3 /* IsInOverviewRulerOffset */));\r\n}\r\nfunction getNodeStickiness(node) {\r\n    return ((node.metadata & 48 /* StickinessMask */) >>> 4 /* StickinessOffset */);\r\n}\r\nfunction _setNodeStickiness(node, stickiness) {\r\n    node.metadata = ((node.metadata & 207 /* StickinessMaskInverse */) | (stickiness << 4 /* StickinessOffset */));\r\n}\r\nfunction getCollapseOnReplaceEdit(node) {\r\n    return ((node.metadata & 64 /* CollapseOnReplaceEditMask */) >>> 6 /* CollapseOnReplaceEditOffset */) === 1;\r\n}\r\nfunction setCollapseOnReplaceEdit(node, value) {\r\n    node.metadata = ((node.metadata & 191 /* CollapseOnReplaceEditMaskInverse */) | ((value ? 1 : 0) << 6 /* CollapseOnReplaceEditOffset */));\r\n}\r\nvar IntervalNode = /** @class */ (function () {\r\n    function IntervalNode(id, start, end) {\r\n        this.metadata = 0;\r\n        this.parent = this;\r\n        this.left = this;\r\n        this.right = this;\r\n        setNodeColor(this, 1 /* Red */);\r\n        this.start = start;\r\n        this.end = end;\r\n        // FORCE_OVERFLOWING_TEST: this.delta = start;\r\n        this.delta = 0;\r\n        this.maxEnd = end;\r\n        this.id = id;\r\n        this.ownerId = 0;\r\n        this.options = null;\r\n        setNodeIsForValidation(this, false);\r\n        _setNodeStickiness(this, 1 /* NeverGrowsWhenTypingAtEdges */);\r\n        setNodeIsInOverviewRuler(this, false);\r\n        setCollapseOnReplaceEdit(this, false);\r\n        this.cachedVersionId = 0;\r\n        this.cachedAbsoluteStart = start;\r\n        this.cachedAbsoluteEnd = end;\r\n        this.range = null;\r\n        setNodeIsVisited(this, false);\r\n    }\r\n    IntervalNode.prototype.reset = function (versionId, start, end, range) {\r\n        this.start = start;\r\n        this.end = end;\r\n        this.maxEnd = end;\r\n        this.cachedVersionId = versionId;\r\n        this.cachedAbsoluteStart = start;\r\n        this.cachedAbsoluteEnd = end;\r\n        this.range = range;\r\n    };\r\n    IntervalNode.prototype.setOptions = function (options) {\r\n        this.options = options;\r\n        var className = this.options.className;\r\n        setNodeIsForValidation(this, (className === \"squiggly-error\" /* EditorErrorDecoration */\r\n            || className === \"squiggly-warning\" /* EditorWarningDecoration */\r\n            || className === \"squiggly-info\" /* EditorInfoDecoration */));\r\n        _setNodeStickiness(this, this.options.stickiness);\r\n        setNodeIsInOverviewRuler(this, (this.options.overviewRuler && this.options.overviewRuler.color) ? true : false);\r\n        setCollapseOnReplaceEdit(this, this.options.collapseOnReplaceEdit);\r\n    };\r\n    IntervalNode.prototype.setCachedOffsets = function (absoluteStart, absoluteEnd, cachedVersionId) {\r\n        if (this.cachedVersionId !== cachedVersionId) {\r\n            this.range = null;\r\n        }\r\n        this.cachedVersionId = cachedVersionId;\r\n        this.cachedAbsoluteStart = absoluteStart;\r\n        this.cachedAbsoluteEnd = absoluteEnd;\r\n    };\r\n    IntervalNode.prototype.detach = function () {\r\n        this.parent = null;\r\n        this.left = null;\r\n        this.right = null;\r\n    };\r\n    return IntervalNode;\r\n}());\r\nexport { IntervalNode };\r\nexport var SENTINEL = new IntervalNode(null, 0, 0);\r\nSENTINEL.parent = SENTINEL;\r\nSENTINEL.left = SENTINEL;\r\nSENTINEL.right = SENTINEL;\r\nsetNodeColor(SENTINEL, 0 /* Black */);\r\nvar IntervalTree = /** @class */ (function () {\r\n    function IntervalTree() {\r\n        this.root = SENTINEL;\r\n        this.requestNormalizeDelta = false;\r\n    }\r\n    IntervalTree.prototype.intervalSearch = function (start, end, filterOwnerId, filterOutValidation, cachedVersionId) {\r\n        if (this.root === SENTINEL) {\r\n            return [];\r\n        }\r\n        return intervalSearch(this, start, end, filterOwnerId, filterOutValidation, cachedVersionId);\r\n    };\r\n    IntervalTree.prototype.search = function (filterOwnerId, filterOutValidation, cachedVersionId) {\r\n        if (this.root === SENTINEL) {\r\n            return [];\r\n        }\r\n        return search(this, filterOwnerId, filterOutValidation, cachedVersionId);\r\n    };\r\n    /**\r\n     * Will not set `cachedAbsoluteStart` nor `cachedAbsoluteEnd` on the returned nodes!\r\n     */\r\n    IntervalTree.prototype.collectNodesFromOwner = function (ownerId) {\r\n        return collectNodesFromOwner(this, ownerId);\r\n    };\r\n    /**\r\n     * Will not set `cachedAbsoluteStart` nor `cachedAbsoluteEnd` on the returned nodes!\r\n     */\r\n    IntervalTree.prototype.collectNodesPostOrder = function () {\r\n        return collectNodesPostOrder(this);\r\n    };\r\n    IntervalTree.prototype.insert = function (node) {\r\n        rbTreeInsert(this, node);\r\n        this._normalizeDeltaIfNecessary();\r\n    };\r\n    IntervalTree.prototype.delete = function (node) {\r\n        rbTreeDelete(this, node);\r\n        this._normalizeDeltaIfNecessary();\r\n    };\r\n    IntervalTree.prototype.resolveNode = function (node, cachedVersionId) {\r\n        var initialNode = node;\r\n        var delta = 0;\r\n        while (node !== this.root) {\r\n            if (node === node.parent.right) {\r\n                delta += node.parent.delta;\r\n            }\r\n            node = node.parent;\r\n        }\r\n        var nodeStart = initialNode.start + delta;\r\n        var nodeEnd = initialNode.end + delta;\r\n        initialNode.setCachedOffsets(nodeStart, nodeEnd, cachedVersionId);\r\n    };\r\n    IntervalTree.prototype.acceptReplace = function (offset, length, textLength, forceMoveMarkers) {\r\n        // Our strategy is to remove all directly impacted nodes, and then add them back to the tree.\r\n        // (1) collect all nodes that are intersecting this edit as nodes of interest\r\n        var nodesOfInterest = searchForEditing(this, offset, offset + length);\r\n        // (2) remove all nodes that are intersecting this edit\r\n        for (var i = 0, len = nodesOfInterest.length; i < len; i++) {\r\n            var node = nodesOfInterest[i];\r\n            rbTreeDelete(this, node);\r\n        }\r\n        this._normalizeDeltaIfNecessary();\r\n        // (3) edit all tree nodes except the nodes of interest\r\n        noOverlapReplace(this, offset, offset + length, textLength);\r\n        this._normalizeDeltaIfNecessary();\r\n        // (4) edit the nodes of interest and insert them back in the tree\r\n        for (var i = 0, len = nodesOfInterest.length; i < len; i++) {\r\n            var node = nodesOfInterest[i];\r\n            node.start = node.cachedAbsoluteStart;\r\n            node.end = node.cachedAbsoluteEnd;\r\n            nodeAcceptEdit(node, offset, (offset + length), textLength, forceMoveMarkers);\r\n            node.maxEnd = node.end;\r\n            rbTreeInsert(this, node);\r\n        }\r\n        this._normalizeDeltaIfNecessary();\r\n    };\r\n    IntervalTree.prototype._normalizeDeltaIfNecessary = function () {\r\n        if (!this.requestNormalizeDelta) {\r\n            return;\r\n        }\r\n        this.requestNormalizeDelta = false;\r\n        normalizeDelta(this);\r\n    };\r\n    return IntervalTree;\r\n}());\r\nexport { IntervalTree };\r\n//#region Delta Normalization\r\nfunction normalizeDelta(T) {\r\n    var node = T.root;\r\n    var delta = 0;\r\n    while (node !== SENTINEL) {\r\n        if (node.left !== SENTINEL && !getNodeIsVisited(node.left)) {\r\n            // go left\r\n            node = node.left;\r\n            continue;\r\n        }\r\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\r\n            // go right\r\n            delta += node.delta;\r\n            node = node.right;\r\n            continue;\r\n        }\r\n        // handle current node\r\n        node.start = delta + node.start;\r\n        node.end = delta + node.end;\r\n        node.delta = 0;\r\n        recomputeMaxEnd(node);\r\n        setNodeIsVisited(node, true);\r\n        // going up from this node\r\n        setNodeIsVisited(node.left, false);\r\n        setNodeIsVisited(node.right, false);\r\n        if (node === node.parent.right) {\r\n            delta -= node.parent.delta;\r\n        }\r\n        node = node.parent;\r\n    }\r\n    setNodeIsVisited(T.root, false);\r\n}\r\nfunction adjustMarkerBeforeColumn(markerOffset, markerStickToPreviousCharacter, checkOffset, moveSemantics) {\r\n    if (markerOffset < checkOffset) {\r\n        return true;\r\n    }\r\n    if (markerOffset > checkOffset) {\r\n        return false;\r\n    }\r\n    if (moveSemantics === 1 /* ForceMove */) {\r\n        return false;\r\n    }\r\n    if (moveSemantics === 2 /* ForceStay */) {\r\n        return true;\r\n    }\r\n    return markerStickToPreviousCharacter;\r\n}\r\n/**\r\n * This is a lot more complicated than strictly necessary to maintain the same behaviour\r\n * as when decorations were implemented using two markers.\r\n */\r\nexport function nodeAcceptEdit(node, start, end, textLength, forceMoveMarkers) {\r\n    var nodeStickiness = getNodeStickiness(node);\r\n    var startStickToPreviousCharacter = (nodeStickiness === 0 /* AlwaysGrowsWhenTypingAtEdges */\r\n        || nodeStickiness === 2 /* GrowsOnlyWhenTypingBefore */);\r\n    var endStickToPreviousCharacter = (nodeStickiness === 1 /* NeverGrowsWhenTypingAtEdges */\r\n        || nodeStickiness === 2 /* GrowsOnlyWhenTypingBefore */);\r\n    var deletingCnt = (end - start);\r\n    var insertingCnt = textLength;\r\n    var commonLength = Math.min(deletingCnt, insertingCnt);\r\n    var nodeStart = node.start;\r\n    var startDone = false;\r\n    var nodeEnd = node.end;\r\n    var endDone = false;\r\n    if (start <= nodeStart && nodeEnd <= end && getCollapseOnReplaceEdit(node)) {\r\n        // This edit encompasses the entire decoration range\r\n        // and the decoration has asked to become collapsed\r\n        node.start = start;\r\n        startDone = true;\r\n        node.end = start;\r\n        endDone = true;\r\n    }\r\n    {\r\n        var moveSemantics = forceMoveMarkers ? 1 /* ForceMove */ : (deletingCnt > 0 ? 2 /* ForceStay */ : 0 /* MarkerDefined */);\r\n        if (!startDone && adjustMarkerBeforeColumn(nodeStart, startStickToPreviousCharacter, start, moveSemantics)) {\r\n            startDone = true;\r\n        }\r\n        if (!endDone && adjustMarkerBeforeColumn(nodeEnd, endStickToPreviousCharacter, start, moveSemantics)) {\r\n            endDone = true;\r\n        }\r\n    }\r\n    if (commonLength > 0 && !forceMoveMarkers) {\r\n        var moveSemantics = (deletingCnt > insertingCnt ? 2 /* ForceStay */ : 0 /* MarkerDefined */);\r\n        if (!startDone && adjustMarkerBeforeColumn(nodeStart, startStickToPreviousCharacter, start + commonLength, moveSemantics)) {\r\n            startDone = true;\r\n        }\r\n        if (!endDone && adjustMarkerBeforeColumn(nodeEnd, endStickToPreviousCharacter, start + commonLength, moveSemantics)) {\r\n            endDone = true;\r\n        }\r\n    }\r\n    {\r\n        var moveSemantics = forceMoveMarkers ? 1 /* ForceMove */ : 0 /* MarkerDefined */;\r\n        if (!startDone && adjustMarkerBeforeColumn(nodeStart, startStickToPreviousCharacter, end, moveSemantics)) {\r\n            node.start = start + insertingCnt;\r\n            startDone = true;\r\n        }\r\n        if (!endDone && adjustMarkerBeforeColumn(nodeEnd, endStickToPreviousCharacter, end, moveSemantics)) {\r\n            node.end = start + insertingCnt;\r\n            endDone = true;\r\n        }\r\n    }\r\n    // Finish\r\n    var deltaColumn = (insertingCnt - deletingCnt);\r\n    if (!startDone) {\r\n        node.start = Math.max(0, nodeStart + deltaColumn);\r\n    }\r\n    if (!endDone) {\r\n        node.end = Math.max(0, nodeEnd + deltaColumn);\r\n    }\r\n    if (node.start > node.end) {\r\n        node.end = node.start;\r\n    }\r\n}\r\nfunction searchForEditing(T, start, end) {\r\n    // https://en.wikipedia.org/wiki/Interval_tree#Augmented_tree\r\n    // Now, it is known that two intervals A and B overlap only when both\r\n    // A.low <= B.high and A.high >= B.low. When searching the trees for\r\n    // nodes overlapping with a given interval, you can immediately skip:\r\n    //  a) all nodes to the right of nodes whose low value is past the end of the given interval.\r\n    //  b) all nodes that have their maximum 'high' value below the start of the given interval.\r\n    var node = T.root;\r\n    var delta = 0;\r\n    var nodeMaxEnd = 0;\r\n    var nodeStart = 0;\r\n    var nodeEnd = 0;\r\n    var result = [];\r\n    var resultLen = 0;\r\n    while (node !== SENTINEL) {\r\n        if (getNodeIsVisited(node)) {\r\n            // going up from this node\r\n            setNodeIsVisited(node.left, false);\r\n            setNodeIsVisited(node.right, false);\r\n            if (node === node.parent.right) {\r\n                delta -= node.parent.delta;\r\n            }\r\n            node = node.parent;\r\n            continue;\r\n        }\r\n        if (!getNodeIsVisited(node.left)) {\r\n            // first time seeing this node\r\n            nodeMaxEnd = delta + node.maxEnd;\r\n            if (nodeMaxEnd < start) {\r\n                // cover case b) from above\r\n                // there is no need to search this node or its children\r\n                setNodeIsVisited(node, true);\r\n                continue;\r\n            }\r\n            if (node.left !== SENTINEL) {\r\n                // go left\r\n                node = node.left;\r\n                continue;\r\n            }\r\n        }\r\n        // handle current node\r\n        nodeStart = delta + node.start;\r\n        if (nodeStart > end) {\r\n            // cover case a) from above\r\n            // there is no need to search this node or its right subtree\r\n            setNodeIsVisited(node, true);\r\n            continue;\r\n        }\r\n        nodeEnd = delta + node.end;\r\n        if (nodeEnd >= start) {\r\n            node.setCachedOffsets(nodeStart, nodeEnd, 0);\r\n            result[resultLen++] = node;\r\n        }\r\n        setNodeIsVisited(node, true);\r\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\r\n            // go right\r\n            delta += node.delta;\r\n            node = node.right;\r\n            continue;\r\n        }\r\n    }\r\n    setNodeIsVisited(T.root, false);\r\n    return result;\r\n}\r\nfunction noOverlapReplace(T, start, end, textLength) {\r\n    // https://en.wikipedia.org/wiki/Interval_tree#Augmented_tree\r\n    // Now, it is known that two intervals A and B overlap only when both\r\n    // A.low <= B.high and A.high >= B.low. When searching the trees for\r\n    // nodes overlapping with a given interval, you can immediately skip:\r\n    //  a) all nodes to the right of nodes whose low value is past the end of the given interval.\r\n    //  b) all nodes that have their maximum 'high' value below the start of the given interval.\r\n    var node = T.root;\r\n    var delta = 0;\r\n    var nodeMaxEnd = 0;\r\n    var nodeStart = 0;\r\n    var editDelta = (textLength - (end - start));\r\n    while (node !== SENTINEL) {\r\n        if (getNodeIsVisited(node)) {\r\n            // going up from this node\r\n            setNodeIsVisited(node.left, false);\r\n            setNodeIsVisited(node.right, false);\r\n            if (node === node.parent.right) {\r\n                delta -= node.parent.delta;\r\n            }\r\n            recomputeMaxEnd(node);\r\n            node = node.parent;\r\n            continue;\r\n        }\r\n        if (!getNodeIsVisited(node.left)) {\r\n            // first time seeing this node\r\n            nodeMaxEnd = delta + node.maxEnd;\r\n            if (nodeMaxEnd < start) {\r\n                // cover case b) from above\r\n                // there is no need to search this node or its children\r\n                setNodeIsVisited(node, true);\r\n                continue;\r\n            }\r\n            if (node.left !== SENTINEL) {\r\n                // go left\r\n                node = node.left;\r\n                continue;\r\n            }\r\n        }\r\n        // handle current node\r\n        nodeStart = delta + node.start;\r\n        if (nodeStart > end) {\r\n            node.start += editDelta;\r\n            node.end += editDelta;\r\n            node.delta += editDelta;\r\n            if (node.delta < -1073741824 /* MIN_SAFE_DELTA */ || node.delta > 1073741824 /* MAX_SAFE_DELTA */) {\r\n                T.requestNormalizeDelta = true;\r\n            }\r\n            // cover case a) from above\r\n            // there is no need to search this node or its right subtree\r\n            setNodeIsVisited(node, true);\r\n            continue;\r\n        }\r\n        setNodeIsVisited(node, true);\r\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\r\n            // go right\r\n            delta += node.delta;\r\n            node = node.right;\r\n            continue;\r\n        }\r\n    }\r\n    setNodeIsVisited(T.root, false);\r\n}\r\n//#endregion\r\n//#region Searching\r\nfunction collectNodesFromOwner(T, ownerId) {\r\n    var node = T.root;\r\n    var result = [];\r\n    var resultLen = 0;\r\n    while (node !== SENTINEL) {\r\n        if (getNodeIsVisited(node)) {\r\n            // going up from this node\r\n            setNodeIsVisited(node.left, false);\r\n            setNodeIsVisited(node.right, false);\r\n            node = node.parent;\r\n            continue;\r\n        }\r\n        if (node.left !== SENTINEL && !getNodeIsVisited(node.left)) {\r\n            // go left\r\n            node = node.left;\r\n            continue;\r\n        }\r\n        // handle current node\r\n        if (node.ownerId === ownerId) {\r\n            result[resultLen++] = node;\r\n        }\r\n        setNodeIsVisited(node, true);\r\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\r\n            // go right\r\n            node = node.right;\r\n            continue;\r\n        }\r\n    }\r\n    setNodeIsVisited(T.root, false);\r\n    return result;\r\n}\r\nfunction collectNodesPostOrder(T) {\r\n    var node = T.root;\r\n    var result = [];\r\n    var resultLen = 0;\r\n    while (node !== SENTINEL) {\r\n        if (getNodeIsVisited(node)) {\r\n            // going up from this node\r\n            setNodeIsVisited(node.left, false);\r\n            setNodeIsVisited(node.right, false);\r\n            node = node.parent;\r\n            continue;\r\n        }\r\n        if (node.left !== SENTINEL && !getNodeIsVisited(node.left)) {\r\n            // go left\r\n            node = node.left;\r\n            continue;\r\n        }\r\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\r\n            // go right\r\n            node = node.right;\r\n            continue;\r\n        }\r\n        // handle current node\r\n        result[resultLen++] = node;\r\n        setNodeIsVisited(node, true);\r\n    }\r\n    setNodeIsVisited(T.root, false);\r\n    return result;\r\n}\r\nfunction search(T, filterOwnerId, filterOutValidation, cachedVersionId) {\r\n    var node = T.root;\r\n    var delta = 0;\r\n    var nodeStart = 0;\r\n    var nodeEnd = 0;\r\n    var result = [];\r\n    var resultLen = 0;\r\n    while (node !== SENTINEL) {\r\n        if (getNodeIsVisited(node)) {\r\n            // going up from this node\r\n            setNodeIsVisited(node.left, false);\r\n            setNodeIsVisited(node.right, false);\r\n            if (node === node.parent.right) {\r\n                delta -= node.parent.delta;\r\n            }\r\n            node = node.parent;\r\n            continue;\r\n        }\r\n        if (node.left !== SENTINEL && !getNodeIsVisited(node.left)) {\r\n            // go left\r\n            node = node.left;\r\n            continue;\r\n        }\r\n        // handle current node\r\n        nodeStart = delta + node.start;\r\n        nodeEnd = delta + node.end;\r\n        node.setCachedOffsets(nodeStart, nodeEnd, cachedVersionId);\r\n        var include = true;\r\n        if (filterOwnerId && node.ownerId && node.ownerId !== filterOwnerId) {\r\n            include = false;\r\n        }\r\n        if (filterOutValidation && getNodeIsForValidation(node)) {\r\n            include = false;\r\n        }\r\n        if (include) {\r\n            result[resultLen++] = node;\r\n        }\r\n        setNodeIsVisited(node, true);\r\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\r\n            // go right\r\n            delta += node.delta;\r\n            node = node.right;\r\n            continue;\r\n        }\r\n    }\r\n    setNodeIsVisited(T.root, false);\r\n    return result;\r\n}\r\nfunction intervalSearch(T, intervalStart, intervalEnd, filterOwnerId, filterOutValidation, cachedVersionId) {\r\n    // https://en.wikipedia.org/wiki/Interval_tree#Augmented_tree\r\n    // Now, it is known that two intervals A and B overlap only when both\r\n    // A.low <= B.high and A.high >= B.low. When searching the trees for\r\n    // nodes overlapping with a given interval, you can immediately skip:\r\n    //  a) all nodes to the right of nodes whose low value is past the end of the given interval.\r\n    //  b) all nodes that have their maximum 'high' value below the start of the given interval.\r\n    var node = T.root;\r\n    var delta = 0;\r\n    var nodeMaxEnd = 0;\r\n    var nodeStart = 0;\r\n    var nodeEnd = 0;\r\n    var result = [];\r\n    var resultLen = 0;\r\n    while (node !== SENTINEL) {\r\n        if (getNodeIsVisited(node)) {\r\n            // going up from this node\r\n            setNodeIsVisited(node.left, false);\r\n            setNodeIsVisited(node.right, false);\r\n            if (node === node.parent.right) {\r\n                delta -= node.parent.delta;\r\n            }\r\n            node = node.parent;\r\n            continue;\r\n        }\r\n        if (!getNodeIsVisited(node.left)) {\r\n            // first time seeing this node\r\n            nodeMaxEnd = delta + node.maxEnd;\r\n            if (nodeMaxEnd < intervalStart) {\r\n                // cover case b) from above\r\n                // there is no need to search this node or its children\r\n                setNodeIsVisited(node, true);\r\n                continue;\r\n            }\r\n            if (node.left !== SENTINEL) {\r\n                // go left\r\n                node = node.left;\r\n                continue;\r\n            }\r\n        }\r\n        // handle current node\r\n        nodeStart = delta + node.start;\r\n        if (nodeStart > intervalEnd) {\r\n            // cover case a) from above\r\n            // there is no need to search this node or its right subtree\r\n            setNodeIsVisited(node, true);\r\n            continue;\r\n        }\r\n        nodeEnd = delta + node.end;\r\n        if (nodeEnd >= intervalStart) {\r\n            // There is overlap\r\n            node.setCachedOffsets(nodeStart, nodeEnd, cachedVersionId);\r\n            var include = true;\r\n            if (filterOwnerId && node.ownerId && node.ownerId !== filterOwnerId) {\r\n                include = false;\r\n            }\r\n            if (filterOutValidation && getNodeIsForValidation(node)) {\r\n                include = false;\r\n            }\r\n            if (include) {\r\n                result[resultLen++] = node;\r\n            }\r\n        }\r\n        setNodeIsVisited(node, true);\r\n        if (node.right !== SENTINEL && !getNodeIsVisited(node.right)) {\r\n            // go right\r\n            delta += node.delta;\r\n            node = node.right;\r\n            continue;\r\n        }\r\n    }\r\n    setNodeIsVisited(T.root, false);\r\n    return result;\r\n}\r\n//#endregion\r\n//#region Insertion\r\nfunction rbTreeInsert(T, newNode) {\r\n    if (T.root === SENTINEL) {\r\n        newNode.parent = SENTINEL;\r\n        newNode.left = SENTINEL;\r\n        newNode.right = SENTINEL;\r\n        setNodeColor(newNode, 0 /* Black */);\r\n        T.root = newNode;\r\n        return T.root;\r\n    }\r\n    treeInsert(T, newNode);\r\n    recomputeMaxEndWalkToRoot(newNode.parent);\r\n    // repair tree\r\n    var x = newNode;\r\n    while (x !== T.root && getNodeColor(x.parent) === 1 /* Red */) {\r\n        if (x.parent === x.parent.parent.left) {\r\n            var y = x.parent.parent.right;\r\n            if (getNodeColor(y) === 1 /* Red */) {\r\n                setNodeColor(x.parent, 0 /* Black */);\r\n                setNodeColor(y, 0 /* Black */);\r\n                setNodeColor(x.parent.parent, 1 /* Red */);\r\n                x = x.parent.parent;\r\n            }\r\n            else {\r\n                if (x === x.parent.right) {\r\n                    x = x.parent;\r\n                    leftRotate(T, x);\r\n                }\r\n                setNodeColor(x.parent, 0 /* Black */);\r\n                setNodeColor(x.parent.parent, 1 /* Red */);\r\n                rightRotate(T, x.parent.parent);\r\n            }\r\n        }\r\n        else {\r\n            var y = x.parent.parent.left;\r\n            if (getNodeColor(y) === 1 /* Red */) {\r\n                setNodeColor(x.parent, 0 /* Black */);\r\n                setNodeColor(y, 0 /* Black */);\r\n                setNodeColor(x.parent.parent, 1 /* Red */);\r\n                x = x.parent.parent;\r\n            }\r\n            else {\r\n                if (x === x.parent.left) {\r\n                    x = x.parent;\r\n                    rightRotate(T, x);\r\n                }\r\n                setNodeColor(x.parent, 0 /* Black */);\r\n                setNodeColor(x.parent.parent, 1 /* Red */);\r\n                leftRotate(T, x.parent.parent);\r\n            }\r\n        }\r\n    }\r\n    setNodeColor(T.root, 0 /* Black */);\r\n    return newNode;\r\n}\r\nfunction treeInsert(T, z) {\r\n    var delta = 0;\r\n    var x = T.root;\r\n    var zAbsoluteStart = z.start;\r\n    var zAbsoluteEnd = z.end;\r\n    while (true) {\r\n        var cmp = intervalCompare(zAbsoluteStart, zAbsoluteEnd, x.start + delta, x.end + delta);\r\n        if (cmp < 0) {\r\n            // this node should be inserted to the left\r\n            // => it is not affected by the node's delta\r\n            if (x.left === SENTINEL) {\r\n                z.start -= delta;\r\n                z.end -= delta;\r\n                z.maxEnd -= delta;\r\n                x.left = z;\r\n                break;\r\n            }\r\n            else {\r\n                x = x.left;\r\n            }\r\n        }\r\n        else {\r\n            // this node should be inserted to the right\r\n            // => it is not affected by the node's delta\r\n            if (x.right === SENTINEL) {\r\n                z.start -= (delta + x.delta);\r\n                z.end -= (delta + x.delta);\r\n                z.maxEnd -= (delta + x.delta);\r\n                x.right = z;\r\n                break;\r\n            }\r\n            else {\r\n                delta += x.delta;\r\n                x = x.right;\r\n            }\r\n        }\r\n    }\r\n    z.parent = x;\r\n    z.left = SENTINEL;\r\n    z.right = SENTINEL;\r\n    setNodeColor(z, 1 /* Red */);\r\n}\r\n//#endregion\r\n//#region Deletion\r\nfunction rbTreeDelete(T, z) {\r\n    var x;\r\n    var y;\r\n    // RB-DELETE except we don't swap z and y in case c)\r\n    // i.e. we always delete what's pointed at by z.\r\n    if (z.left === SENTINEL) {\r\n        x = z.right;\r\n        y = z;\r\n        // x's delta is no longer influenced by z's delta\r\n        x.delta += z.delta;\r\n        if (x.delta < -1073741824 /* MIN_SAFE_DELTA */ || x.delta > 1073741824 /* MAX_SAFE_DELTA */) {\r\n            T.requestNormalizeDelta = true;\r\n        }\r\n        x.start += z.delta;\r\n        x.end += z.delta;\r\n    }\r\n    else if (z.right === SENTINEL) {\r\n        x = z.left;\r\n        y = z;\r\n    }\r\n    else {\r\n        y = leftest(z.right);\r\n        x = y.right;\r\n        // y's delta is no longer influenced by z's delta,\r\n        // but we don't want to walk the entire right-hand-side subtree of x.\r\n        // we therefore maintain z's delta in y, and adjust only x\r\n        x.start += y.delta;\r\n        x.end += y.delta;\r\n        x.delta += y.delta;\r\n        if (x.delta < -1073741824 /* MIN_SAFE_DELTA */ || x.delta > 1073741824 /* MAX_SAFE_DELTA */) {\r\n            T.requestNormalizeDelta = true;\r\n        }\r\n        y.start += z.delta;\r\n        y.end += z.delta;\r\n        y.delta = z.delta;\r\n        if (y.delta < -1073741824 /* MIN_SAFE_DELTA */ || y.delta > 1073741824 /* MAX_SAFE_DELTA */) {\r\n            T.requestNormalizeDelta = true;\r\n        }\r\n    }\r\n    if (y === T.root) {\r\n        T.root = x;\r\n        setNodeColor(x, 0 /* Black */);\r\n        z.detach();\r\n        resetSentinel();\r\n        recomputeMaxEnd(x);\r\n        T.root.parent = SENTINEL;\r\n        return;\r\n    }\r\n    var yWasRed = (getNodeColor(y) === 1 /* Red */);\r\n    if (y === y.parent.left) {\r\n        y.parent.left = x;\r\n    }\r\n    else {\r\n        y.parent.right = x;\r\n    }\r\n    if (y === z) {\r\n        x.parent = y.parent;\r\n    }\r\n    else {\r\n        if (y.parent === z) {\r\n            x.parent = y;\r\n        }\r\n        else {\r\n            x.parent = y.parent;\r\n        }\r\n        y.left = z.left;\r\n        y.right = z.right;\r\n        y.parent = z.parent;\r\n        setNodeColor(y, getNodeColor(z));\r\n        if (z === T.root) {\r\n            T.root = y;\r\n        }\r\n        else {\r\n            if (z === z.parent.left) {\r\n                z.parent.left = y;\r\n            }\r\n            else {\r\n                z.parent.right = y;\r\n            }\r\n        }\r\n        if (y.left !== SENTINEL) {\r\n            y.left.parent = y;\r\n        }\r\n        if (y.right !== SENTINEL) {\r\n            y.right.parent = y;\r\n        }\r\n    }\r\n    z.detach();\r\n    if (yWasRed) {\r\n        recomputeMaxEndWalkToRoot(x.parent);\r\n        if (y !== z) {\r\n            recomputeMaxEndWalkToRoot(y);\r\n            recomputeMaxEndWalkToRoot(y.parent);\r\n        }\r\n        resetSentinel();\r\n        return;\r\n    }\r\n    recomputeMaxEndWalkToRoot(x);\r\n    recomputeMaxEndWalkToRoot(x.parent);\r\n    if (y !== z) {\r\n        recomputeMaxEndWalkToRoot(y);\r\n        recomputeMaxEndWalkToRoot(y.parent);\r\n    }\r\n    // RB-DELETE-FIXUP\r\n    var w;\r\n    while (x !== T.root && getNodeColor(x) === 0 /* Black */) {\r\n        if (x === x.parent.left) {\r\n            w = x.parent.right;\r\n            if (getNodeColor(w) === 1 /* Red */) {\r\n                setNodeColor(w, 0 /* Black */);\r\n                setNodeColor(x.parent, 1 /* Red */);\r\n                leftRotate(T, x.parent);\r\n                w = x.parent.right;\r\n            }\r\n            if (getNodeColor(w.left) === 0 /* Black */ && getNodeColor(w.right) === 0 /* Black */) {\r\n                setNodeColor(w, 1 /* Red */);\r\n                x = x.parent;\r\n            }\r\n            else {\r\n                if (getNodeColor(w.right) === 0 /* Black */) {\r\n                    setNodeColor(w.left, 0 /* Black */);\r\n                    setNodeColor(w, 1 /* Red */);\r\n                    rightRotate(T, w);\r\n                    w = x.parent.right;\r\n                }\r\n                setNodeColor(w, getNodeColor(x.parent));\r\n                setNodeColor(x.parent, 0 /* Black */);\r\n                setNodeColor(w.right, 0 /* Black */);\r\n                leftRotate(T, x.parent);\r\n                x = T.root;\r\n            }\r\n        }\r\n        else {\r\n            w = x.parent.left;\r\n            if (getNodeColor(w) === 1 /* Red */) {\r\n                setNodeColor(w, 0 /* Black */);\r\n                setNodeColor(x.parent, 1 /* Red */);\r\n                rightRotate(T, x.parent);\r\n                w = x.parent.left;\r\n            }\r\n            if (getNodeColor(w.left) === 0 /* Black */ && getNodeColor(w.right) === 0 /* Black */) {\r\n                setNodeColor(w, 1 /* Red */);\r\n                x = x.parent;\r\n            }\r\n            else {\r\n                if (getNodeColor(w.left) === 0 /* Black */) {\r\n                    setNodeColor(w.right, 0 /* Black */);\r\n                    setNodeColor(w, 1 /* Red */);\r\n                    leftRotate(T, w);\r\n                    w = x.parent.left;\r\n                }\r\n                setNodeColor(w, getNodeColor(x.parent));\r\n                setNodeColor(x.parent, 0 /* Black */);\r\n                setNodeColor(w.left, 0 /* Black */);\r\n                rightRotate(T, x.parent);\r\n                x = T.root;\r\n            }\r\n        }\r\n    }\r\n    setNodeColor(x, 0 /* Black */);\r\n    resetSentinel();\r\n}\r\nfunction leftest(node) {\r\n    while (node.left !== SENTINEL) {\r\n        node = node.left;\r\n    }\r\n    return node;\r\n}\r\nfunction resetSentinel() {\r\n    SENTINEL.parent = SENTINEL;\r\n    SENTINEL.delta = 0; // optional\r\n    SENTINEL.start = 0; // optional\r\n    SENTINEL.end = 0; // optional\r\n}\r\n//#endregion\r\n//#region Rotations\r\nfunction leftRotate(T, x) {\r\n    var y = x.right; // set y.\r\n    y.delta += x.delta; // y's delta is no longer influenced by x's delta\r\n    if (y.delta < -1073741824 /* MIN_SAFE_DELTA */ || y.delta > 1073741824 /* MAX_SAFE_DELTA */) {\r\n        T.requestNormalizeDelta = true;\r\n    }\r\n    y.start += x.delta;\r\n    y.end += x.delta;\r\n    x.right = y.left; // turn y's left subtree into x's right subtree.\r\n    if (y.left !== SENTINEL) {\r\n        y.left.parent = x;\r\n    }\r\n    y.parent = x.parent; // link x's parent to y.\r\n    if (x.parent === SENTINEL) {\r\n        T.root = y;\r\n    }\r\n    else if (x === x.parent.left) {\r\n        x.parent.left = y;\r\n    }\r\n    else {\r\n        x.parent.right = y;\r\n    }\r\n    y.left = x; // put x on y's left.\r\n    x.parent = y;\r\n    recomputeMaxEnd(x);\r\n    recomputeMaxEnd(y);\r\n}\r\nfunction rightRotate(T, y) {\r\n    var x = y.left;\r\n    y.delta -= x.delta;\r\n    if (y.delta < -1073741824 /* MIN_SAFE_DELTA */ || y.delta > 1073741824 /* MAX_SAFE_DELTA */) {\r\n        T.requestNormalizeDelta = true;\r\n    }\r\n    y.start -= x.delta;\r\n    y.end -= x.delta;\r\n    y.left = x.right;\r\n    if (x.right !== SENTINEL) {\r\n        x.right.parent = y;\r\n    }\r\n    x.parent = y.parent;\r\n    if (y.parent === SENTINEL) {\r\n        T.root = x;\r\n    }\r\n    else if (y === y.parent.right) {\r\n        y.parent.right = x;\r\n    }\r\n    else {\r\n        y.parent.left = x;\r\n    }\r\n    x.right = y;\r\n    y.parent = x;\r\n    recomputeMaxEnd(y);\r\n    recomputeMaxEnd(x);\r\n}\r\n//#endregion\r\n//#region max end computation\r\nfunction computeMaxEnd(node) {\r\n    var maxEnd = node.end;\r\n    if (node.left !== SENTINEL) {\r\n        var leftMaxEnd = node.left.maxEnd;\r\n        if (leftMaxEnd > maxEnd) {\r\n            maxEnd = leftMaxEnd;\r\n        }\r\n    }\r\n    if (node.right !== SENTINEL) {\r\n        var rightMaxEnd = node.right.maxEnd + node.delta;\r\n        if (rightMaxEnd > maxEnd) {\r\n            maxEnd = rightMaxEnd;\r\n        }\r\n    }\r\n    return maxEnd;\r\n}\r\nexport function recomputeMaxEnd(node) {\r\n    node.maxEnd = computeMaxEnd(node);\r\n}\r\nfunction recomputeMaxEndWalkToRoot(node) {\r\n    while (node !== SENTINEL) {\r\n        var maxEnd = computeMaxEnd(node);\r\n        if (node.maxEnd === maxEnd) {\r\n            // no need to go further\r\n            return;\r\n        }\r\n        node.maxEnd = maxEnd;\r\n        node = node.parent;\r\n    }\r\n}\r\n//#endregion\r\n//#region utils\r\nexport function intervalCompare(aStart, aEnd, bStart, bEnd) {\r\n    if (aStart === bStart) {\r\n        return aEnd - bEnd;\r\n    }\r\n    return aStart - bStart;\r\n}\r\n//#endregion\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n/**\r\n * Vertical Lane in the overview ruler of the editor.\r\n */\r\nexport var OverviewRulerLane;\r\n(function (OverviewRulerLane) {\r\n    OverviewRulerLane[OverviewRulerLane[\"Left\"] = 1] = \"Left\";\r\n    OverviewRulerLane[OverviewRulerLane[\"Center\"] = 2] = \"Center\";\r\n    OverviewRulerLane[OverviewRulerLane[\"Right\"] = 4] = \"Right\";\r\n    OverviewRulerLane[OverviewRulerLane[\"Full\"] = 7] = \"Full\";\r\n})(OverviewRulerLane || (OverviewRulerLane = {}));\r\n/**\r\n * Position in the minimap to render the decoration.\r\n */\r\nexport var MinimapPosition;\r\n(function (MinimapPosition) {\r\n    MinimapPosition[MinimapPosition[\"Inline\"] = 1] = \"Inline\";\r\n    MinimapPosition[MinimapPosition[\"Gutter\"] = 2] = \"Gutter\";\r\n})(MinimapPosition || (MinimapPosition = {}));\r\nvar TextModelResolvedOptions = /** @class */ (function () {\r\n    /**\r\n     * @internal\r\n     */\r\n    function TextModelResolvedOptions(src) {\r\n        this.tabSize = Math.max(1, src.tabSize | 0);\r\n        this.indentSize = src.tabSize | 0;\r\n        this.insertSpaces = Boolean(src.insertSpaces);\r\n        this.defaultEOL = src.defaultEOL | 0;\r\n        this.trimAutoWhitespace = Boolean(src.trimAutoWhitespace);\r\n    }\r\n    /**\r\n     * @internal\r\n     */\r\n    TextModelResolvedOptions.prototype.equals = function (other) {\r\n        return (this.tabSize === other.tabSize\r\n            && this.indentSize === other.indentSize\r\n            && this.insertSpaces === other.insertSpaces\r\n            && this.defaultEOL === other.defaultEOL\r\n            && this.trimAutoWhitespace === other.trimAutoWhitespace);\r\n    };\r\n    /**\r\n     * @internal\r\n     */\r\n    TextModelResolvedOptions.prototype.createChangeEvent = function (newOpts) {\r\n        return {\r\n            tabSize: this.tabSize !== newOpts.tabSize,\r\n            indentSize: this.indentSize !== newOpts.indentSize,\r\n            insertSpaces: this.insertSpaces !== newOpts.insertSpaces,\r\n            trimAutoWhitespace: this.trimAutoWhitespace !== newOpts.trimAutoWhitespace,\r\n        };\r\n    };\r\n    return TextModelResolvedOptions;\r\n}());\r\nexport { TextModelResolvedOptions };\r\nvar FindMatch = /** @class */ (function () {\r\n    /**\r\n     * @internal\r\n     */\r\n    function FindMatch(range, matches) {\r\n        this.range = range;\r\n        this.matches = matches;\r\n    }\r\n    return FindMatch;\r\n}());\r\nexport { FindMatch };\r\n/**\r\n * @internal\r\n */\r\nvar ApplyEditsResult = /** @class */ (function () {\r\n    function ApplyEditsResult(reverseEdits, changes, trimAutoWhitespaceLineNumbers) {\r\n        this.reverseEdits = reverseEdits;\r\n        this.changes = changes;\r\n        this.trimAutoWhitespaceLineNumbers = trimAutoWhitespaceLineNumbers;\r\n    }\r\n    return ApplyEditsResult;\r\n}());\r\nexport { ApplyEditsResult };\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { onUnexpectedError } from '../../../base/common/errors.js';\r\nvar EditStackElement = /** @class */ (function () {\r\n    function EditStackElement(beforeVersionId, beforeCursorState) {\r\n        this.beforeVersionId = beforeVersionId;\r\n        this.beforeCursorState = beforeCursorState;\r\n        this.afterCursorState = null;\r\n        this.afterVersionId = -1;\r\n        this.editOperations = [];\r\n    }\r\n    EditStackElement.prototype.undo = function (model) {\r\n        // Apply all operations in reverse order\r\n        for (var i = this.editOperations.length - 1; i >= 0; i--) {\r\n            this.editOperations[i] = {\r\n                operations: model.applyEdits(this.editOperations[i].operations)\r\n            };\r\n        }\r\n    };\r\n    EditStackElement.prototype.redo = function (model) {\r\n        // Apply all operations\r\n        for (var i = 0; i < this.editOperations.length; i++) {\r\n            this.editOperations[i] = {\r\n                operations: model.applyEdits(this.editOperations[i].operations)\r\n            };\r\n        }\r\n    };\r\n    return EditStackElement;\r\n}());\r\nfunction getModelEOL(model) {\r\n    var eol = model.getEOL();\r\n    if (eol === '\\n') {\r\n        return 0 /* LF */;\r\n    }\r\n    else {\r\n        return 1 /* CRLF */;\r\n    }\r\n}\r\nvar EOLStackElement = /** @class */ (function () {\r\n    function EOLStackElement(beforeVersionId, setEOL) {\r\n        this.beforeVersionId = beforeVersionId;\r\n        this.beforeCursorState = null;\r\n        this.afterCursorState = null;\r\n        this.afterVersionId = -1;\r\n        this.eol = setEOL;\r\n    }\r\n    EOLStackElement.prototype.undo = function (model) {\r\n        var redoEOL = getModelEOL(model);\r\n        model.setEOL(this.eol);\r\n        this.eol = redoEOL;\r\n    };\r\n    EOLStackElement.prototype.redo = function (model) {\r\n        var undoEOL = getModelEOL(model);\r\n        model.setEOL(this.eol);\r\n        this.eol = undoEOL;\r\n    };\r\n    return EOLStackElement;\r\n}());\r\nvar EditStack = /** @class */ (function () {\r\n    function EditStack(model) {\r\n        this.model = model;\r\n        this.currentOpenStackElement = null;\r\n        this.past = [];\r\n        this.future = [];\r\n    }\r\n    EditStack.prototype.pushStackElement = function () {\r\n        if (this.currentOpenStackElement !== null) {\r\n            this.past.push(this.currentOpenStackElement);\r\n            this.currentOpenStackElement = null;\r\n        }\r\n    };\r\n    EditStack.prototype.clear = function () {\r\n        this.currentOpenStackElement = null;\r\n        this.past = [];\r\n        this.future = [];\r\n    };\r\n    EditStack.prototype.pushEOL = function (eol) {\r\n        // No support for parallel universes :(\r\n        this.future = [];\r\n        if (this.currentOpenStackElement) {\r\n            this.pushStackElement();\r\n        }\r\n        var prevEOL = getModelEOL(this.model);\r\n        var stackElement = new EOLStackElement(this.model.getAlternativeVersionId(), prevEOL);\r\n        this.model.setEOL(eol);\r\n        stackElement.afterVersionId = this.model.getVersionId();\r\n        this.currentOpenStackElement = stackElement;\r\n        this.pushStackElement();\r\n    };\r\n    EditStack.prototype.pushEditOperation = function (beforeCursorState, editOperations, cursorStateComputer) {\r\n        // No support for parallel universes :(\r\n        this.future = [];\r\n        var stackElement = null;\r\n        if (this.currentOpenStackElement) {\r\n            if (this.currentOpenStackElement instanceof EditStackElement) {\r\n                stackElement = this.currentOpenStackElement;\r\n            }\r\n            else {\r\n                this.pushStackElement();\r\n            }\r\n        }\r\n        if (!this.currentOpenStackElement) {\r\n            stackElement = new EditStackElement(this.model.getAlternativeVersionId(), beforeCursorState);\r\n            this.currentOpenStackElement = stackElement;\r\n        }\r\n        var inverseEditOperation = {\r\n            operations: this.model.applyEdits(editOperations)\r\n        };\r\n        stackElement.editOperations.push(inverseEditOperation);\r\n        stackElement.afterCursorState = EditStack._computeCursorState(cursorStateComputer, inverseEditOperation.operations);\r\n        stackElement.afterVersionId = this.model.getVersionId();\r\n        return stackElement.afterCursorState;\r\n    };\r\n    EditStack._computeCursorState = function (cursorStateComputer, inverseEditOperations) {\r\n        try {\r\n            return cursorStateComputer ? cursorStateComputer(inverseEditOperations) : null;\r\n        }\r\n        catch (e) {\r\n            onUnexpectedError(e);\r\n            return null;\r\n        }\r\n    };\r\n    EditStack.prototype.undo = function () {\r\n        this.pushStackElement();\r\n        if (this.past.length > 0) {\r\n            var pastStackElement = this.past.pop();\r\n            try {\r\n                pastStackElement.undo(this.model);\r\n            }\r\n            catch (e) {\r\n                onUnexpectedError(e);\r\n                this.clear();\r\n                return null;\r\n            }\r\n            this.future.push(pastStackElement);\r\n            return {\r\n                selections: pastStackElement.beforeCursorState,\r\n                recordedVersionId: pastStackElement.beforeVersionId\r\n            };\r\n        }\r\n        return null;\r\n    };\r\n    EditStack.prototype.canUndo = function () {\r\n        return (this.past.length > 0) || this.currentOpenStackElement !== null;\r\n    };\r\n    EditStack.prototype.redo = function () {\r\n        if (this.future.length > 0) {\r\n            var futureStackElement = this.future.pop();\r\n            try {\r\n                futureStackElement.redo(this.model);\r\n            }\r\n            catch (e) {\r\n                onUnexpectedError(e);\r\n                this.clear();\r\n                return null;\r\n            }\r\n            this.past.push(futureStackElement);\r\n            return {\r\n                selections: futureStackElement.afterCursorState,\r\n                recordedVersionId: futureStackElement.afterVersionId\r\n            };\r\n        }\r\n        return null;\r\n    };\r\n    EditStack.prototype.canRedo = function () {\r\n        return (this.future.length > 0);\r\n    };\r\n    return EditStack;\r\n}());\r\nexport { EditStack };\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Position } from '../core/position.js';\r\nimport { PrefixSumComputer } from '../viewModel/prefixSumComputer.js';\r\nvar MirrorTextModel = /** @class */ (function () {\r\n    function MirrorTextModel(uri, lines, eol, versionId) {\r\n        this._uri = uri;\r\n        this._lines = lines;\r\n        this._eol = eol;\r\n        this._versionId = versionId;\r\n        this._lineStarts = null;\r\n    }\r\n    MirrorTextModel.prototype.dispose = function () {\r\n        this._lines.length = 0;\r\n    };\r\n    MirrorTextModel.prototype.getText = function () {\r\n        return this._lines.join(this._eol);\r\n    };\r\n    MirrorTextModel.prototype.onEvents = function (e) {\r\n        if (e.eol && e.eol !== this._eol) {\r\n            this._eol = e.eol;\r\n            this._lineStarts = null;\r\n        }\r\n        // Update my lines\r\n        var changes = e.changes;\r\n        for (var _i = 0, changes_1 = changes; _i < changes_1.length; _i++) {\r\n            var change = changes_1[_i];\r\n            this._acceptDeleteRange(change.range);\r\n            this._acceptInsertText(new Position(change.range.startLineNumber, change.range.startColumn), change.text);\r\n        }\r\n        this._versionId = e.versionId;\r\n    };\r\n    MirrorTextModel.prototype._ensureLineStarts = function () {\r\n        if (!this._lineStarts) {\r\n            var eolLength = this._eol.length;\r\n            var linesLength = this._lines.length;\r\n            var lineStartValues = new Uint32Array(linesLength);\r\n            for (var i = 0; i < linesLength; i++) {\r\n                lineStartValues[i] = this._lines[i].length + eolLength;\r\n            }\r\n            this._lineStarts = new PrefixSumComputer(lineStartValues);\r\n        }\r\n    };\r\n    /**\r\n     * All changes to a line's text go through this method\r\n     */\r\n    MirrorTextModel.prototype._setLineText = function (lineIndex, newValue) {\r\n        this._lines[lineIndex] = newValue;\r\n        if (this._lineStarts) {\r\n            // update prefix sum\r\n            this._lineStarts.changeValue(lineIndex, this._lines[lineIndex].length + this._eol.length);\r\n        }\r\n    };\r\n    MirrorTextModel.prototype._acceptDeleteRange = function (range) {\r\n        if (range.startLineNumber === range.endLineNumber) {\r\n            if (range.startColumn === range.endColumn) {\r\n                // Nothing to delete\r\n                return;\r\n            }\r\n            // Delete text on the affected line\r\n            this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1)\r\n                + this._lines[range.startLineNumber - 1].substring(range.endColumn - 1));\r\n            return;\r\n        }\r\n        // Take remaining text on last line and append it to remaining text on first line\r\n        this._setLineText(range.startLineNumber - 1, this._lines[range.startLineNumber - 1].substring(0, range.startColumn - 1)\r\n            + this._lines[range.endLineNumber - 1].substring(range.endColumn - 1));\r\n        // Delete middle lines\r\n        this._lines.splice(range.startLineNumber, range.endLineNumber - range.startLineNumber);\r\n        if (this._lineStarts) {\r\n            // update prefix sum\r\n            this._lineStarts.removeValues(range.startLineNumber, range.endLineNumber - range.startLineNumber);\r\n        }\r\n    };\r\n    MirrorTextModel.prototype._acceptInsertText = function (position, insertText) {\r\n        if (insertText.length === 0) {\r\n            // Nothing to insert\r\n            return;\r\n        }\r\n        var insertLines = insertText.split(/\\r\\n|\\r|\\n/);\r\n        if (insertLines.length === 1) {\r\n            // Inserting text on one line\r\n            this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1)\r\n                + insertLines[0]\r\n                + this._lines[position.lineNumber - 1].substring(position.column - 1));\r\n            return;\r\n        }\r\n        // Append overflowing text from first line to the end of text to insert\r\n        insertLines[insertLines.length - 1] += this._lines[position.lineNumber - 1].substring(position.column - 1);\r\n        // Delete overflowing text from first line and insert text on first line\r\n        this._setLineText(position.lineNumber - 1, this._lines[position.lineNumber - 1].substring(0, position.column - 1)\r\n            + insertLines[0]);\r\n        // Insert new lines & store lengths\r\n        var newLengths = new Uint32Array(insertLines.length - 1);\r\n        for (var i = 1; i < insertLines.length; i++) {\r\n            this._lines.splice(position.lineNumber + i - 1, 0, insertLines[i]);\r\n            newLengths[i - 1] = insertLines[i].length + this._eol.length;\r\n        }\r\n        if (this._lineStarts) {\r\n            // update prefix sum\r\n            this._lineStarts.insertValues(position.lineNumber, newLengths);\r\n        }\r\n    };\r\n    return MirrorTextModel;\r\n}());\r\nexport { MirrorTextModel };\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar TreeNode = /** @class */ (function () {\r\n    function TreeNode(piece, color) {\r\n        this.piece = piece;\r\n        this.color = color;\r\n        this.size_left = 0;\r\n        this.lf_left = 0;\r\n        this.parent = this;\r\n        this.left = this;\r\n        this.right = this;\r\n    }\r\n    TreeNode.prototype.next = function () {\r\n        if (this.right !== SENTINEL) {\r\n            return leftest(this.right);\r\n        }\r\n        var node = this;\r\n        while (node.parent !== SENTINEL) {\r\n            if (node.parent.left === node) {\r\n                break;\r\n            }\r\n            node = node.parent;\r\n        }\r\n        if (node.parent === SENTINEL) {\r\n            return SENTINEL;\r\n        }\r\n        else {\r\n            return node.parent;\r\n        }\r\n    };\r\n    TreeNode.prototype.prev = function () {\r\n        if (this.left !== SENTINEL) {\r\n            return righttest(this.left);\r\n        }\r\n        var node = this;\r\n        while (node.parent !== SENTINEL) {\r\n            if (node.parent.right === node) {\r\n                break;\r\n            }\r\n            node = node.parent;\r\n        }\r\n        if (node.parent === SENTINEL) {\r\n            return SENTINEL;\r\n        }\r\n        else {\r\n            return node.parent;\r\n        }\r\n    };\r\n    TreeNode.prototype.detach = function () {\r\n        this.parent = null;\r\n        this.left = null;\r\n        this.right = null;\r\n    };\r\n    return TreeNode;\r\n}());\r\nexport { TreeNode };\r\nexport var SENTINEL = new TreeNode(null, 0 /* Black */);\r\nSENTINEL.parent = SENTINEL;\r\nSENTINEL.left = SENTINEL;\r\nSENTINEL.right = SENTINEL;\r\nSENTINEL.color = 0 /* Black */;\r\nexport function leftest(node) {\r\n    while (node.left !== SENTINEL) {\r\n        node = node.left;\r\n    }\r\n    return node;\r\n}\r\nexport function righttest(node) {\r\n    while (node.right !== SENTINEL) {\r\n        node = node.right;\r\n    }\r\n    return node;\r\n}\r\nexport function calculateSize(node) {\r\n    if (node === SENTINEL) {\r\n        return 0;\r\n    }\r\n    return node.size_left + node.piece.length + calculateSize(node.right);\r\n}\r\nexport function calculateLF(node) {\r\n    if (node === SENTINEL) {\r\n        return 0;\r\n    }\r\n    return node.lf_left + node.piece.lineFeedCnt + calculateLF(node.right);\r\n}\r\nexport function resetSentinel() {\r\n    SENTINEL.parent = SENTINEL;\r\n}\r\nexport function leftRotate(tree, x) {\r\n    var y = x.right;\r\n    // fix size_left\r\n    y.size_left += x.size_left + (x.piece ? x.piece.length : 0);\r\n    y.lf_left += x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\r\n    x.right = y.left;\r\n    if (y.left !== SENTINEL) {\r\n        y.left.parent = x;\r\n    }\r\n    y.parent = x.parent;\r\n    if (x.parent === SENTINEL) {\r\n        tree.root = y;\r\n    }\r\n    else if (x.parent.left === x) {\r\n        x.parent.left = y;\r\n    }\r\n    else {\r\n        x.parent.right = y;\r\n    }\r\n    y.left = x;\r\n    x.parent = y;\r\n}\r\nexport function rightRotate(tree, y) {\r\n    var x = y.left;\r\n    y.left = x.right;\r\n    if (x.right !== SENTINEL) {\r\n        x.right.parent = y;\r\n    }\r\n    x.parent = y.parent;\r\n    // fix size_left\r\n    y.size_left -= x.size_left + (x.piece ? x.piece.length : 0);\r\n    y.lf_left -= x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\r\n    if (y.parent === SENTINEL) {\r\n        tree.root = x;\r\n    }\r\n    else if (y === y.parent.right) {\r\n        y.parent.right = x;\r\n    }\r\n    else {\r\n        y.parent.left = x;\r\n    }\r\n    x.right = y;\r\n    y.parent = x;\r\n}\r\nexport function rbDelete(tree, z) {\r\n    var x;\r\n    var y;\r\n    if (z.left === SENTINEL) {\r\n        y = z;\r\n        x = y.right;\r\n    }\r\n    else if (z.right === SENTINEL) {\r\n        y = z;\r\n        x = y.left;\r\n    }\r\n    else {\r\n        y = leftest(z.right);\r\n        x = y.right;\r\n    }\r\n    if (y === tree.root) {\r\n        tree.root = x;\r\n        // if x is null, we are removing the only node\r\n        x.color = 0 /* Black */;\r\n        z.detach();\r\n        resetSentinel();\r\n        tree.root.parent = SENTINEL;\r\n        return;\r\n    }\r\n    var yWasRed = (y.color === 1 /* Red */);\r\n    if (y === y.parent.left) {\r\n        y.parent.left = x;\r\n    }\r\n    else {\r\n        y.parent.right = x;\r\n    }\r\n    if (y === z) {\r\n        x.parent = y.parent;\r\n        recomputeTreeMetadata(tree, x);\r\n    }\r\n    else {\r\n        if (y.parent === z) {\r\n            x.parent = y;\r\n        }\r\n        else {\r\n            x.parent = y.parent;\r\n        }\r\n        // as we make changes to x's hierarchy, update size_left of subtree first\r\n        recomputeTreeMetadata(tree, x);\r\n        y.left = z.left;\r\n        y.right = z.right;\r\n        y.parent = z.parent;\r\n        y.color = z.color;\r\n        if (z === tree.root) {\r\n            tree.root = y;\r\n        }\r\n        else {\r\n            if (z === z.parent.left) {\r\n                z.parent.left = y;\r\n            }\r\n            else {\r\n                z.parent.right = y;\r\n            }\r\n        }\r\n        if (y.left !== SENTINEL) {\r\n            y.left.parent = y;\r\n        }\r\n        if (y.right !== SENTINEL) {\r\n            y.right.parent = y;\r\n        }\r\n        // update metadata\r\n        // we replace z with y, so in this sub tree, the length change is z.item.length\r\n        y.size_left = z.size_left;\r\n        y.lf_left = z.lf_left;\r\n        recomputeTreeMetadata(tree, y);\r\n    }\r\n    z.detach();\r\n    if (x.parent.left === x) {\r\n        var newSizeLeft = calculateSize(x);\r\n        var newLFLeft = calculateLF(x);\r\n        if (newSizeLeft !== x.parent.size_left || newLFLeft !== x.parent.lf_left) {\r\n            var delta = newSizeLeft - x.parent.size_left;\r\n            var lf_delta = newLFLeft - x.parent.lf_left;\r\n            x.parent.size_left = newSizeLeft;\r\n            x.parent.lf_left = newLFLeft;\r\n            updateTreeMetadata(tree, x.parent, delta, lf_delta);\r\n        }\r\n    }\r\n    recomputeTreeMetadata(tree, x.parent);\r\n    if (yWasRed) {\r\n        resetSentinel();\r\n        return;\r\n    }\r\n    // RB-DELETE-FIXUP\r\n    var w;\r\n    while (x !== tree.root && x.color === 0 /* Black */) {\r\n        if (x === x.parent.left) {\r\n            w = x.parent.right;\r\n            if (w.color === 1 /* Red */) {\r\n                w.color = 0 /* Black */;\r\n                x.parent.color = 1 /* Red */;\r\n                leftRotate(tree, x.parent);\r\n                w = x.parent.right;\r\n            }\r\n            if (w.left.color === 0 /* Black */ && w.right.color === 0 /* Black */) {\r\n                w.color = 1 /* Red */;\r\n                x = x.parent;\r\n            }\r\n            else {\r\n                if (w.right.color === 0 /* Black */) {\r\n                    w.left.color = 0 /* Black */;\r\n                    w.color = 1 /* Red */;\r\n                    rightRotate(tree, w);\r\n                    w = x.parent.right;\r\n                }\r\n                w.color = x.parent.color;\r\n                x.parent.color = 0 /* Black */;\r\n                w.right.color = 0 /* Black */;\r\n                leftRotate(tree, x.parent);\r\n                x = tree.root;\r\n            }\r\n        }\r\n        else {\r\n            w = x.parent.left;\r\n            if (w.color === 1 /* Red */) {\r\n                w.color = 0 /* Black */;\r\n                x.parent.color = 1 /* Red */;\r\n                rightRotate(tree, x.parent);\r\n                w = x.parent.left;\r\n            }\r\n            if (w.left.color === 0 /* Black */ && w.right.color === 0 /* Black */) {\r\n                w.color = 1 /* Red */;\r\n                x = x.parent;\r\n            }\r\n            else {\r\n                if (w.left.color === 0 /* Black */) {\r\n                    w.right.color = 0 /* Black */;\r\n                    w.color = 1 /* Red */;\r\n                    leftRotate(tree, w);\r\n                    w = x.parent.left;\r\n                }\r\n                w.color = x.parent.color;\r\n                x.parent.color = 0 /* Black */;\r\n                w.left.color = 0 /* Black */;\r\n                rightRotate(tree, x.parent);\r\n                x = tree.root;\r\n            }\r\n        }\r\n    }\r\n    x.color = 0 /* Black */;\r\n    resetSentinel();\r\n}\r\nexport function fixInsert(tree, x) {\r\n    recomputeTreeMetadata(tree, x);\r\n    while (x !== tree.root && x.parent.color === 1 /* Red */) {\r\n        if (x.parent === x.parent.parent.left) {\r\n            var y = x.parent.parent.right;\r\n            if (y.color === 1 /* Red */) {\r\n                x.parent.color = 0 /* Black */;\r\n                y.color = 0 /* Black */;\r\n                x.parent.parent.color = 1 /* Red */;\r\n                x = x.parent.parent;\r\n            }\r\n            else {\r\n                if (x === x.parent.right) {\r\n                    x = x.parent;\r\n                    leftRotate(tree, x);\r\n                }\r\n                x.parent.color = 0 /* Black */;\r\n                x.parent.parent.color = 1 /* Red */;\r\n                rightRotate(tree, x.parent.parent);\r\n            }\r\n        }\r\n        else {\r\n            var y = x.parent.parent.left;\r\n            if (y.color === 1 /* Red */) {\r\n                x.parent.color = 0 /* Black */;\r\n                y.color = 0 /* Black */;\r\n                x.parent.parent.color = 1 /* Red */;\r\n                x = x.parent.parent;\r\n            }\r\n            else {\r\n                if (x === x.parent.left) {\r\n                    x = x.parent;\r\n                    rightRotate(tree, x);\r\n                }\r\n                x.parent.color = 0 /* Black */;\r\n                x.parent.parent.color = 1 /* Red */;\r\n                leftRotate(tree, x.parent.parent);\r\n            }\r\n        }\r\n    }\r\n    tree.root.color = 0 /* Black */;\r\n}\r\nexport function updateTreeMetadata(tree, x, delta, lineFeedCntDelta) {\r\n    // node length change or line feed count change\r\n    while (x !== tree.root && x !== SENTINEL) {\r\n        if (x.parent.left === x) {\r\n            x.parent.size_left += delta;\r\n            x.parent.lf_left += lineFeedCntDelta;\r\n        }\r\n        x = x.parent;\r\n    }\r\n}\r\nexport function recomputeTreeMetadata(tree, x) {\r\n    var delta = 0;\r\n    var lf_delta = 0;\r\n    if (x === tree.root) {\r\n        return;\r\n    }\r\n    if (delta === 0) {\r\n        // go upwards till the node whose left subtree is changed.\r\n        while (x !== tree.root && x === x.parent.right) {\r\n            x = x.parent;\r\n        }\r\n        if (x === tree.root) {\r\n            // well, it means we add a node to the end (inorder)\r\n            return;\r\n        }\r\n        // x is the node whose right subtree is changed.\r\n        x = x.parent;\r\n        delta = calculateSize(x.left) - x.size_left;\r\n        lf_delta = calculateLF(x.left) - x.lf_left;\r\n        x.size_left += delta;\r\n        x.lf_left += lf_delta;\r\n    }\r\n    // go upwards till root. O(logN)\r\n    while (x !== tree.root && (delta !== 0 || lf_delta !== 0)) {\r\n        if (x.parent.left === x) {\r\n            x.parent.size_left += delta;\r\n            x.parent.lf_left += lf_delta;\r\n        }\r\n        x = x.parent;\r\n    }\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Position } from '../../core/position.js';\r\nimport { Range } from '../../core/range.js';\r\nimport { FindMatch } from '../../model.js';\r\nimport { SENTINEL, TreeNode, fixInsert, leftest, rbDelete, righttest, updateTreeMetadata } from './rbTreeBase.js';\r\nimport { Searcher, createFindMatch, isValidMatch } from '../textModelSearch.js';\r\n// const lfRegex = new RegExp(/\\r\\n|\\r|\\n/g);\r\nexport var AverageBufferSize = 65535;\r\nexport function createUintArray(arr) {\r\n    var r;\r\n    if (arr[arr.length - 1] < 65536) {\r\n        r = new Uint16Array(arr.length);\r\n    }\r\n    else {\r\n        r = new Uint32Array(arr.length);\r\n    }\r\n    r.set(arr, 0);\r\n    return r;\r\n}\r\nvar LineStarts = /** @class */ (function () {\r\n    function LineStarts(lineStarts, cr, lf, crlf, isBasicASCII) {\r\n        this.lineStarts = lineStarts;\r\n        this.cr = cr;\r\n        this.lf = lf;\r\n        this.crlf = crlf;\r\n        this.isBasicASCII = isBasicASCII;\r\n    }\r\n    return LineStarts;\r\n}());\r\nexport { LineStarts };\r\nexport function createLineStartsFast(str, readonly) {\r\n    if (readonly === void 0) { readonly = true; }\r\n    var r = [0], rLength = 1;\r\n    for (var i = 0, len = str.length; i < len; i++) {\r\n        var chr = str.charCodeAt(i);\r\n        if (chr === 13 /* CarriageReturn */) {\r\n            if (i + 1 < len && str.charCodeAt(i + 1) === 10 /* LineFeed */) {\r\n                // \\r\\n... case\r\n                r[rLength++] = i + 2;\r\n                i++; // skip \\n\r\n            }\r\n            else {\r\n                // \\r... case\r\n                r[rLength++] = i + 1;\r\n            }\r\n        }\r\n        else if (chr === 10 /* LineFeed */) {\r\n            r[rLength++] = i + 1;\r\n        }\r\n    }\r\n    if (readonly) {\r\n        return createUintArray(r);\r\n    }\r\n    else {\r\n        return r;\r\n    }\r\n}\r\nexport function createLineStarts(r, str) {\r\n    r.length = 0;\r\n    r[0] = 0;\r\n    var rLength = 1;\r\n    var cr = 0, lf = 0, crlf = 0;\r\n    var isBasicASCII = true;\r\n    for (var i = 0, len = str.length; i < len; i++) {\r\n        var chr = str.charCodeAt(i);\r\n        if (chr === 13 /* CarriageReturn */) {\r\n            if (i + 1 < len && str.charCodeAt(i + 1) === 10 /* LineFeed */) {\r\n                // \\r\\n... case\r\n                crlf++;\r\n                r[rLength++] = i + 2;\r\n                i++; // skip \\n\r\n            }\r\n            else {\r\n                cr++;\r\n                // \\r... case\r\n                r[rLength++] = i + 1;\r\n            }\r\n        }\r\n        else if (chr === 10 /* LineFeed */) {\r\n            lf++;\r\n            r[rLength++] = i + 1;\r\n        }\r\n        else {\r\n            if (isBasicASCII) {\r\n                if (chr !== 9 /* Tab */ && (chr < 32 || chr > 126)) {\r\n                    isBasicASCII = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    var result = new LineStarts(createUintArray(r), cr, lf, crlf, isBasicASCII);\r\n    r.length = 0;\r\n    return result;\r\n}\r\nvar Piece = /** @class */ (function () {\r\n    function Piece(bufferIndex, start, end, lineFeedCnt, length) {\r\n        this.bufferIndex = bufferIndex;\r\n        this.start = start;\r\n        this.end = end;\r\n        this.lineFeedCnt = lineFeedCnt;\r\n        this.length = length;\r\n    }\r\n    return Piece;\r\n}());\r\nexport { Piece };\r\nvar StringBuffer = /** @class */ (function () {\r\n    function StringBuffer(buffer, lineStarts) {\r\n        this.buffer = buffer;\r\n        this.lineStarts = lineStarts;\r\n    }\r\n    return StringBuffer;\r\n}());\r\nexport { StringBuffer };\r\nvar PieceTreeSearchCache = /** @class */ (function () {\r\n    function PieceTreeSearchCache(limit) {\r\n        this._limit = limit;\r\n        this._cache = [];\r\n    }\r\n    PieceTreeSearchCache.prototype.get = function (offset) {\r\n        for (var i = this._cache.length - 1; i >= 0; i--) {\r\n            var nodePos = this._cache[i];\r\n            if (nodePos.nodeStartOffset <= offset && nodePos.nodeStartOffset + nodePos.node.piece.length >= offset) {\r\n                return nodePos;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    PieceTreeSearchCache.prototype.get2 = function (lineNumber) {\r\n        for (var i = this._cache.length - 1; i >= 0; i--) {\r\n            var nodePos = this._cache[i];\r\n            if (nodePos.nodeStartLineNumber && nodePos.nodeStartLineNumber < lineNumber && nodePos.nodeStartLineNumber + nodePos.node.piece.lineFeedCnt >= lineNumber) {\r\n                return nodePos;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    PieceTreeSearchCache.prototype.set = function (nodePosition) {\r\n        if (this._cache.length >= this._limit) {\r\n            this._cache.shift();\r\n        }\r\n        this._cache.push(nodePosition);\r\n    };\r\n    PieceTreeSearchCache.prototype.valdiate = function (offset) {\r\n        var hasInvalidVal = false;\r\n        var tmp = this._cache;\r\n        for (var i = 0; i < tmp.length; i++) {\r\n            var nodePos = tmp[i];\r\n            if (nodePos.node.parent === null || nodePos.nodeStartOffset >= offset) {\r\n                tmp[i] = null;\r\n                hasInvalidVal = true;\r\n                continue;\r\n            }\r\n        }\r\n        if (hasInvalidVal) {\r\n            var newArr = [];\r\n            for (var _i = 0, tmp_1 = tmp; _i < tmp_1.length; _i++) {\r\n                var entry = tmp_1[_i];\r\n                if (entry !== null) {\r\n                    newArr.push(entry);\r\n                }\r\n            }\r\n            this._cache = newArr;\r\n        }\r\n    };\r\n    return PieceTreeSearchCache;\r\n}());\r\nvar PieceTreeBase = /** @class */ (function () {\r\n    function PieceTreeBase(chunks, eol, eolNormalized) {\r\n        this.create(chunks, eol, eolNormalized);\r\n    }\r\n    PieceTreeBase.prototype.create = function (chunks, eol, eolNormalized) {\r\n        this._buffers = [\r\n            new StringBuffer('', [0])\r\n        ];\r\n        this._lastChangeBufferPos = { line: 0, column: 0 };\r\n        this.root = SENTINEL;\r\n        this._lineCnt = 1;\r\n        this._length = 0;\r\n        this._EOL = eol;\r\n        this._EOLLength = eol.length;\r\n        this._EOLNormalized = eolNormalized;\r\n        var lastNode = null;\r\n        for (var i = 0, len = chunks.length; i < len; i++) {\r\n            if (chunks[i].buffer.length > 0) {\r\n                if (!chunks[i].lineStarts) {\r\n                    chunks[i].lineStarts = createLineStartsFast(chunks[i].buffer);\r\n                }\r\n                var piece = new Piece(i + 1, { line: 0, column: 0 }, { line: chunks[i].lineStarts.length - 1, column: chunks[i].buffer.length - chunks[i].lineStarts[chunks[i].lineStarts.length - 1] }, chunks[i].lineStarts.length - 1, chunks[i].buffer.length);\r\n                this._buffers.push(chunks[i]);\r\n                lastNode = this.rbInsertRight(lastNode, piece);\r\n            }\r\n        }\r\n        this._searchCache = new PieceTreeSearchCache(1);\r\n        this._lastVisitedLine = { lineNumber: 0, value: '' };\r\n        this.computeBufferMetadata();\r\n    };\r\n    PieceTreeBase.prototype.normalizeEOL = function (eol) {\r\n        var _this = this;\r\n        var averageBufferSize = AverageBufferSize;\r\n        var min = averageBufferSize - Math.floor(averageBufferSize / 3);\r\n        var max = min * 2;\r\n        var tempChunk = '';\r\n        var tempChunkLen = 0;\r\n        var chunks = [];\r\n        this.iterate(this.root, function (node) {\r\n            var str = _this.getNodeContent(node);\r\n            var len = str.length;\r\n            if (tempChunkLen <= min || tempChunkLen + len < max) {\r\n                tempChunk += str;\r\n                tempChunkLen += len;\r\n                return true;\r\n            }\r\n            // flush anyways\r\n            var text = tempChunk.replace(/\\r\\n|\\r|\\n/g, eol);\r\n            chunks.push(new StringBuffer(text, createLineStartsFast(text)));\r\n            tempChunk = str;\r\n            tempChunkLen = len;\r\n            return true;\r\n        });\r\n        if (tempChunkLen > 0) {\r\n            var text = tempChunk.replace(/\\r\\n|\\r|\\n/g, eol);\r\n            chunks.push(new StringBuffer(text, createLineStartsFast(text)));\r\n        }\r\n        this.create(chunks, eol, true);\r\n    };\r\n    // #region Buffer API\r\n    PieceTreeBase.prototype.getEOL = function () {\r\n        return this._EOL;\r\n    };\r\n    PieceTreeBase.prototype.setEOL = function (newEOL) {\r\n        this._EOL = newEOL;\r\n        this._EOLLength = this._EOL.length;\r\n        this.normalizeEOL(newEOL);\r\n    };\r\n    PieceTreeBase.prototype.getOffsetAt = function (lineNumber, column) {\r\n        var leftLen = 0; // inorder\r\n        var x = this.root;\r\n        while (x !== SENTINEL) {\r\n            if (x.left !== SENTINEL && x.lf_left + 1 >= lineNumber) {\r\n                x = x.left;\r\n            }\r\n            else if (x.lf_left + x.piece.lineFeedCnt + 1 >= lineNumber) {\r\n                leftLen += x.size_left;\r\n                // lineNumber >= 2\r\n                var accumualtedValInCurrentIndex = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\r\n                return leftLen += accumualtedValInCurrentIndex + column - 1;\r\n            }\r\n            else {\r\n                lineNumber -= x.lf_left + x.piece.lineFeedCnt;\r\n                leftLen += x.size_left + x.piece.length;\r\n                x = x.right;\r\n            }\r\n        }\r\n        return leftLen;\r\n    };\r\n    PieceTreeBase.prototype.getPositionAt = function (offset) {\r\n        offset = Math.floor(offset);\r\n        offset = Math.max(0, offset);\r\n        var x = this.root;\r\n        var lfCnt = 0;\r\n        var originalOffset = offset;\r\n        while (x !== SENTINEL) {\r\n            if (x.size_left !== 0 && x.size_left >= offset) {\r\n                x = x.left;\r\n            }\r\n            else if (x.size_left + x.piece.length >= offset) {\r\n                var out = this.getIndexOf(x, offset - x.size_left);\r\n                lfCnt += x.lf_left + out.index;\r\n                if (out.index === 0) {\r\n                    var lineStartOffset = this.getOffsetAt(lfCnt + 1, 1);\r\n                    var column = originalOffset - lineStartOffset;\r\n                    return new Position(lfCnt + 1, column + 1);\r\n                }\r\n                return new Position(lfCnt + 1, out.remainder + 1);\r\n            }\r\n            else {\r\n                offset -= x.size_left + x.piece.length;\r\n                lfCnt += x.lf_left + x.piece.lineFeedCnt;\r\n                if (x.right === SENTINEL) {\r\n                    // last node\r\n                    var lineStartOffset = this.getOffsetAt(lfCnt + 1, 1);\r\n                    var column = originalOffset - offset - lineStartOffset;\r\n                    return new Position(lfCnt + 1, column + 1);\r\n                }\r\n                else {\r\n                    x = x.right;\r\n                }\r\n            }\r\n        }\r\n        return new Position(1, 1);\r\n    };\r\n    PieceTreeBase.prototype.getValueInRange = function (range, eol) {\r\n        if (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn) {\r\n            return '';\r\n        }\r\n        var startPosition = this.nodeAt2(range.startLineNumber, range.startColumn);\r\n        var endPosition = this.nodeAt2(range.endLineNumber, range.endColumn);\r\n        var value = this.getValueInRange2(startPosition, endPosition);\r\n        if (eol) {\r\n            if (eol !== this._EOL || !this._EOLNormalized) {\r\n                return value.replace(/\\r\\n|\\r|\\n/g, eol);\r\n            }\r\n            if (eol === this.getEOL() && this._EOLNormalized) {\r\n                if (eol === '\\r\\n') {\r\n                }\r\n                return value;\r\n            }\r\n            return value.replace(/\\r\\n|\\r|\\n/g, eol);\r\n        }\r\n        return value;\r\n    };\r\n    PieceTreeBase.prototype.getValueInRange2 = function (startPosition, endPosition) {\r\n        if (startPosition.node === endPosition.node) {\r\n            var node = startPosition.node;\r\n            var buffer_1 = this._buffers[node.piece.bufferIndex].buffer;\r\n            var startOffset_1 = this.offsetInBuffer(node.piece.bufferIndex, node.piece.start);\r\n            return buffer_1.substring(startOffset_1 + startPosition.remainder, startOffset_1 + endPosition.remainder);\r\n        }\r\n        var x = startPosition.node;\r\n        var buffer = this._buffers[x.piece.bufferIndex].buffer;\r\n        var startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\r\n        var ret = buffer.substring(startOffset + startPosition.remainder, startOffset + x.piece.length);\r\n        x = x.next();\r\n        while (x !== SENTINEL) {\r\n            var buffer_2 = this._buffers[x.piece.bufferIndex].buffer;\r\n            var startOffset_2 = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\r\n            if (x === endPosition.node) {\r\n                ret += buffer_2.substring(startOffset_2, startOffset_2 + endPosition.remainder);\r\n                break;\r\n            }\r\n            else {\r\n                ret += buffer_2.substr(startOffset_2, x.piece.length);\r\n            }\r\n            x = x.next();\r\n        }\r\n        return ret;\r\n    };\r\n    PieceTreeBase.prototype.getLinesContent = function () {\r\n        var _this = this;\r\n        var lines = [];\r\n        var linesLength = 0;\r\n        var currentLine = '';\r\n        var danglingCR = false;\r\n        this.iterate(this.root, function (node) {\r\n            if (node === SENTINEL) {\r\n                return true;\r\n            }\r\n            var piece = node.piece;\r\n            var pieceLength = piece.length;\r\n            if (pieceLength === 0) {\r\n                return true;\r\n            }\r\n            var buffer = _this._buffers[piece.bufferIndex].buffer;\r\n            var lineStarts = _this._buffers[piece.bufferIndex].lineStarts;\r\n            var pieceStartLine = piece.start.line;\r\n            var pieceEndLine = piece.end.line;\r\n            var pieceStartOffset = lineStarts[pieceStartLine] + piece.start.column;\r\n            if (danglingCR) {\r\n                if (buffer.charCodeAt(pieceStartOffset) === 10 /* LineFeed */) {\r\n                    // pretend the \\n was in the previous piece..\r\n                    pieceStartOffset++;\r\n                    pieceLength--;\r\n                }\r\n                lines[linesLength++] = currentLine;\r\n                currentLine = '';\r\n                danglingCR = false;\r\n                if (pieceLength === 0) {\r\n                    return true;\r\n                }\r\n            }\r\n            if (pieceStartLine === pieceEndLine) {\r\n                // this piece has no new lines\r\n                if (!_this._EOLNormalized && buffer.charCodeAt(pieceStartOffset + pieceLength - 1) === 13 /* CarriageReturn */) {\r\n                    danglingCR = true;\r\n                    currentLine += buffer.substr(pieceStartOffset, pieceLength - 1);\r\n                }\r\n                else {\r\n                    currentLine += buffer.substr(pieceStartOffset, pieceLength);\r\n                }\r\n                return true;\r\n            }\r\n            // add the text before the first line start in this piece\r\n            currentLine += (_this._EOLNormalized\r\n                ? buffer.substring(pieceStartOffset, Math.max(pieceStartOffset, lineStarts[pieceStartLine + 1] - _this._EOLLength))\r\n                : buffer.substring(pieceStartOffset, lineStarts[pieceStartLine + 1]).replace(/(\\r\\n|\\r|\\n)$/, ''));\r\n            lines[linesLength++] = currentLine;\r\n            for (var line = pieceStartLine + 1; line < pieceEndLine; line++) {\r\n                currentLine = (_this._EOLNormalized\r\n                    ? buffer.substring(lineStarts[line], lineStarts[line + 1] - _this._EOLLength)\r\n                    : buffer.substring(lineStarts[line], lineStarts[line + 1]).replace(/(\\r\\n|\\r|\\n)$/, ''));\r\n                lines[linesLength++] = currentLine;\r\n            }\r\n            if (!_this._EOLNormalized && buffer.charCodeAt(lineStarts[pieceEndLine] + piece.end.column - 1) === 13 /* CarriageReturn */) {\r\n                danglingCR = true;\r\n                if (piece.end.column === 0) {\r\n                    // The last line ended with a \\r, let's undo the push, it will be pushed by next iteration\r\n                    linesLength--;\r\n                }\r\n                else {\r\n                    currentLine = buffer.substr(lineStarts[pieceEndLine], piece.end.column - 1);\r\n                }\r\n            }\r\n            else {\r\n                currentLine = buffer.substr(lineStarts[pieceEndLine], piece.end.column);\r\n            }\r\n            return true;\r\n        });\r\n        if (danglingCR) {\r\n            lines[linesLength++] = currentLine;\r\n            currentLine = '';\r\n        }\r\n        lines[linesLength++] = currentLine;\r\n        return lines;\r\n    };\r\n    PieceTreeBase.prototype.getLength = function () {\r\n        return this._length;\r\n    };\r\n    PieceTreeBase.prototype.getLineCount = function () {\r\n        return this._lineCnt;\r\n    };\r\n    PieceTreeBase.prototype.getLineContent = function (lineNumber) {\r\n        if (this._lastVisitedLine.lineNumber === lineNumber) {\r\n            return this._lastVisitedLine.value;\r\n        }\r\n        this._lastVisitedLine.lineNumber = lineNumber;\r\n        if (lineNumber === this._lineCnt) {\r\n            this._lastVisitedLine.value = this.getLineRawContent(lineNumber);\r\n        }\r\n        else if (this._EOLNormalized) {\r\n            this._lastVisitedLine.value = this.getLineRawContent(lineNumber, this._EOLLength);\r\n        }\r\n        else {\r\n            this._lastVisitedLine.value = this.getLineRawContent(lineNumber).replace(/(\\r\\n|\\r|\\n)$/, '');\r\n        }\r\n        return this._lastVisitedLine.value;\r\n    };\r\n    PieceTreeBase.prototype.getLineCharCode = function (lineNumber, index) {\r\n        var nodePos = this.nodeAt2(lineNumber, index + 1);\r\n        if (nodePos.remainder === nodePos.node.piece.length) {\r\n            // the char we want to fetch is at the head of next node.\r\n            var matchingNode = nodePos.node.next();\r\n            if (!matchingNode) {\r\n                return 0;\r\n            }\r\n            var buffer = this._buffers[matchingNode.piece.bufferIndex];\r\n            var startOffset = this.offsetInBuffer(matchingNode.piece.bufferIndex, matchingNode.piece.start);\r\n            return buffer.buffer.charCodeAt(startOffset);\r\n        }\r\n        else {\r\n            var buffer = this._buffers[nodePos.node.piece.bufferIndex];\r\n            var startOffset = this.offsetInBuffer(nodePos.node.piece.bufferIndex, nodePos.node.piece.start);\r\n            var targetOffset = startOffset + nodePos.remainder;\r\n            return buffer.buffer.charCodeAt(targetOffset);\r\n        }\r\n    };\r\n    PieceTreeBase.prototype.getLineLength = function (lineNumber) {\r\n        if (lineNumber === this.getLineCount()) {\r\n            var startOffset = this.getOffsetAt(lineNumber, 1);\r\n            return this.getLength() - startOffset;\r\n        }\r\n        return this.getOffsetAt(lineNumber + 1, 1) - this.getOffsetAt(lineNumber, 1) - this._EOLLength;\r\n    };\r\n    PieceTreeBase.prototype.findMatchesInNode = function (node, searcher, startLineNumber, startColumn, startCursor, endCursor, searchData, captureMatches, limitResultCount, resultLen, result) {\r\n        var buffer = this._buffers[node.piece.bufferIndex];\r\n        var startOffsetInBuffer = this.offsetInBuffer(node.piece.bufferIndex, node.piece.start);\r\n        var start = this.offsetInBuffer(node.piece.bufferIndex, startCursor);\r\n        var end = this.offsetInBuffer(node.piece.bufferIndex, endCursor);\r\n        var m;\r\n        // Reset regex to search from the beginning\r\n        var ret = { line: 0, column: 0 };\r\n        var searchText;\r\n        var offsetInBuffer;\r\n        if (searcher._wordSeparators) {\r\n            searchText = buffer.buffer.substring(start, end);\r\n            offsetInBuffer = function (offset) { return offset + start; };\r\n            searcher.reset(-1);\r\n        }\r\n        else {\r\n            searchText = buffer.buffer;\r\n            offsetInBuffer = function (offset) { return offset; };\r\n            searcher.reset(start);\r\n        }\r\n        do {\r\n            m = searcher.next(searchText);\r\n            if (m) {\r\n                if (offsetInBuffer(m.index) >= end) {\r\n                    return resultLen;\r\n                }\r\n                this.positionInBuffer(node, offsetInBuffer(m.index) - startOffsetInBuffer, ret);\r\n                var lineFeedCnt = this.getLineFeedCnt(node.piece.bufferIndex, startCursor, ret);\r\n                var retStartColumn = ret.line === startCursor.line ? ret.column - startCursor.column + startColumn : ret.column + 1;\r\n                var retEndColumn = retStartColumn + m[0].length;\r\n                result[resultLen++] = createFindMatch(new Range(startLineNumber + lineFeedCnt, retStartColumn, startLineNumber + lineFeedCnt, retEndColumn), m, captureMatches);\r\n                if (offsetInBuffer(m.index) + m[0].length >= end) {\r\n                    return resultLen;\r\n                }\r\n                if (resultLen >= limitResultCount) {\r\n                    return resultLen;\r\n                }\r\n            }\r\n        } while (m);\r\n        return resultLen;\r\n    };\r\n    PieceTreeBase.prototype.findMatchesLineByLine = function (searchRange, searchData, captureMatches, limitResultCount) {\r\n        var result = [];\r\n        var resultLen = 0;\r\n        var searcher = new Searcher(searchData.wordSeparators, searchData.regex);\r\n        var startPosition = this.nodeAt2(searchRange.startLineNumber, searchRange.startColumn);\r\n        if (startPosition === null) {\r\n            return [];\r\n        }\r\n        var endPosition = this.nodeAt2(searchRange.endLineNumber, searchRange.endColumn);\r\n        if (endPosition === null) {\r\n            return [];\r\n        }\r\n        var start = this.positionInBuffer(startPosition.node, startPosition.remainder);\r\n        var end = this.positionInBuffer(endPosition.node, endPosition.remainder);\r\n        if (startPosition.node === endPosition.node) {\r\n            this.findMatchesInNode(startPosition.node, searcher, searchRange.startLineNumber, searchRange.startColumn, start, end, searchData, captureMatches, limitResultCount, resultLen, result);\r\n            return result;\r\n        }\r\n        var startLineNumber = searchRange.startLineNumber;\r\n        var currentNode = startPosition.node;\r\n        while (currentNode !== endPosition.node) {\r\n            var lineBreakCnt = this.getLineFeedCnt(currentNode.piece.bufferIndex, start, currentNode.piece.end);\r\n            if (lineBreakCnt >= 1) {\r\n                // last line break position\r\n                var lineStarts = this._buffers[currentNode.piece.bufferIndex].lineStarts;\r\n                var startOffsetInBuffer = this.offsetInBuffer(currentNode.piece.bufferIndex, currentNode.piece.start);\r\n                var nextLineStartOffset = lineStarts[start.line + lineBreakCnt];\r\n                var startColumn_1 = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn : 1;\r\n                resultLen = this.findMatchesInNode(currentNode, searcher, startLineNumber, startColumn_1, start, this.positionInBuffer(currentNode, nextLineStartOffset - startOffsetInBuffer), searchData, captureMatches, limitResultCount, resultLen, result);\r\n                if (resultLen >= limitResultCount) {\r\n                    return result;\r\n                }\r\n                startLineNumber += lineBreakCnt;\r\n            }\r\n            var startColumn_2 = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn - 1 : 0;\r\n            // search for the remaining content\r\n            if (startLineNumber === searchRange.endLineNumber) {\r\n                var text = this.getLineContent(startLineNumber).substring(startColumn_2, searchRange.endColumn - 1);\r\n                resultLen = this._findMatchesInLine(searchData, searcher, text, searchRange.endLineNumber, startColumn_2, resultLen, result, captureMatches, limitResultCount);\r\n                return result;\r\n            }\r\n            resultLen = this._findMatchesInLine(searchData, searcher, this.getLineContent(startLineNumber).substr(startColumn_2), startLineNumber, startColumn_2, resultLen, result, captureMatches, limitResultCount);\r\n            if (resultLen >= limitResultCount) {\r\n                return result;\r\n            }\r\n            startLineNumber++;\r\n            startPosition = this.nodeAt2(startLineNumber, 1);\r\n            currentNode = startPosition.node;\r\n            start = this.positionInBuffer(startPosition.node, startPosition.remainder);\r\n        }\r\n        if (startLineNumber === searchRange.endLineNumber) {\r\n            var startColumn_3 = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn - 1 : 0;\r\n            var text = this.getLineContent(startLineNumber).substring(startColumn_3, searchRange.endColumn - 1);\r\n            resultLen = this._findMatchesInLine(searchData, searcher, text, searchRange.endLineNumber, startColumn_3, resultLen, result, captureMatches, limitResultCount);\r\n            return result;\r\n        }\r\n        var startColumn = startLineNumber === searchRange.startLineNumber ? searchRange.startColumn : 1;\r\n        resultLen = this.findMatchesInNode(endPosition.node, searcher, startLineNumber, startColumn, start, end, searchData, captureMatches, limitResultCount, resultLen, result);\r\n        return result;\r\n    };\r\n    PieceTreeBase.prototype._findMatchesInLine = function (searchData, searcher, text, lineNumber, deltaOffset, resultLen, result, captureMatches, limitResultCount) {\r\n        var wordSeparators = searchData.wordSeparators;\r\n        if (!captureMatches && searchData.simpleSearch) {\r\n            var searchString = searchData.simpleSearch;\r\n            var searchStringLen = searchString.length;\r\n            var textLength = text.length;\r\n            var lastMatchIndex = -searchStringLen;\r\n            while ((lastMatchIndex = text.indexOf(searchString, lastMatchIndex + searchStringLen)) !== -1) {\r\n                if (!wordSeparators || isValidMatch(wordSeparators, text, textLength, lastMatchIndex, searchStringLen)) {\r\n                    result[resultLen++] = new FindMatch(new Range(lineNumber, lastMatchIndex + 1 + deltaOffset, lineNumber, lastMatchIndex + 1 + searchStringLen + deltaOffset), null);\r\n                    if (resultLen >= limitResultCount) {\r\n                        return resultLen;\r\n                    }\r\n                }\r\n            }\r\n            return resultLen;\r\n        }\r\n        var m;\r\n        // Reset regex to search from the beginning\r\n        searcher.reset(0);\r\n        do {\r\n            m = searcher.next(text);\r\n            if (m) {\r\n                result[resultLen++] = createFindMatch(new Range(lineNumber, m.index + 1 + deltaOffset, lineNumber, m.index + 1 + m[0].length + deltaOffset), m, captureMatches);\r\n                if (resultLen >= limitResultCount) {\r\n                    return resultLen;\r\n                }\r\n            }\r\n        } while (m);\r\n        return resultLen;\r\n    };\r\n    // #endregion\r\n    // #region Piece Table\r\n    PieceTreeBase.prototype.insert = function (offset, value, eolNormalized) {\r\n        if (eolNormalized === void 0) { eolNormalized = false; }\r\n        this._EOLNormalized = this._EOLNormalized && eolNormalized;\r\n        this._lastVisitedLine.lineNumber = 0;\r\n        this._lastVisitedLine.value = '';\r\n        if (this.root !== SENTINEL) {\r\n            var _a = this.nodeAt(offset), node = _a.node, remainder = _a.remainder, nodeStartOffset = _a.nodeStartOffset;\r\n            var piece = node.piece;\r\n            var bufferIndex = piece.bufferIndex;\r\n            var insertPosInBuffer = this.positionInBuffer(node, remainder);\r\n            if (node.piece.bufferIndex === 0 &&\r\n                piece.end.line === this._lastChangeBufferPos.line &&\r\n                piece.end.column === this._lastChangeBufferPos.column &&\r\n                (nodeStartOffset + piece.length === offset) &&\r\n                value.length < AverageBufferSize) {\r\n                // changed buffer\r\n                this.appendToNode(node, value);\r\n                this.computeBufferMetadata();\r\n                return;\r\n            }\r\n            if (nodeStartOffset === offset) {\r\n                this.insertContentToNodeLeft(value, node);\r\n                this._searchCache.valdiate(offset);\r\n            }\r\n            else if (nodeStartOffset + node.piece.length > offset) {\r\n                // we are inserting into the middle of a node.\r\n                var nodesToDel = [];\r\n                var newRightPiece = new Piece(piece.bufferIndex, insertPosInBuffer, piece.end, this.getLineFeedCnt(piece.bufferIndex, insertPosInBuffer, piece.end), this.offsetInBuffer(bufferIndex, piece.end) - this.offsetInBuffer(bufferIndex, insertPosInBuffer));\r\n                if (this.shouldCheckCRLF() && this.endWithCR(value)) {\r\n                    var headOfRight = this.nodeCharCodeAt(node, remainder);\r\n                    if (headOfRight === 10 /** \\n */) {\r\n                        var newStart = { line: newRightPiece.start.line + 1, column: 0 };\r\n                        newRightPiece = new Piece(newRightPiece.bufferIndex, newStart, newRightPiece.end, this.getLineFeedCnt(newRightPiece.bufferIndex, newStart, newRightPiece.end), newRightPiece.length - 1);\r\n                        value += '\\n';\r\n                    }\r\n                }\r\n                // reuse node for content before insertion point.\r\n                if (this.shouldCheckCRLF() && this.startWithLF(value)) {\r\n                    var tailOfLeft = this.nodeCharCodeAt(node, remainder - 1);\r\n                    if (tailOfLeft === 13 /** \\r */) {\r\n                        var previousPos = this.positionInBuffer(node, remainder - 1);\r\n                        this.deleteNodeTail(node, previousPos);\r\n                        value = '\\r' + value;\r\n                        if (node.piece.length === 0) {\r\n                            nodesToDel.push(node);\r\n                        }\r\n                    }\r\n                    else {\r\n                        this.deleteNodeTail(node, insertPosInBuffer);\r\n                    }\r\n                }\r\n                else {\r\n                    this.deleteNodeTail(node, insertPosInBuffer);\r\n                }\r\n                var newPieces = this.createNewPieces(value);\r\n                if (newRightPiece.length > 0) {\r\n                    this.rbInsertRight(node, newRightPiece);\r\n                }\r\n                var tmpNode = node;\r\n                for (var k = 0; k < newPieces.length; k++) {\r\n                    tmpNode = this.rbInsertRight(tmpNode, newPieces[k]);\r\n                }\r\n                this.deleteNodes(nodesToDel);\r\n            }\r\n            else {\r\n                this.insertContentToNodeRight(value, node);\r\n            }\r\n        }\r\n        else {\r\n            // insert new node\r\n            var pieces = this.createNewPieces(value);\r\n            var node = this.rbInsertLeft(null, pieces[0]);\r\n            for (var k = 1; k < pieces.length; k++) {\r\n                node = this.rbInsertRight(node, pieces[k]);\r\n            }\r\n        }\r\n        // todo, this is too brutal. Total line feed count should be updated the same way as lf_left.\r\n        this.computeBufferMetadata();\r\n    };\r\n    PieceTreeBase.prototype.delete = function (offset, cnt) {\r\n        this._lastVisitedLine.lineNumber = 0;\r\n        this._lastVisitedLine.value = '';\r\n        if (cnt <= 0 || this.root === SENTINEL) {\r\n            return;\r\n        }\r\n        var startPosition = this.nodeAt(offset);\r\n        var endPosition = this.nodeAt(offset + cnt);\r\n        var startNode = startPosition.node;\r\n        var endNode = endPosition.node;\r\n        if (startNode === endNode) {\r\n            var startSplitPosInBuffer_1 = this.positionInBuffer(startNode, startPosition.remainder);\r\n            var endSplitPosInBuffer_1 = this.positionInBuffer(startNode, endPosition.remainder);\r\n            if (startPosition.nodeStartOffset === offset) {\r\n                if (cnt === startNode.piece.length) { // delete node\r\n                    var next = startNode.next();\r\n                    rbDelete(this, startNode);\r\n                    this.validateCRLFWithPrevNode(next);\r\n                    this.computeBufferMetadata();\r\n                    return;\r\n                }\r\n                this.deleteNodeHead(startNode, endSplitPosInBuffer_1);\r\n                this._searchCache.valdiate(offset);\r\n                this.validateCRLFWithPrevNode(startNode);\r\n                this.computeBufferMetadata();\r\n                return;\r\n            }\r\n            if (startPosition.nodeStartOffset + startNode.piece.length === offset + cnt) {\r\n                this.deleteNodeTail(startNode, startSplitPosInBuffer_1);\r\n                this.validateCRLFWithNextNode(startNode);\r\n                this.computeBufferMetadata();\r\n                return;\r\n            }\r\n            // delete content in the middle, this node will be splitted to nodes\r\n            this.shrinkNode(startNode, startSplitPosInBuffer_1, endSplitPosInBuffer_1);\r\n            this.computeBufferMetadata();\r\n            return;\r\n        }\r\n        var nodesToDel = [];\r\n        var startSplitPosInBuffer = this.positionInBuffer(startNode, startPosition.remainder);\r\n        this.deleteNodeTail(startNode, startSplitPosInBuffer);\r\n        this._searchCache.valdiate(offset);\r\n        if (startNode.piece.length === 0) {\r\n            nodesToDel.push(startNode);\r\n        }\r\n        // update last touched node\r\n        var endSplitPosInBuffer = this.positionInBuffer(endNode, endPosition.remainder);\r\n        this.deleteNodeHead(endNode, endSplitPosInBuffer);\r\n        if (endNode.piece.length === 0) {\r\n            nodesToDel.push(endNode);\r\n        }\r\n        // delete nodes in between\r\n        var secondNode = startNode.next();\r\n        for (var node = secondNode; node !== SENTINEL && node !== endNode; node = node.next()) {\r\n            nodesToDel.push(node);\r\n        }\r\n        var prev = startNode.piece.length === 0 ? startNode.prev() : startNode;\r\n        this.deleteNodes(nodesToDel);\r\n        this.validateCRLFWithNextNode(prev);\r\n        this.computeBufferMetadata();\r\n    };\r\n    PieceTreeBase.prototype.insertContentToNodeLeft = function (value, node) {\r\n        // we are inserting content to the beginning of node\r\n        var nodesToDel = [];\r\n        if (this.shouldCheckCRLF() && this.endWithCR(value) && this.startWithLF(node)) {\r\n            // move `\\n` to new node.\r\n            var piece = node.piece;\r\n            var newStart = { line: piece.start.line + 1, column: 0 };\r\n            var nPiece = new Piece(piece.bufferIndex, newStart, piece.end, this.getLineFeedCnt(piece.bufferIndex, newStart, piece.end), piece.length - 1);\r\n            node.piece = nPiece;\r\n            value += '\\n';\r\n            updateTreeMetadata(this, node, -1, -1);\r\n            if (node.piece.length === 0) {\r\n                nodesToDel.push(node);\r\n            }\r\n        }\r\n        var newPieces = this.createNewPieces(value);\r\n        var newNode = this.rbInsertLeft(node, newPieces[newPieces.length - 1]);\r\n        for (var k = newPieces.length - 2; k >= 0; k--) {\r\n            newNode = this.rbInsertLeft(newNode, newPieces[k]);\r\n        }\r\n        this.validateCRLFWithPrevNode(newNode);\r\n        this.deleteNodes(nodesToDel);\r\n    };\r\n    PieceTreeBase.prototype.insertContentToNodeRight = function (value, node) {\r\n        // we are inserting to the right of this node.\r\n        if (this.adjustCarriageReturnFromNext(value, node)) {\r\n            // move \\n to the new node.\r\n            value += '\\n';\r\n        }\r\n        var newPieces = this.createNewPieces(value);\r\n        var newNode = this.rbInsertRight(node, newPieces[0]);\r\n        var tmpNode = newNode;\r\n        for (var k = 1; k < newPieces.length; k++) {\r\n            tmpNode = this.rbInsertRight(tmpNode, newPieces[k]);\r\n        }\r\n        this.validateCRLFWithPrevNode(newNode);\r\n    };\r\n    PieceTreeBase.prototype.positionInBuffer = function (node, remainder, ret) {\r\n        var piece = node.piece;\r\n        var bufferIndex = node.piece.bufferIndex;\r\n        var lineStarts = this._buffers[bufferIndex].lineStarts;\r\n        var startOffset = lineStarts[piece.start.line] + piece.start.column;\r\n        var offset = startOffset + remainder;\r\n        // binary search offset between startOffset and endOffset\r\n        var low = piece.start.line;\r\n        var high = piece.end.line;\r\n        var mid = 0;\r\n        var midStop = 0;\r\n        var midStart = 0;\r\n        while (low <= high) {\r\n            mid = low + ((high - low) / 2) | 0;\r\n            midStart = lineStarts[mid];\r\n            if (mid === high) {\r\n                break;\r\n            }\r\n            midStop = lineStarts[mid + 1];\r\n            if (offset < midStart) {\r\n                high = mid - 1;\r\n            }\r\n            else if (offset >= midStop) {\r\n                low = mid + 1;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        if (ret) {\r\n            ret.line = mid;\r\n            ret.column = offset - midStart;\r\n            return null;\r\n        }\r\n        return {\r\n            line: mid,\r\n            column: offset - midStart\r\n        };\r\n    };\r\n    PieceTreeBase.prototype.getLineFeedCnt = function (bufferIndex, start, end) {\r\n        // we don't need to worry about start: abc\\r|\\n, or abc|\\r, or abc|\\n, or abc|\\r\\n doesn't change the fact that, there is one line break after start.\r\n        // now let's take care of end: abc\\r|\\n, if end is in between \\r and \\n, we need to add line feed count by 1\r\n        if (end.column === 0) {\r\n            return end.line - start.line;\r\n        }\r\n        var lineStarts = this._buffers[bufferIndex].lineStarts;\r\n        if (end.line === lineStarts.length - 1) { // it means, there is no \\n after end, otherwise, there will be one more lineStart.\r\n            return end.line - start.line;\r\n        }\r\n        var nextLineStartOffset = lineStarts[end.line + 1];\r\n        var endOffset = lineStarts[end.line] + end.column;\r\n        if (nextLineStartOffset > endOffset + 1) { // there are more than 1 character after end, which means it can't be \\n\r\n            return end.line - start.line;\r\n        }\r\n        // endOffset + 1 === nextLineStartOffset\r\n        // character at endOffset is \\n, so we check the character before first\r\n        // if character at endOffset is \\r, end.column is 0 and we can't get here.\r\n        var previousCharOffset = endOffset - 1; // end.column > 0 so it's okay.\r\n        var buffer = this._buffers[bufferIndex].buffer;\r\n        if (buffer.charCodeAt(previousCharOffset) === 13) {\r\n            return end.line - start.line + 1;\r\n        }\r\n        else {\r\n            return end.line - start.line;\r\n        }\r\n    };\r\n    PieceTreeBase.prototype.offsetInBuffer = function (bufferIndex, cursor) {\r\n        var lineStarts = this._buffers[bufferIndex].lineStarts;\r\n        return lineStarts[cursor.line] + cursor.column;\r\n    };\r\n    PieceTreeBase.prototype.deleteNodes = function (nodes) {\r\n        for (var i = 0; i < nodes.length; i++) {\r\n            rbDelete(this, nodes[i]);\r\n        }\r\n    };\r\n    PieceTreeBase.prototype.createNewPieces = function (text) {\r\n        if (text.length > AverageBufferSize) {\r\n            // the content is large, operations like substring, charCode becomes slow\r\n            // so here we split it into smaller chunks, just like what we did for CR/LF normalization\r\n            var newPieces = [];\r\n            while (text.length > AverageBufferSize) {\r\n                var lastChar = text.charCodeAt(AverageBufferSize - 1);\r\n                var splitText = void 0;\r\n                if (lastChar === 13 /* CarriageReturn */ || (lastChar >= 0xD800 && lastChar <= 0xDBFF)) {\r\n                    // last character is \\r or a high surrogate => keep it back\r\n                    splitText = text.substring(0, AverageBufferSize - 1);\r\n                    text = text.substring(AverageBufferSize - 1);\r\n                }\r\n                else {\r\n                    splitText = text.substring(0, AverageBufferSize);\r\n                    text = text.substring(AverageBufferSize);\r\n                }\r\n                var lineStarts_1 = createLineStartsFast(splitText);\r\n                newPieces.push(new Piece(this._buffers.length, /* buffer index */ { line: 0, column: 0 }, { line: lineStarts_1.length - 1, column: splitText.length - lineStarts_1[lineStarts_1.length - 1] }, lineStarts_1.length - 1, splitText.length));\r\n                this._buffers.push(new StringBuffer(splitText, lineStarts_1));\r\n            }\r\n            var lineStarts_2 = createLineStartsFast(text);\r\n            newPieces.push(new Piece(this._buffers.length, /* buffer index */ { line: 0, column: 0 }, { line: lineStarts_2.length - 1, column: text.length - lineStarts_2[lineStarts_2.length - 1] }, lineStarts_2.length - 1, text.length));\r\n            this._buffers.push(new StringBuffer(text, lineStarts_2));\r\n            return newPieces;\r\n        }\r\n        var startOffset = this._buffers[0].buffer.length;\r\n        var lineStarts = createLineStartsFast(text, false);\r\n        var start = this._lastChangeBufferPos;\r\n        if (this._buffers[0].lineStarts[this._buffers[0].lineStarts.length - 1] === startOffset\r\n            && startOffset !== 0\r\n            && this.startWithLF(text)\r\n            && this.endWithCR(this._buffers[0].buffer) // todo, we can check this._lastChangeBufferPos's column as it's the last one\r\n        ) {\r\n            this._lastChangeBufferPos = { line: this._lastChangeBufferPos.line, column: this._lastChangeBufferPos.column + 1 };\r\n            start = this._lastChangeBufferPos;\r\n            for (var i = 0; i < lineStarts.length; i++) {\r\n                lineStarts[i] += startOffset + 1;\r\n            }\r\n            this._buffers[0].lineStarts = this._buffers[0].lineStarts.concat(lineStarts.slice(1));\r\n            this._buffers[0].buffer += '_' + text;\r\n            startOffset += 1;\r\n        }\r\n        else {\r\n            if (startOffset !== 0) {\r\n                for (var i = 0; i < lineStarts.length; i++) {\r\n                    lineStarts[i] += startOffset;\r\n                }\r\n            }\r\n            this._buffers[0].lineStarts = this._buffers[0].lineStarts.concat(lineStarts.slice(1));\r\n            this._buffers[0].buffer += text;\r\n        }\r\n        var endOffset = this._buffers[0].buffer.length;\r\n        var endIndex = this._buffers[0].lineStarts.length - 1;\r\n        var endColumn = endOffset - this._buffers[0].lineStarts[endIndex];\r\n        var endPos = { line: endIndex, column: endColumn };\r\n        var newPiece = new Piece(0, /** todo@peng */ start, endPos, this.getLineFeedCnt(0, start, endPos), endOffset - startOffset);\r\n        this._lastChangeBufferPos = endPos;\r\n        return [newPiece];\r\n    };\r\n    PieceTreeBase.prototype.getLineRawContent = function (lineNumber, endOffset) {\r\n        if (endOffset === void 0) { endOffset = 0; }\r\n        var x = this.root;\r\n        var ret = '';\r\n        var cache = this._searchCache.get2(lineNumber);\r\n        if (cache) {\r\n            x = cache.node;\r\n            var prevAccumualtedValue = this.getAccumulatedValue(x, lineNumber - cache.nodeStartLineNumber - 1);\r\n            var buffer = this._buffers[x.piece.bufferIndex].buffer;\r\n            var startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\r\n            if (cache.nodeStartLineNumber + x.piece.lineFeedCnt === lineNumber) {\r\n                ret = buffer.substring(startOffset + prevAccumualtedValue, startOffset + x.piece.length);\r\n            }\r\n            else {\r\n                var accumualtedValue = this.getAccumulatedValue(x, lineNumber - cache.nodeStartLineNumber);\r\n                return buffer.substring(startOffset + prevAccumualtedValue, startOffset + accumualtedValue - endOffset);\r\n            }\r\n        }\r\n        else {\r\n            var nodeStartOffset = 0;\r\n            var originalLineNumber = lineNumber;\r\n            while (x !== SENTINEL) {\r\n                if (x.left !== SENTINEL && x.lf_left >= lineNumber - 1) {\r\n                    x = x.left;\r\n                }\r\n                else if (x.lf_left + x.piece.lineFeedCnt > lineNumber - 1) {\r\n                    var prevAccumualtedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\r\n                    var accumualtedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 1);\r\n                    var buffer = this._buffers[x.piece.bufferIndex].buffer;\r\n                    var startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\r\n                    nodeStartOffset += x.size_left;\r\n                    this._searchCache.set({\r\n                        node: x,\r\n                        nodeStartOffset: nodeStartOffset,\r\n                        nodeStartLineNumber: originalLineNumber - (lineNumber - 1 - x.lf_left)\r\n                    });\r\n                    return buffer.substring(startOffset + prevAccumualtedValue, startOffset + accumualtedValue - endOffset);\r\n                }\r\n                else if (x.lf_left + x.piece.lineFeedCnt === lineNumber - 1) {\r\n                    var prevAccumualtedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\r\n                    var buffer = this._buffers[x.piece.bufferIndex].buffer;\r\n                    var startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\r\n                    ret = buffer.substring(startOffset + prevAccumualtedValue, startOffset + x.piece.length);\r\n                    break;\r\n                }\r\n                else {\r\n                    lineNumber -= x.lf_left + x.piece.lineFeedCnt;\r\n                    nodeStartOffset += x.size_left + x.piece.length;\r\n                    x = x.right;\r\n                }\r\n            }\r\n        }\r\n        // search in order, to find the node contains end column\r\n        x = x.next();\r\n        while (x !== SENTINEL) {\r\n            var buffer = this._buffers[x.piece.bufferIndex].buffer;\r\n            if (x.piece.lineFeedCnt > 0) {\r\n                var accumualtedValue = this.getAccumulatedValue(x, 0);\r\n                var startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\r\n                ret += buffer.substring(startOffset, startOffset + accumualtedValue - endOffset);\r\n                return ret;\r\n            }\r\n            else {\r\n                var startOffset = this.offsetInBuffer(x.piece.bufferIndex, x.piece.start);\r\n                ret += buffer.substr(startOffset, x.piece.length);\r\n            }\r\n            x = x.next();\r\n        }\r\n        return ret;\r\n    };\r\n    PieceTreeBase.prototype.computeBufferMetadata = function () {\r\n        var x = this.root;\r\n        var lfCnt = 1;\r\n        var len = 0;\r\n        while (x !== SENTINEL) {\r\n            lfCnt += x.lf_left + x.piece.lineFeedCnt;\r\n            len += x.size_left + x.piece.length;\r\n            x = x.right;\r\n        }\r\n        this._lineCnt = lfCnt;\r\n        this._length = len;\r\n        this._searchCache.valdiate(this._length);\r\n    };\r\n    // #region node operations\r\n    PieceTreeBase.prototype.getIndexOf = function (node, accumulatedValue) {\r\n        var piece = node.piece;\r\n        var pos = this.positionInBuffer(node, accumulatedValue);\r\n        var lineCnt = pos.line - piece.start.line;\r\n        if (this.offsetInBuffer(piece.bufferIndex, piece.end) - this.offsetInBuffer(piece.bufferIndex, piece.start) === accumulatedValue) {\r\n            // we are checking the end of this node, so a CRLF check is necessary.\r\n            var realLineCnt = this.getLineFeedCnt(node.piece.bufferIndex, piece.start, pos);\r\n            if (realLineCnt !== lineCnt) {\r\n                // aha yes, CRLF\r\n                return { index: realLineCnt, remainder: 0 };\r\n            }\r\n        }\r\n        return { index: lineCnt, remainder: pos.column };\r\n    };\r\n    PieceTreeBase.prototype.getAccumulatedValue = function (node, index) {\r\n        if (index < 0) {\r\n            return 0;\r\n        }\r\n        var piece = node.piece;\r\n        var lineStarts = this._buffers[piece.bufferIndex].lineStarts;\r\n        var expectedLineStartIndex = piece.start.line + index + 1;\r\n        if (expectedLineStartIndex > piece.end.line) {\r\n            return lineStarts[piece.end.line] + piece.end.column - lineStarts[piece.start.line] - piece.start.column;\r\n        }\r\n        else {\r\n            return lineStarts[expectedLineStartIndex] - lineStarts[piece.start.line] - piece.start.column;\r\n        }\r\n    };\r\n    PieceTreeBase.prototype.deleteNodeTail = function (node, pos) {\r\n        var piece = node.piece;\r\n        var originalLFCnt = piece.lineFeedCnt;\r\n        var originalEndOffset = this.offsetInBuffer(piece.bufferIndex, piece.end);\r\n        var newEnd = pos;\r\n        var newEndOffset = this.offsetInBuffer(piece.bufferIndex, newEnd);\r\n        var newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, piece.start, newEnd);\r\n        var lf_delta = newLineFeedCnt - originalLFCnt;\r\n        var size_delta = newEndOffset - originalEndOffset;\r\n        var newLength = piece.length + size_delta;\r\n        node.piece = new Piece(piece.bufferIndex, piece.start, newEnd, newLineFeedCnt, newLength);\r\n        updateTreeMetadata(this, node, size_delta, lf_delta);\r\n    };\r\n    PieceTreeBase.prototype.deleteNodeHead = function (node, pos) {\r\n        var piece = node.piece;\r\n        var originalLFCnt = piece.lineFeedCnt;\r\n        var originalStartOffset = this.offsetInBuffer(piece.bufferIndex, piece.start);\r\n        var newStart = pos;\r\n        var newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, newStart, piece.end);\r\n        var newStartOffset = this.offsetInBuffer(piece.bufferIndex, newStart);\r\n        var lf_delta = newLineFeedCnt - originalLFCnt;\r\n        var size_delta = originalStartOffset - newStartOffset;\r\n        var newLength = piece.length + size_delta;\r\n        node.piece = new Piece(piece.bufferIndex, newStart, piece.end, newLineFeedCnt, newLength);\r\n        updateTreeMetadata(this, node, size_delta, lf_delta);\r\n    };\r\n    PieceTreeBase.prototype.shrinkNode = function (node, start, end) {\r\n        var piece = node.piece;\r\n        var originalStartPos = piece.start;\r\n        var originalEndPos = piece.end;\r\n        // old piece, originalStartPos, start\r\n        var oldLength = piece.length;\r\n        var oldLFCnt = piece.lineFeedCnt;\r\n        var newEnd = start;\r\n        var newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, piece.start, newEnd);\r\n        var newLength = this.offsetInBuffer(piece.bufferIndex, start) - this.offsetInBuffer(piece.bufferIndex, originalStartPos);\r\n        node.piece = new Piece(piece.bufferIndex, piece.start, newEnd, newLineFeedCnt, newLength);\r\n        updateTreeMetadata(this, node, newLength - oldLength, newLineFeedCnt - oldLFCnt);\r\n        // new right piece, end, originalEndPos\r\n        var newPiece = new Piece(piece.bufferIndex, end, originalEndPos, this.getLineFeedCnt(piece.bufferIndex, end, originalEndPos), this.offsetInBuffer(piece.bufferIndex, originalEndPos) - this.offsetInBuffer(piece.bufferIndex, end));\r\n        var newNode = this.rbInsertRight(node, newPiece);\r\n        this.validateCRLFWithPrevNode(newNode);\r\n    };\r\n    PieceTreeBase.prototype.appendToNode = function (node, value) {\r\n        if (this.adjustCarriageReturnFromNext(value, node)) {\r\n            value += '\\n';\r\n        }\r\n        var hitCRLF = this.shouldCheckCRLF() && this.startWithLF(value) && this.endWithCR(node);\r\n        var startOffset = this._buffers[0].buffer.length;\r\n        this._buffers[0].buffer += value;\r\n        var lineStarts = createLineStartsFast(value, false);\r\n        for (var i = 0; i < lineStarts.length; i++) {\r\n            lineStarts[i] += startOffset;\r\n        }\r\n        if (hitCRLF) {\r\n            var prevStartOffset = this._buffers[0].lineStarts[this._buffers[0].lineStarts.length - 2];\r\n            this._buffers[0].lineStarts.pop();\r\n            // _lastChangeBufferPos is already wrong\r\n            this._lastChangeBufferPos = { line: this._lastChangeBufferPos.line - 1, column: startOffset - prevStartOffset };\r\n        }\r\n        this._buffers[0].lineStarts = this._buffers[0].lineStarts.concat(lineStarts.slice(1));\r\n        var endIndex = this._buffers[0].lineStarts.length - 1;\r\n        var endColumn = this._buffers[0].buffer.length - this._buffers[0].lineStarts[endIndex];\r\n        var newEnd = { line: endIndex, column: endColumn };\r\n        var newLength = node.piece.length + value.length;\r\n        var oldLineFeedCnt = node.piece.lineFeedCnt;\r\n        var newLineFeedCnt = this.getLineFeedCnt(0, node.piece.start, newEnd);\r\n        var lf_delta = newLineFeedCnt - oldLineFeedCnt;\r\n        node.piece = new Piece(node.piece.bufferIndex, node.piece.start, newEnd, newLineFeedCnt, newLength);\r\n        this._lastChangeBufferPos = newEnd;\r\n        updateTreeMetadata(this, node, value.length, lf_delta);\r\n    };\r\n    PieceTreeBase.prototype.nodeAt = function (offset) {\r\n        var x = this.root;\r\n        var cache = this._searchCache.get(offset);\r\n        if (cache) {\r\n            return {\r\n                node: cache.node,\r\n                nodeStartOffset: cache.nodeStartOffset,\r\n                remainder: offset - cache.nodeStartOffset\r\n            };\r\n        }\r\n        var nodeStartOffset = 0;\r\n        while (x !== SENTINEL) {\r\n            if (x.size_left > offset) {\r\n                x = x.left;\r\n            }\r\n            else if (x.size_left + x.piece.length >= offset) {\r\n                nodeStartOffset += x.size_left;\r\n                var ret = {\r\n                    node: x,\r\n                    remainder: offset - x.size_left,\r\n                    nodeStartOffset: nodeStartOffset\r\n                };\r\n                this._searchCache.set(ret);\r\n                return ret;\r\n            }\r\n            else {\r\n                offset -= x.size_left + x.piece.length;\r\n                nodeStartOffset += x.size_left + x.piece.length;\r\n                x = x.right;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    PieceTreeBase.prototype.nodeAt2 = function (lineNumber, column) {\r\n        var x = this.root;\r\n        var nodeStartOffset = 0;\r\n        while (x !== SENTINEL) {\r\n            if (x.left !== SENTINEL && x.lf_left >= lineNumber - 1) {\r\n                x = x.left;\r\n            }\r\n            else if (x.lf_left + x.piece.lineFeedCnt > lineNumber - 1) {\r\n                var prevAccumualtedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\r\n                var accumualtedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 1);\r\n                nodeStartOffset += x.size_left;\r\n                return {\r\n                    node: x,\r\n                    remainder: Math.min(prevAccumualtedValue + column - 1, accumualtedValue),\r\n                    nodeStartOffset: nodeStartOffset\r\n                };\r\n            }\r\n            else if (x.lf_left + x.piece.lineFeedCnt === lineNumber - 1) {\r\n                var prevAccumualtedValue = this.getAccumulatedValue(x, lineNumber - x.lf_left - 2);\r\n                if (prevAccumualtedValue + column - 1 <= x.piece.length) {\r\n                    return {\r\n                        node: x,\r\n                        remainder: prevAccumualtedValue + column - 1,\r\n                        nodeStartOffset: nodeStartOffset\r\n                    };\r\n                }\r\n                else {\r\n                    column -= x.piece.length - prevAccumualtedValue;\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                lineNumber -= x.lf_left + x.piece.lineFeedCnt;\r\n                nodeStartOffset += x.size_left + x.piece.length;\r\n                x = x.right;\r\n            }\r\n        }\r\n        // search in order, to find the node contains position.column\r\n        x = x.next();\r\n        while (x !== SENTINEL) {\r\n            if (x.piece.lineFeedCnt > 0) {\r\n                var accumualtedValue = this.getAccumulatedValue(x, 0);\r\n                var nodeStartOffset_1 = this.offsetOfNode(x);\r\n                return {\r\n                    node: x,\r\n                    remainder: Math.min(column - 1, accumualtedValue),\r\n                    nodeStartOffset: nodeStartOffset_1\r\n                };\r\n            }\r\n            else {\r\n                if (x.piece.length >= column - 1) {\r\n                    var nodeStartOffset_2 = this.offsetOfNode(x);\r\n                    return {\r\n                        node: x,\r\n                        remainder: column - 1,\r\n                        nodeStartOffset: nodeStartOffset_2\r\n                    };\r\n                }\r\n                else {\r\n                    column -= x.piece.length;\r\n                }\r\n            }\r\n            x = x.next();\r\n        }\r\n        return null;\r\n    };\r\n    PieceTreeBase.prototype.nodeCharCodeAt = function (node, offset) {\r\n        if (node.piece.lineFeedCnt < 1) {\r\n            return -1;\r\n        }\r\n        var buffer = this._buffers[node.piece.bufferIndex];\r\n        var newOffset = this.offsetInBuffer(node.piece.bufferIndex, node.piece.start) + offset;\r\n        return buffer.buffer.charCodeAt(newOffset);\r\n    };\r\n    PieceTreeBase.prototype.offsetOfNode = function (node) {\r\n        if (!node) {\r\n            return 0;\r\n        }\r\n        var pos = node.size_left;\r\n        while (node !== this.root) {\r\n            if (node.parent.right === node) {\r\n                pos += node.parent.size_left + node.parent.piece.length;\r\n            }\r\n            node = node.parent;\r\n        }\r\n        return pos;\r\n    };\r\n    // #endregion\r\n    // #region CRLF\r\n    PieceTreeBase.prototype.shouldCheckCRLF = function () {\r\n        return !(this._EOLNormalized && this._EOL === '\\n');\r\n    };\r\n    PieceTreeBase.prototype.startWithLF = function (val) {\r\n        if (typeof val === 'string') {\r\n            return val.charCodeAt(0) === 10;\r\n        }\r\n        if (val === SENTINEL || val.piece.lineFeedCnt === 0) {\r\n            return false;\r\n        }\r\n        var piece = val.piece;\r\n        var lineStarts = this._buffers[piece.bufferIndex].lineStarts;\r\n        var line = piece.start.line;\r\n        var startOffset = lineStarts[line] + piece.start.column;\r\n        if (line === lineStarts.length - 1) {\r\n            // last line, so there is no line feed at the end of this line\r\n            return false;\r\n        }\r\n        var nextLineOffset = lineStarts[line + 1];\r\n        if (nextLineOffset > startOffset + 1) {\r\n            return false;\r\n        }\r\n        return this._buffers[piece.bufferIndex].buffer.charCodeAt(startOffset) === 10;\r\n    };\r\n    PieceTreeBase.prototype.endWithCR = function (val) {\r\n        if (typeof val === 'string') {\r\n            return val.charCodeAt(val.length - 1) === 13;\r\n        }\r\n        if (val === SENTINEL || val.piece.lineFeedCnt === 0) {\r\n            return false;\r\n        }\r\n        return this.nodeCharCodeAt(val, val.piece.length - 1) === 13;\r\n    };\r\n    PieceTreeBase.prototype.validateCRLFWithPrevNode = function (nextNode) {\r\n        if (this.shouldCheckCRLF() && this.startWithLF(nextNode)) {\r\n            var node = nextNode.prev();\r\n            if (this.endWithCR(node)) {\r\n                this.fixCRLF(node, nextNode);\r\n            }\r\n        }\r\n    };\r\n    PieceTreeBase.prototype.validateCRLFWithNextNode = function (node) {\r\n        if (this.shouldCheckCRLF() && this.endWithCR(node)) {\r\n            var nextNode = node.next();\r\n            if (this.startWithLF(nextNode)) {\r\n                this.fixCRLF(node, nextNode);\r\n            }\r\n        }\r\n    };\r\n    PieceTreeBase.prototype.fixCRLF = function (prev, next) {\r\n        var nodesToDel = [];\r\n        // update node\r\n        var lineStarts = this._buffers[prev.piece.bufferIndex].lineStarts;\r\n        var newEnd;\r\n        if (prev.piece.end.column === 0) {\r\n            // it means, last line ends with \\r, not \\r\\n\r\n            newEnd = { line: prev.piece.end.line - 1, column: lineStarts[prev.piece.end.line] - lineStarts[prev.piece.end.line - 1] - 1 };\r\n        }\r\n        else {\r\n            // \\r\\n\r\n            newEnd = { line: prev.piece.end.line, column: prev.piece.end.column - 1 };\r\n        }\r\n        var prevNewLength = prev.piece.length - 1;\r\n        var prevNewLFCnt = prev.piece.lineFeedCnt - 1;\r\n        prev.piece = new Piece(prev.piece.bufferIndex, prev.piece.start, newEnd, prevNewLFCnt, prevNewLength);\r\n        updateTreeMetadata(this, prev, -1, -1);\r\n        if (prev.piece.length === 0) {\r\n            nodesToDel.push(prev);\r\n        }\r\n        // update nextNode\r\n        var newStart = { line: next.piece.start.line + 1, column: 0 };\r\n        var newLength = next.piece.length - 1;\r\n        var newLineFeedCnt = this.getLineFeedCnt(next.piece.bufferIndex, newStart, next.piece.end);\r\n        next.piece = new Piece(next.piece.bufferIndex, newStart, next.piece.end, newLineFeedCnt, newLength);\r\n        updateTreeMetadata(this, next, -1, -1);\r\n        if (next.piece.length === 0) {\r\n            nodesToDel.push(next);\r\n        }\r\n        // create new piece which contains \\r\\n\r\n        var pieces = this.createNewPieces('\\r\\n');\r\n        this.rbInsertRight(prev, pieces[0]);\r\n        // delete empty nodes\r\n        for (var i = 0; i < nodesToDel.length; i++) {\r\n            rbDelete(this, nodesToDel[i]);\r\n        }\r\n    };\r\n    PieceTreeBase.prototype.adjustCarriageReturnFromNext = function (value, node) {\r\n        if (this.shouldCheckCRLF() && this.endWithCR(value)) {\r\n            var nextNode = node.next();\r\n            if (this.startWithLF(nextNode)) {\r\n                // move `\\n` forward\r\n                value += '\\n';\r\n                if (nextNode.piece.length === 1) {\r\n                    rbDelete(this, nextNode);\r\n                }\r\n                else {\r\n                    var piece = nextNode.piece;\r\n                    var newStart = { line: piece.start.line + 1, column: 0 };\r\n                    var newLength = piece.length - 1;\r\n                    var newLineFeedCnt = this.getLineFeedCnt(piece.bufferIndex, newStart, piece.end);\r\n                    nextNode.piece = new Piece(piece.bufferIndex, newStart, piece.end, newLineFeedCnt, newLength);\r\n                    updateTreeMetadata(this, nextNode, -1, -1);\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    // #endregion\r\n    // #endregion\r\n    // #region Tree operations\r\n    PieceTreeBase.prototype.iterate = function (node, callback) {\r\n        if (node === SENTINEL) {\r\n            return callback(SENTINEL);\r\n        }\r\n        var leftRet = this.iterate(node.left, callback);\r\n        if (!leftRet) {\r\n            return leftRet;\r\n        }\r\n        return callback(node) && this.iterate(node.right, callback);\r\n    };\r\n    PieceTreeBase.prototype.getNodeContent = function (node) {\r\n        if (node === SENTINEL) {\r\n            return '';\r\n        }\r\n        var buffer = this._buffers[node.piece.bufferIndex];\r\n        var currentContent;\r\n        var piece = node.piece;\r\n        var startOffset = this.offsetInBuffer(piece.bufferIndex, piece.start);\r\n        var endOffset = this.offsetInBuffer(piece.bufferIndex, piece.end);\r\n        currentContent = buffer.buffer.substring(startOffset, endOffset);\r\n        return currentContent;\r\n    };\r\n    /**\r\n     *      node              node\r\n     *     /  \\              /  \\\r\n     *    a   b    <----   a    b\r\n     *                         /\r\n     *                        z\r\n     */\r\n    PieceTreeBase.prototype.rbInsertRight = function (node, p) {\r\n        var z = new TreeNode(p, 1 /* Red */);\r\n        z.left = SENTINEL;\r\n        z.right = SENTINEL;\r\n        z.parent = SENTINEL;\r\n        z.size_left = 0;\r\n        z.lf_left = 0;\r\n        var x = this.root;\r\n        if (x === SENTINEL) {\r\n            this.root = z;\r\n            z.color = 0 /* Black */;\r\n        }\r\n        else if (node.right === SENTINEL) {\r\n            node.right = z;\r\n            z.parent = node;\r\n        }\r\n        else {\r\n            var nextNode = leftest(node.right);\r\n            nextNode.left = z;\r\n            z.parent = nextNode;\r\n        }\r\n        fixInsert(this, z);\r\n        return z;\r\n    };\r\n    /**\r\n     *      node              node\r\n     *     /  \\              /  \\\r\n     *    a   b     ---->   a    b\r\n     *                       \\\r\n     *                        z\r\n     */\r\n    PieceTreeBase.prototype.rbInsertLeft = function (node, p) {\r\n        var z = new TreeNode(p, 1 /* Red */);\r\n        z.left = SENTINEL;\r\n        z.right = SENTINEL;\r\n        z.parent = SENTINEL;\r\n        z.size_left = 0;\r\n        z.lf_left = 0;\r\n        if (this.root === SENTINEL) {\r\n            this.root = z;\r\n            z.color = 0 /* Black */;\r\n        }\r\n        else if (node.left === SENTINEL) {\r\n            node.left = z;\r\n            z.parent = node;\r\n        }\r\n        else {\r\n            var prevNode = righttest(node.left); // a\r\n            prevNode.right = z;\r\n            z.parent = prevNode;\r\n        }\r\n        fixInsert(this, z);\r\n        return z;\r\n    };\r\n    return PieceTreeBase;\r\n}());\r\nexport { PieceTreeBase };\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as strings from '../../../../base/common/strings.js';\r\nimport { Range } from '../../core/range.js';\r\nimport { ApplyEditsResult } from '../../model.js';\r\nimport { PieceTreeBase } from './pieceTreeBase.js';\r\nvar PieceTreeTextBuffer = /** @class */ (function () {\r\n    function PieceTreeTextBuffer(chunks, BOM, eol, containsRTL, isBasicASCII, eolNormalized) {\r\n        this._BOM = BOM;\r\n        this._mightContainNonBasicASCII = !isBasicASCII;\r\n        this._mightContainRTL = containsRTL;\r\n        this._pieceTree = new PieceTreeBase(chunks, eol, eolNormalized);\r\n    }\r\n    PieceTreeTextBuffer.prototype.mightContainRTL = function () {\r\n        return this._mightContainRTL;\r\n    };\r\n    PieceTreeTextBuffer.prototype.mightContainNonBasicASCII = function () {\r\n        return this._mightContainNonBasicASCII;\r\n    };\r\n    PieceTreeTextBuffer.prototype.getBOM = function () {\r\n        return this._BOM;\r\n    };\r\n    PieceTreeTextBuffer.prototype.getEOL = function () {\r\n        return this._pieceTree.getEOL();\r\n    };\r\n    PieceTreeTextBuffer.prototype.getOffsetAt = function (lineNumber, column) {\r\n        return this._pieceTree.getOffsetAt(lineNumber, column);\r\n    };\r\n    PieceTreeTextBuffer.prototype.getPositionAt = function (offset) {\r\n        return this._pieceTree.getPositionAt(offset);\r\n    };\r\n    PieceTreeTextBuffer.prototype.getRangeAt = function (start, length) {\r\n        var end = start + length;\r\n        var startPosition = this.getPositionAt(start);\r\n        var endPosition = this.getPositionAt(end);\r\n        return new Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\r\n    };\r\n    PieceTreeTextBuffer.prototype.getValueInRange = function (range, eol) {\r\n        if (eol === void 0) { eol = 0 /* TextDefined */; }\r\n        if (range.isEmpty()) {\r\n            return '';\r\n        }\r\n        var lineEnding = this._getEndOfLine(eol);\r\n        return this._pieceTree.getValueInRange(range, lineEnding);\r\n    };\r\n    PieceTreeTextBuffer.prototype.getValueLengthInRange = function (range, eol) {\r\n        if (eol === void 0) { eol = 0 /* TextDefined */; }\r\n        if (range.isEmpty()) {\r\n            return 0;\r\n        }\r\n        if (range.startLineNumber === range.endLineNumber) {\r\n            return (range.endColumn - range.startColumn);\r\n        }\r\n        var startOffset = this.getOffsetAt(range.startLineNumber, range.startColumn);\r\n        var endOffset = this.getOffsetAt(range.endLineNumber, range.endColumn);\r\n        return endOffset - startOffset;\r\n    };\r\n    PieceTreeTextBuffer.prototype.getCharacterCountInRange = function (range, eol) {\r\n        if (eol === void 0) { eol = 0 /* TextDefined */; }\r\n        if (this._mightContainNonBasicASCII) {\r\n            // we must count by iterating\r\n            var result = 0;\r\n            var fromLineNumber = range.startLineNumber;\r\n            var toLineNumber = range.endLineNumber;\r\n            for (var lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\r\n                var lineContent = this.getLineContent(lineNumber);\r\n                var fromOffset = (lineNumber === fromLineNumber ? range.startColumn - 1 : 0);\r\n                var toOffset = (lineNumber === toLineNumber ? range.endColumn - 1 : lineContent.length);\r\n                for (var offset = fromOffset; offset < toOffset; offset++) {\r\n                    if (strings.isHighSurrogate(lineContent.charCodeAt(offset))) {\r\n                        result = result + 1;\r\n                        offset = offset + 1;\r\n                    }\r\n                    else {\r\n                        result = result + 1;\r\n                    }\r\n                }\r\n            }\r\n            result += this._getEndOfLine(eol).length * (toLineNumber - fromLineNumber);\r\n            return result;\r\n        }\r\n        return this.getValueLengthInRange(range, eol);\r\n    };\r\n    PieceTreeTextBuffer.prototype.getLength = function () {\r\n        return this._pieceTree.getLength();\r\n    };\r\n    PieceTreeTextBuffer.prototype.getLineCount = function () {\r\n        return this._pieceTree.getLineCount();\r\n    };\r\n    PieceTreeTextBuffer.prototype.getLinesContent = function () {\r\n        return this._pieceTree.getLinesContent();\r\n    };\r\n    PieceTreeTextBuffer.prototype.getLineContent = function (lineNumber) {\r\n        return this._pieceTree.getLineContent(lineNumber);\r\n    };\r\n    PieceTreeTextBuffer.prototype.getLineCharCode = function (lineNumber, index) {\r\n        return this._pieceTree.getLineCharCode(lineNumber, index);\r\n    };\r\n    PieceTreeTextBuffer.prototype.getLineLength = function (lineNumber) {\r\n        return this._pieceTree.getLineLength(lineNumber);\r\n    };\r\n    PieceTreeTextBuffer.prototype.getLineFirstNonWhitespaceColumn = function (lineNumber) {\r\n        var result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\r\n        if (result === -1) {\r\n            return 0;\r\n        }\r\n        return result + 1;\r\n    };\r\n    PieceTreeTextBuffer.prototype.getLineLastNonWhitespaceColumn = function (lineNumber) {\r\n        var result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\r\n        if (result === -1) {\r\n            return 0;\r\n        }\r\n        return result + 2;\r\n    };\r\n    PieceTreeTextBuffer.prototype._getEndOfLine = function (eol) {\r\n        switch (eol) {\r\n            case 1 /* LF */:\r\n                return '\\n';\r\n            case 2 /* CRLF */:\r\n                return '\\r\\n';\r\n            case 0 /* TextDefined */:\r\n                return this.getEOL();\r\n        }\r\n        throw new Error('Unknown EOL preference');\r\n    };\r\n    PieceTreeTextBuffer.prototype.setEOL = function (newEOL) {\r\n        this._pieceTree.setEOL(newEOL);\r\n    };\r\n    PieceTreeTextBuffer.prototype.applyEdits = function (rawOperations, recordTrimAutoWhitespace) {\r\n        var mightContainRTL = this._mightContainRTL;\r\n        var mightContainNonBasicASCII = this._mightContainNonBasicASCII;\r\n        var canReduceOperations = true;\r\n        var operations = [];\r\n        for (var i = 0; i < rawOperations.length; i++) {\r\n            var op = rawOperations[i];\r\n            if (canReduceOperations && op._isTracked) {\r\n                canReduceOperations = false;\r\n            }\r\n            var validatedRange = op.range;\r\n            if (!mightContainRTL && op.text) {\r\n                // check if the new inserted text contains RTL\r\n                mightContainRTL = strings.containsRTL(op.text);\r\n            }\r\n            if (!mightContainNonBasicASCII && op.text) {\r\n                mightContainNonBasicASCII = !strings.isBasicASCII(op.text);\r\n            }\r\n            operations[i] = {\r\n                sortIndex: i,\r\n                identifier: op.identifier || null,\r\n                range: validatedRange,\r\n                rangeOffset: this.getOffsetAt(validatedRange.startLineNumber, validatedRange.startColumn),\r\n                rangeLength: this.getValueLengthInRange(validatedRange),\r\n                lines: op.text ? op.text.split(/\\r\\n|\\r|\\n/) : null,\r\n                forceMoveMarkers: Boolean(op.forceMoveMarkers),\r\n                isAutoWhitespaceEdit: op.isAutoWhitespaceEdit || false\r\n            };\r\n        }\r\n        // Sort operations ascending\r\n        operations.sort(PieceTreeTextBuffer._sortOpsAscending);\r\n        var hasTouchingRanges = false;\r\n        for (var i = 0, count = operations.length - 1; i < count; i++) {\r\n            var rangeEnd = operations[i].range.getEndPosition();\r\n            var nextRangeStart = operations[i + 1].range.getStartPosition();\r\n            if (nextRangeStart.isBeforeOrEqual(rangeEnd)) {\r\n                if (nextRangeStart.isBefore(rangeEnd)) {\r\n                    // overlapping ranges\r\n                    throw new Error('Overlapping ranges are not allowed!');\r\n                }\r\n                hasTouchingRanges = true;\r\n            }\r\n        }\r\n        if (canReduceOperations) {\r\n            operations = this._reduceOperations(operations);\r\n        }\r\n        // Delta encode operations\r\n        var reverseRanges = PieceTreeTextBuffer._getInverseEditRanges(operations);\r\n        var newTrimAutoWhitespaceCandidates = [];\r\n        for (var i = 0; i < operations.length; i++) {\r\n            var op = operations[i];\r\n            var reverseRange = reverseRanges[i];\r\n            if (recordTrimAutoWhitespace && op.isAutoWhitespaceEdit && op.range.isEmpty()) {\r\n                // Record already the future line numbers that might be auto whitespace removal candidates on next edit\r\n                for (var lineNumber = reverseRange.startLineNumber; lineNumber <= reverseRange.endLineNumber; lineNumber++) {\r\n                    var currentLineContent = '';\r\n                    if (lineNumber === reverseRange.startLineNumber) {\r\n                        currentLineContent = this.getLineContent(op.range.startLineNumber);\r\n                        if (strings.firstNonWhitespaceIndex(currentLineContent) !== -1) {\r\n                            continue;\r\n                        }\r\n                    }\r\n                    newTrimAutoWhitespaceCandidates.push({ lineNumber: lineNumber, oldContent: currentLineContent });\r\n                }\r\n            }\r\n        }\r\n        var reverseOperations = [];\r\n        for (var i = 0; i < operations.length; i++) {\r\n            var op = operations[i];\r\n            var reverseRange = reverseRanges[i];\r\n            reverseOperations[i] = {\r\n                sortIndex: op.sortIndex,\r\n                identifier: op.identifier,\r\n                range: reverseRange,\r\n                text: this.getValueInRange(op.range),\r\n                forceMoveMarkers: op.forceMoveMarkers\r\n            };\r\n        }\r\n        // Can only sort reverse operations when the order is not significant\r\n        if (!hasTouchingRanges) {\r\n            reverseOperations.sort(function (a, b) { return a.sortIndex - b.sortIndex; });\r\n        }\r\n        this._mightContainRTL = mightContainRTL;\r\n        this._mightContainNonBasicASCII = mightContainNonBasicASCII;\r\n        var contentChanges = this._doApplyEdits(operations);\r\n        var trimAutoWhitespaceLineNumbers = null;\r\n        if (recordTrimAutoWhitespace && newTrimAutoWhitespaceCandidates.length > 0) {\r\n            // sort line numbers auto whitespace removal candidates for next edit descending\r\n            newTrimAutoWhitespaceCandidates.sort(function (a, b) { return b.lineNumber - a.lineNumber; });\r\n            trimAutoWhitespaceLineNumbers = [];\r\n            for (var i = 0, len = newTrimAutoWhitespaceCandidates.length; i < len; i++) {\r\n                var lineNumber = newTrimAutoWhitespaceCandidates[i].lineNumber;\r\n                if (i > 0 && newTrimAutoWhitespaceCandidates[i - 1].lineNumber === lineNumber) {\r\n                    // Do not have the same line number twice\r\n                    continue;\r\n                }\r\n                var prevContent = newTrimAutoWhitespaceCandidates[i].oldContent;\r\n                var lineContent = this.getLineContent(lineNumber);\r\n                if (lineContent.length === 0 || lineContent === prevContent || strings.firstNonWhitespaceIndex(lineContent) !== -1) {\r\n                    continue;\r\n                }\r\n                trimAutoWhitespaceLineNumbers.push(lineNumber);\r\n            }\r\n        }\r\n        return new ApplyEditsResult(reverseOperations, contentChanges, trimAutoWhitespaceLineNumbers);\r\n    };\r\n    /**\r\n     * Transform operations such that they represent the same logic edit,\r\n     * but that they also do not cause OOM crashes.\r\n     */\r\n    PieceTreeTextBuffer.prototype._reduceOperations = function (operations) {\r\n        if (operations.length < 1000) {\r\n            // We know from empirical testing that a thousand edits work fine regardless of their shape.\r\n            return operations;\r\n        }\r\n        // At one point, due to how events are emitted and how each operation is handled,\r\n        // some operations can trigger a high amount of temporary string allocations,\r\n        // that will immediately get edited again.\r\n        // e.g. a formatter inserting ridiculous ammounts of \\n on a model with a single line\r\n        // Therefore, the strategy is to collapse all the operations into a huge single edit operation\r\n        return [this._toSingleEditOperation(operations)];\r\n    };\r\n    PieceTreeTextBuffer.prototype._toSingleEditOperation = function (operations) {\r\n        var forceMoveMarkers = false, firstEditRange = operations[0].range, lastEditRange = operations[operations.length - 1].range, entireEditRange = new Range(firstEditRange.startLineNumber, firstEditRange.startColumn, lastEditRange.endLineNumber, lastEditRange.endColumn), lastEndLineNumber = firstEditRange.startLineNumber, lastEndColumn = firstEditRange.startColumn, result = [];\r\n        for (var i = 0, len = operations.length; i < len; i++) {\r\n            var operation = operations[i], range = operation.range;\r\n            forceMoveMarkers = forceMoveMarkers || operation.forceMoveMarkers;\r\n            // (1) -- Push old text\r\n            for (var lineNumber = lastEndLineNumber; lineNumber < range.startLineNumber; lineNumber++) {\r\n                if (lineNumber === lastEndLineNumber) {\r\n                    result.push(this.getLineContent(lineNumber).substring(lastEndColumn - 1));\r\n                }\r\n                else {\r\n                    result.push('\\n');\r\n                    result.push(this.getLineContent(lineNumber));\r\n                }\r\n            }\r\n            if (range.startLineNumber === lastEndLineNumber) {\r\n                result.push(this.getLineContent(range.startLineNumber).substring(lastEndColumn - 1, range.startColumn - 1));\r\n            }\r\n            else {\r\n                result.push('\\n');\r\n                result.push(this.getLineContent(range.startLineNumber).substring(0, range.startColumn - 1));\r\n            }\r\n            // (2) -- Push new text\r\n            if (operation.lines) {\r\n                for (var j = 0, lenJ = operation.lines.length; j < lenJ; j++) {\r\n                    if (j !== 0) {\r\n                        result.push('\\n');\r\n                    }\r\n                    result.push(operation.lines[j]);\r\n                }\r\n            }\r\n            lastEndLineNumber = operation.range.endLineNumber;\r\n            lastEndColumn = operation.range.endColumn;\r\n        }\r\n        return {\r\n            sortIndex: 0,\r\n            identifier: operations[0].identifier,\r\n            range: entireEditRange,\r\n            rangeOffset: this.getOffsetAt(entireEditRange.startLineNumber, entireEditRange.startColumn),\r\n            rangeLength: this.getValueLengthInRange(entireEditRange, 0 /* TextDefined */),\r\n            lines: result.join('').split('\\n'),\r\n            forceMoveMarkers: forceMoveMarkers,\r\n            isAutoWhitespaceEdit: false\r\n        };\r\n    };\r\n    PieceTreeTextBuffer.prototype._doApplyEdits = function (operations) {\r\n        operations.sort(PieceTreeTextBuffer._sortOpsDescending);\r\n        var contentChanges = [];\r\n        // operations are from bottom to top\r\n        for (var i = 0; i < operations.length; i++) {\r\n            var op = operations[i];\r\n            var startLineNumber = op.range.startLineNumber;\r\n            var startColumn = op.range.startColumn;\r\n            var endLineNumber = op.range.endLineNumber;\r\n            var endColumn = op.range.endColumn;\r\n            if (startLineNumber === endLineNumber && startColumn === endColumn && (!op.lines || op.lines.length === 0)) {\r\n                // no-op\r\n                continue;\r\n            }\r\n            var deletingLinesCnt = endLineNumber - startLineNumber;\r\n            var insertingLinesCnt = (op.lines ? op.lines.length - 1 : 0);\r\n            var editingLinesCnt = Math.min(deletingLinesCnt, insertingLinesCnt);\r\n            var text = (op.lines ? op.lines.join(this.getEOL()) : '');\r\n            if (text) {\r\n                // replacement\r\n                this._pieceTree.delete(op.rangeOffset, op.rangeLength);\r\n                this._pieceTree.insert(op.rangeOffset, text, true);\r\n            }\r\n            else {\r\n                // deletion\r\n                this._pieceTree.delete(op.rangeOffset, op.rangeLength);\r\n            }\r\n            if (editingLinesCnt < insertingLinesCnt) {\r\n                var newLinesContent = [];\r\n                for (var j = editingLinesCnt + 1; j <= insertingLinesCnt; j++) {\r\n                    newLinesContent.push(op.lines[j]);\r\n                }\r\n                newLinesContent[newLinesContent.length - 1] = this.getLineContent(startLineNumber + insertingLinesCnt - 1);\r\n            }\r\n            var contentChangeRange = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\r\n            contentChanges.push({\r\n                range: contentChangeRange,\r\n                rangeLength: op.rangeLength,\r\n                text: text,\r\n                rangeOffset: op.rangeOffset,\r\n                forceMoveMarkers: op.forceMoveMarkers\r\n            });\r\n        }\r\n        return contentChanges;\r\n    };\r\n    PieceTreeTextBuffer.prototype.findMatchesLineByLine = function (searchRange, searchData, captureMatches, limitResultCount) {\r\n        return this._pieceTree.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\r\n    };\r\n    /**\r\n     * Assumes `operations` are validated and sorted ascending\r\n     */\r\n    PieceTreeTextBuffer._getInverseEditRanges = function (operations) {\r\n        var result = [];\r\n        var prevOpEndLineNumber = 0;\r\n        var prevOpEndColumn = 0;\r\n        var prevOp = null;\r\n        for (var i = 0, len = operations.length; i < len; i++) {\r\n            var op = operations[i];\r\n            var startLineNumber = void 0;\r\n            var startColumn = void 0;\r\n            if (prevOp) {\r\n                if (prevOp.range.endLineNumber === op.range.startLineNumber) {\r\n                    startLineNumber = prevOpEndLineNumber;\r\n                    startColumn = prevOpEndColumn + (op.range.startColumn - prevOp.range.endColumn);\r\n                }\r\n                else {\r\n                    startLineNumber = prevOpEndLineNumber + (op.range.startLineNumber - prevOp.range.endLineNumber);\r\n                    startColumn = op.range.startColumn;\r\n                }\r\n            }\r\n            else {\r\n                startLineNumber = op.range.startLineNumber;\r\n                startColumn = op.range.startColumn;\r\n            }\r\n            var resultRange = void 0;\r\n            if (op.lines && op.lines.length > 0) {\r\n                // the operation inserts something\r\n                var lineCount = op.lines.length;\r\n                var firstLine = op.lines[0];\r\n                var lastLine = op.lines[lineCount - 1];\r\n                if (lineCount === 1) {\r\n                    // single line insert\r\n                    resultRange = new Range(startLineNumber, startColumn, startLineNumber, startColumn + firstLine.length);\r\n                }\r\n                else {\r\n                    // multi line insert\r\n                    resultRange = new Range(startLineNumber, startColumn, startLineNumber + lineCount - 1, lastLine.length + 1);\r\n                }\r\n            }\r\n            else {\r\n                // There is nothing to insert\r\n                resultRange = new Range(startLineNumber, startColumn, startLineNumber, startColumn);\r\n            }\r\n            prevOpEndLineNumber = resultRange.endLineNumber;\r\n            prevOpEndColumn = resultRange.endColumn;\r\n            result.push(resultRange);\r\n            prevOp = op;\r\n        }\r\n        return result;\r\n    };\r\n    PieceTreeTextBuffer._sortOpsAscending = function (a, b) {\r\n        var r = Range.compareRangesUsingEnds(a.range, b.range);\r\n        if (r === 0) {\r\n            return a.sortIndex - b.sortIndex;\r\n        }\r\n        return r;\r\n    };\r\n    PieceTreeTextBuffer._sortOpsDescending = function (a, b) {\r\n        var r = Range.compareRangesUsingEnds(a.range, b.range);\r\n        if (r === 0) {\r\n            return b.sortIndex - a.sortIndex;\r\n        }\r\n        return -r;\r\n    };\r\n    return PieceTreeTextBuffer;\r\n}());\r\nexport { PieceTreeTextBuffer };\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as strings from '../../../../base/common/strings.js';\r\nimport { StringBuffer, createLineStarts, createLineStartsFast } from './pieceTreeBase.js';\r\nimport { PieceTreeTextBuffer } from './pieceTreeTextBuffer.js';\r\nvar PieceTreeTextBufferFactory = /** @class */ (function () {\r\n    function PieceTreeTextBufferFactory(_chunks, _bom, _cr, _lf, _crlf, _containsRTL, _isBasicASCII, _normalizeEOL) {\r\n        this._chunks = _chunks;\r\n        this._bom = _bom;\r\n        this._cr = _cr;\r\n        this._lf = _lf;\r\n        this._crlf = _crlf;\r\n        this._containsRTL = _containsRTL;\r\n        this._isBasicASCII = _isBasicASCII;\r\n        this._normalizeEOL = _normalizeEOL;\r\n    }\r\n    PieceTreeTextBufferFactory.prototype._getEOL = function (defaultEOL) {\r\n        var totalEOLCount = this._cr + this._lf + this._crlf;\r\n        var totalCRCount = this._cr + this._crlf;\r\n        if (totalEOLCount === 0) {\r\n            // This is an empty file or a file with precisely one line\r\n            return (defaultEOL === 1 /* LF */ ? '\\n' : '\\r\\n');\r\n        }\r\n        if (totalCRCount > totalEOLCount / 2) {\r\n            // More than half of the file contains \\r\\n ending lines\r\n            return '\\r\\n';\r\n        }\r\n        // At least one line more ends in \\n\r\n        return '\\n';\r\n    };\r\n    PieceTreeTextBufferFactory.prototype.create = function (defaultEOL) {\r\n        var eol = this._getEOL(defaultEOL);\r\n        var chunks = this._chunks;\r\n        if (this._normalizeEOL &&\r\n            ((eol === '\\r\\n' && (this._cr > 0 || this._lf > 0))\r\n                || (eol === '\\n' && (this._cr > 0 || this._crlf > 0)))) {\r\n            // Normalize pieces\r\n            for (var i = 0, len = chunks.length; i < len; i++) {\r\n                var str = chunks[i].buffer.replace(/\\r\\n|\\r|\\n/g, eol);\r\n                var newLineStart = createLineStartsFast(str);\r\n                chunks[i] = new StringBuffer(str, newLineStart);\r\n            }\r\n        }\r\n        return new PieceTreeTextBuffer(chunks, this._bom, eol, this._containsRTL, this._isBasicASCII, this._normalizeEOL);\r\n    };\r\n    return PieceTreeTextBufferFactory;\r\n}());\r\nexport { PieceTreeTextBufferFactory };\r\nvar PieceTreeTextBufferBuilder = /** @class */ (function () {\r\n    function PieceTreeTextBufferBuilder() {\r\n        this.chunks = [];\r\n        this.BOM = '';\r\n        this._hasPreviousChar = false;\r\n        this._previousChar = 0;\r\n        this._tmpLineStarts = [];\r\n        this.cr = 0;\r\n        this.lf = 0;\r\n        this.crlf = 0;\r\n        this.containsRTL = false;\r\n        this.isBasicASCII = true;\r\n    }\r\n    PieceTreeTextBufferBuilder.prototype.acceptChunk = function (chunk) {\r\n        if (chunk.length === 0) {\r\n            return;\r\n        }\r\n        if (this.chunks.length === 0) {\r\n            if (strings.startsWithUTF8BOM(chunk)) {\r\n                this.BOM = strings.UTF8_BOM_CHARACTER;\r\n                chunk = chunk.substr(1);\r\n            }\r\n        }\r\n        var lastChar = chunk.charCodeAt(chunk.length - 1);\r\n        if (lastChar === 13 /* CarriageReturn */ || (lastChar >= 0xD800 && lastChar <= 0xDBFF)) {\r\n            // last character is \\r or a high surrogate => keep it back\r\n            this._acceptChunk1(chunk.substr(0, chunk.length - 1), false);\r\n            this._hasPreviousChar = true;\r\n            this._previousChar = lastChar;\r\n        }\r\n        else {\r\n            this._acceptChunk1(chunk, false);\r\n            this._hasPreviousChar = false;\r\n            this._previousChar = lastChar;\r\n        }\r\n    };\r\n    PieceTreeTextBufferBuilder.prototype._acceptChunk1 = function (chunk, allowEmptyStrings) {\r\n        if (!allowEmptyStrings && chunk.length === 0) {\r\n            // Nothing to do\r\n            return;\r\n        }\r\n        if (this._hasPreviousChar) {\r\n            this._acceptChunk2(String.fromCharCode(this._previousChar) + chunk);\r\n        }\r\n        else {\r\n            this._acceptChunk2(chunk);\r\n        }\r\n    };\r\n    PieceTreeTextBufferBuilder.prototype._acceptChunk2 = function (chunk) {\r\n        var lineStarts = createLineStarts(this._tmpLineStarts, chunk);\r\n        this.chunks.push(new StringBuffer(chunk, lineStarts.lineStarts));\r\n        this.cr += lineStarts.cr;\r\n        this.lf += lineStarts.lf;\r\n        this.crlf += lineStarts.crlf;\r\n        if (this.isBasicASCII) {\r\n            this.isBasicASCII = lineStarts.isBasicASCII;\r\n        }\r\n        if (!this.isBasicASCII && !this.containsRTL) {\r\n            // No need to check if is basic ASCII\r\n            this.containsRTL = strings.containsRTL(chunk);\r\n        }\r\n    };\r\n    PieceTreeTextBufferBuilder.prototype.finish = function (normalizeEOL) {\r\n        if (normalizeEOL === void 0) { normalizeEOL = true; }\r\n        this._finish();\r\n        return new PieceTreeTextBufferFactory(this.chunks, this.BOM, this.cr, this.lf, this.crlf, this.containsRTL, this.isBasicASCII, normalizeEOL);\r\n    };\r\n    PieceTreeTextBufferBuilder.prototype._finish = function () {\r\n        if (this.chunks.length === 0) {\r\n            this._acceptChunk1('', true);\r\n        }\r\n        if (this._hasPreviousChar) {\r\n            this._hasPreviousChar = false;\r\n            // recreate last chunk\r\n            var lastChunk = this.chunks[this.chunks.length - 1];\r\n            lastChunk.buffer += String.fromCharCode(this._previousChar);\r\n            var newLineStarts = createLineStartsFast(lastChunk.buffer);\r\n            lastChunk.lineStarts = newLineStarts;\r\n            if (this._previousChar === 13 /* CarriageReturn */) {\r\n                this.cr++;\r\n            }\r\n        }\r\n    };\r\n    return PieceTreeTextBufferBuilder;\r\n}());\r\nexport { PieceTreeTextBufferBuilder };\r\n"],"sourceRoot":""}