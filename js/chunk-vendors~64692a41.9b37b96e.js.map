{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/editor/common/diff/diffComputer.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/editorCommon.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/editorContextKeys.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/editorAction.js"],"names":["MINIMUM_MATCHING_CHARACTER_LENGTH","computeDiff","originalSequence","modifiedSequence","continueProcessingPredicate","pretty","diffAlgo","ComputeDiff","LineSequence","lines","startColumns","endColumns","i","length_1","length","getFirstNonBlankColumn","getLastNonBlankColumn","this","_startColumns","_endColumns","prototype","getElements","elements","len","substring","getStartLineNumber","getEndLineNumber","createCharSequence","shouldIgnoreTrimWhitespace","startIndex","endIndex","charCodes","lineNumbers","columns","index","lineContent","startColumn","endColumn","col","charCodeAt","CharSequence","_charCodes","_lineNumbers","_columns","getStartColumn","getEndColumn","CharChange","originalStartLineNumber","originalStartColumn","originalEndLineNumber","originalEndColumn","modifiedStartLineNumber","modifiedStartColumn","modifiedEndLineNumber","modifiedEndColumn","createFromDiffChange","diffChange","originalCharSequence","modifiedCharSequence","originalLength","originalStart","modifiedLength","modifiedStart","postProcessCharChanges","rawChanges","result","prevChange","currChange","originalMatchingLength","modifiedMatchingLength","matchingLength","Math","min","push","LineChange","charChanges","createFromDiffResult","originalLineSequence","modifiedLineSequence","continueCharDiff","shouldComputeCharChanges","shouldPostProcessCharChanges","undefined","changes","length_2","DiffComputer","originalLines","modifiedLines","opts","shouldMakePrettyDiff","original","modified","continueLineDiff","createContinueProcessingPredicate","maxComputationTime","quitEarly","diffResult","lineChanges","length_3","originalLineIndex","modifiedLineIndex","nextChange","originalStop","modifiedStop","originalLine","modifiedLine","originalChar","modifiedChar","_pushTrimWhitespaceCharChange","originalMaxColumn","modifiedMaxColumn","originalLineNumber","modifiedLineNumber","_mergeTrimWhitespaceCharChange","txt","defaultValue","r","maximumRuntime","startTime","Date","now","isThemeColor","o","id","EditorType","ICodeEditor","IDiffEditor","Handler","ExecuteCommand","ExecuteCommands","Type","ReplacePreviousChar","CompositionStart","CompositionEnd","Paste","Cut","Undo","Redo","EditorContextKeys","editorSimpleInput","editorTextFocus","focus","textInputFocus","readOnly","writable","toNegated","hasNonEmptySelection","hasOnlyEmptySelection","hasMultipleSelections","hasSingleSelection","tabMovesFocus","tabDoesNotMoveFocus","isInEmbeddedEditor","canUndo","canRedo","languageId","hasCompletionItemProvider","hasCodeActionsProvider","hasCodeLensProvider","hasDefinitionProvider","hasDeclarationProvider","hasImplementationProvider","hasTypeDefinitionProvider","hasHoverProvider","hasDocumentHighlightProvider","hasDocumentSymbolProvider","hasReferenceProvider","hasRenameProvider","hasSignatureHelpProvider","hasDocumentFormattingProvider","hasDocumentSelectionFormattingProvider","hasMultipleDocumentFormattingProvider","hasMultipleDocumentSelectionFormattingProvider","InternalEditorAction","label","alias","precondition","run","contextKeyService","_precondition","_run","_contextKeyService","isSupported","contextMatchesRules","Promise","resolve"],"mappings":"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","file":"js/chunk-vendors~64692a41.9b37b96e.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { LcsDiff } from '../../../base/common/diff/diff.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nvar MINIMUM_MATCHING_CHARACTER_LENGTH = 3;\r\nfunction computeDiff(originalSequence, modifiedSequence, continueProcessingPredicate, pretty) {\r\n    var diffAlgo = new LcsDiff(originalSequence, modifiedSequence, continueProcessingPredicate);\r\n    return diffAlgo.ComputeDiff(pretty);\r\n}\r\nvar LineSequence = /** @class */ (function () {\r\n    function LineSequence(lines) {\r\n        var startColumns = [];\r\n        var endColumns = [];\r\n        for (var i = 0, length_1 = lines.length; i < length_1; i++) {\r\n            startColumns[i] = getFirstNonBlankColumn(lines[i], 1);\r\n            endColumns[i] = getLastNonBlankColumn(lines[i], 1);\r\n        }\r\n        this.lines = lines;\r\n        this._startColumns = startColumns;\r\n        this._endColumns = endColumns;\r\n    }\r\n    LineSequence.prototype.getElements = function () {\r\n        var elements = [];\r\n        for (var i = 0, len = this.lines.length; i < len; i++) {\r\n            elements[i] = this.lines[i].substring(this._startColumns[i] - 1, this._endColumns[i] - 1);\r\n        }\r\n        return elements;\r\n    };\r\n    LineSequence.prototype.getStartLineNumber = function (i) {\r\n        return i + 1;\r\n    };\r\n    LineSequence.prototype.getEndLineNumber = function (i) {\r\n        return i + 1;\r\n    };\r\n    LineSequence.prototype.createCharSequence = function (shouldIgnoreTrimWhitespace, startIndex, endIndex) {\r\n        var charCodes = [];\r\n        var lineNumbers = [];\r\n        var columns = [];\r\n        var len = 0;\r\n        for (var index = startIndex; index <= endIndex; index++) {\r\n            var lineContent = this.lines[index];\r\n            var startColumn = (shouldIgnoreTrimWhitespace ? this._startColumns[index] : 1);\r\n            var endColumn = (shouldIgnoreTrimWhitespace ? this._endColumns[index] : lineContent.length + 1);\r\n            for (var col = startColumn; col < endColumn; col++) {\r\n                charCodes[len] = lineContent.charCodeAt(col - 1);\r\n                lineNumbers[len] = index + 1;\r\n                columns[len] = col;\r\n                len++;\r\n            }\r\n        }\r\n        return new CharSequence(charCodes, lineNumbers, columns);\r\n    };\r\n    return LineSequence;\r\n}());\r\nvar CharSequence = /** @class */ (function () {\r\n    function CharSequence(charCodes, lineNumbers, columns) {\r\n        this._charCodes = charCodes;\r\n        this._lineNumbers = lineNumbers;\r\n        this._columns = columns;\r\n    }\r\n    CharSequence.prototype.getElements = function () {\r\n        return this._charCodes;\r\n    };\r\n    CharSequence.prototype.getStartLineNumber = function (i) {\r\n        return this._lineNumbers[i];\r\n    };\r\n    CharSequence.prototype.getStartColumn = function (i) {\r\n        return this._columns[i];\r\n    };\r\n    CharSequence.prototype.getEndLineNumber = function (i) {\r\n        return this._lineNumbers[i];\r\n    };\r\n    CharSequence.prototype.getEndColumn = function (i) {\r\n        return this._columns[i] + 1;\r\n    };\r\n    return CharSequence;\r\n}());\r\nvar CharChange = /** @class */ (function () {\r\n    function CharChange(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn) {\r\n        this.originalStartLineNumber = originalStartLineNumber;\r\n        this.originalStartColumn = originalStartColumn;\r\n        this.originalEndLineNumber = originalEndLineNumber;\r\n        this.originalEndColumn = originalEndColumn;\r\n        this.modifiedStartLineNumber = modifiedStartLineNumber;\r\n        this.modifiedStartColumn = modifiedStartColumn;\r\n        this.modifiedEndLineNumber = modifiedEndLineNumber;\r\n        this.modifiedEndColumn = modifiedEndColumn;\r\n    }\r\n    CharChange.createFromDiffChange = function (diffChange, originalCharSequence, modifiedCharSequence) {\r\n        var originalStartLineNumber;\r\n        var originalStartColumn;\r\n        var originalEndLineNumber;\r\n        var originalEndColumn;\r\n        var modifiedStartLineNumber;\r\n        var modifiedStartColumn;\r\n        var modifiedEndLineNumber;\r\n        var modifiedEndColumn;\r\n        if (diffChange.originalLength === 0) {\r\n            originalStartLineNumber = 0;\r\n            originalStartColumn = 0;\r\n            originalEndLineNumber = 0;\r\n            originalEndColumn = 0;\r\n        }\r\n        else {\r\n            originalStartLineNumber = originalCharSequence.getStartLineNumber(diffChange.originalStart);\r\n            originalStartColumn = originalCharSequence.getStartColumn(diffChange.originalStart);\r\n            originalEndLineNumber = originalCharSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\r\n            originalEndColumn = originalCharSequence.getEndColumn(diffChange.originalStart + diffChange.originalLength - 1);\r\n        }\r\n        if (diffChange.modifiedLength === 0) {\r\n            modifiedStartLineNumber = 0;\r\n            modifiedStartColumn = 0;\r\n            modifiedEndLineNumber = 0;\r\n            modifiedEndColumn = 0;\r\n        }\r\n        else {\r\n            modifiedStartLineNumber = modifiedCharSequence.getStartLineNumber(diffChange.modifiedStart);\r\n            modifiedStartColumn = modifiedCharSequence.getStartColumn(diffChange.modifiedStart);\r\n            modifiedEndLineNumber = modifiedCharSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\r\n            modifiedEndColumn = modifiedCharSequence.getEndColumn(diffChange.modifiedStart + diffChange.modifiedLength - 1);\r\n        }\r\n        return new CharChange(originalStartLineNumber, originalStartColumn, originalEndLineNumber, originalEndColumn, modifiedStartLineNumber, modifiedStartColumn, modifiedEndLineNumber, modifiedEndColumn);\r\n    };\r\n    return CharChange;\r\n}());\r\nfunction postProcessCharChanges(rawChanges) {\r\n    if (rawChanges.length <= 1) {\r\n        return rawChanges;\r\n    }\r\n    var result = [rawChanges[0]];\r\n    var prevChange = result[0];\r\n    for (var i = 1, len = rawChanges.length; i < len; i++) {\r\n        var currChange = rawChanges[i];\r\n        var originalMatchingLength = currChange.originalStart - (prevChange.originalStart + prevChange.originalLength);\r\n        var modifiedMatchingLength = currChange.modifiedStart - (prevChange.modifiedStart + prevChange.modifiedLength);\r\n        // Both of the above should be equal, but the continueProcessingPredicate may prevent this from being true\r\n        var matchingLength = Math.min(originalMatchingLength, modifiedMatchingLength);\r\n        if (matchingLength < MINIMUM_MATCHING_CHARACTER_LENGTH) {\r\n            // Merge the current change into the previous one\r\n            prevChange.originalLength = (currChange.originalStart + currChange.originalLength) - prevChange.originalStart;\r\n            prevChange.modifiedLength = (currChange.modifiedStart + currChange.modifiedLength) - prevChange.modifiedStart;\r\n        }\r\n        else {\r\n            // Add the current change\r\n            result.push(currChange);\r\n            prevChange = currChange;\r\n        }\r\n    }\r\n    return result;\r\n}\r\nvar LineChange = /** @class */ (function () {\r\n    function LineChange(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges) {\r\n        this.originalStartLineNumber = originalStartLineNumber;\r\n        this.originalEndLineNumber = originalEndLineNumber;\r\n        this.modifiedStartLineNumber = modifiedStartLineNumber;\r\n        this.modifiedEndLineNumber = modifiedEndLineNumber;\r\n        this.charChanges = charChanges;\r\n    }\r\n    LineChange.createFromDiffResult = function (shouldIgnoreTrimWhitespace, diffChange, originalLineSequence, modifiedLineSequence, continueCharDiff, shouldComputeCharChanges, shouldPostProcessCharChanges) {\r\n        var originalStartLineNumber;\r\n        var originalEndLineNumber;\r\n        var modifiedStartLineNumber;\r\n        var modifiedEndLineNumber;\r\n        var charChanges = undefined;\r\n        if (diffChange.originalLength === 0) {\r\n            originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart) - 1;\r\n            originalEndLineNumber = 0;\r\n        }\r\n        else {\r\n            originalStartLineNumber = originalLineSequence.getStartLineNumber(diffChange.originalStart);\r\n            originalEndLineNumber = originalLineSequence.getEndLineNumber(diffChange.originalStart + diffChange.originalLength - 1);\r\n        }\r\n        if (diffChange.modifiedLength === 0) {\r\n            modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart) - 1;\r\n            modifiedEndLineNumber = 0;\r\n        }\r\n        else {\r\n            modifiedStartLineNumber = modifiedLineSequence.getStartLineNumber(diffChange.modifiedStart);\r\n            modifiedEndLineNumber = modifiedLineSequence.getEndLineNumber(diffChange.modifiedStart + diffChange.modifiedLength - 1);\r\n        }\r\n        if (shouldComputeCharChanges && diffChange.originalLength > 0 && diffChange.originalLength < 20 && diffChange.modifiedLength > 0 && diffChange.modifiedLength < 20 && continueCharDiff()) {\r\n            // Compute character changes for diff chunks of at most 20 lines...\r\n            var originalCharSequence = originalLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.originalStart, diffChange.originalStart + diffChange.originalLength - 1);\r\n            var modifiedCharSequence = modifiedLineSequence.createCharSequence(shouldIgnoreTrimWhitespace, diffChange.modifiedStart, diffChange.modifiedStart + diffChange.modifiedLength - 1);\r\n            var rawChanges = computeDiff(originalCharSequence, modifiedCharSequence, continueCharDiff, true).changes;\r\n            if (shouldPostProcessCharChanges) {\r\n                rawChanges = postProcessCharChanges(rawChanges);\r\n            }\r\n            charChanges = [];\r\n            for (var i = 0, length_2 = rawChanges.length; i < length_2; i++) {\r\n                charChanges.push(CharChange.createFromDiffChange(rawChanges[i], originalCharSequence, modifiedCharSequence));\r\n            }\r\n        }\r\n        return new LineChange(originalStartLineNumber, originalEndLineNumber, modifiedStartLineNumber, modifiedEndLineNumber, charChanges);\r\n    };\r\n    return LineChange;\r\n}());\r\nvar DiffComputer = /** @class */ (function () {\r\n    function DiffComputer(originalLines, modifiedLines, opts) {\r\n        this.shouldComputeCharChanges = opts.shouldComputeCharChanges;\r\n        this.shouldPostProcessCharChanges = opts.shouldPostProcessCharChanges;\r\n        this.shouldIgnoreTrimWhitespace = opts.shouldIgnoreTrimWhitespace;\r\n        this.shouldMakePrettyDiff = opts.shouldMakePrettyDiff;\r\n        this.originalLines = originalLines;\r\n        this.modifiedLines = modifiedLines;\r\n        this.original = new LineSequence(originalLines);\r\n        this.modified = new LineSequence(modifiedLines);\r\n        this.continueLineDiff = createContinueProcessingPredicate(opts.maxComputationTime);\r\n        this.continueCharDiff = createContinueProcessingPredicate(opts.maxComputationTime === 0 ? 0 : Math.min(opts.maxComputationTime, 5000)); // never run after 5s for character changes...\r\n    }\r\n    DiffComputer.prototype.computeDiff = function () {\r\n        if (this.original.lines.length === 1 && this.original.lines[0].length === 0) {\r\n            // empty original => fast path\r\n            return {\r\n                quitEarly: false,\r\n                changes: [{\r\n                        originalStartLineNumber: 1,\r\n                        originalEndLineNumber: 1,\r\n                        modifiedStartLineNumber: 1,\r\n                        modifiedEndLineNumber: this.modified.lines.length,\r\n                        charChanges: [{\r\n                                modifiedEndColumn: 0,\r\n                                modifiedEndLineNumber: 0,\r\n                                modifiedStartColumn: 0,\r\n                                modifiedStartLineNumber: 0,\r\n                                originalEndColumn: 0,\r\n                                originalEndLineNumber: 0,\r\n                                originalStartColumn: 0,\r\n                                originalStartLineNumber: 0\r\n                            }]\r\n                    }]\r\n            };\r\n        }\r\n        if (this.modified.lines.length === 1 && this.modified.lines[0].length === 0) {\r\n            // empty modified => fast path\r\n            return {\r\n                quitEarly: false,\r\n                changes: [{\r\n                        originalStartLineNumber: 1,\r\n                        originalEndLineNumber: this.original.lines.length,\r\n                        modifiedStartLineNumber: 1,\r\n                        modifiedEndLineNumber: 1,\r\n                        charChanges: [{\r\n                                modifiedEndColumn: 0,\r\n                                modifiedEndLineNumber: 0,\r\n                                modifiedStartColumn: 0,\r\n                                modifiedStartLineNumber: 0,\r\n                                originalEndColumn: 0,\r\n                                originalEndLineNumber: 0,\r\n                                originalStartColumn: 0,\r\n                                originalStartLineNumber: 0\r\n                            }]\r\n                    }]\r\n            };\r\n        }\r\n        var diffResult = computeDiff(this.original, this.modified, this.continueLineDiff, this.shouldMakePrettyDiff);\r\n        var rawChanges = diffResult.changes;\r\n        var quitEarly = diffResult.quitEarly;\r\n        // The diff is always computed with ignoring trim whitespace\r\n        // This ensures we get the prettiest diff\r\n        if (this.shouldIgnoreTrimWhitespace) {\r\n            var lineChanges = [];\r\n            for (var i = 0, length_3 = rawChanges.length; i < length_3; i++) {\r\n                lineChanges.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, rawChanges[i], this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\r\n            }\r\n            return {\r\n                quitEarly: quitEarly,\r\n                changes: lineChanges\r\n            };\r\n        }\r\n        // Need to post-process and introduce changes where the trim whitespace is different\r\n        // Note that we are looping starting at -1 to also cover the lines before the first change\r\n        var result = [];\r\n        var originalLineIndex = 0;\r\n        var modifiedLineIndex = 0;\r\n        for (var i = -1 /* !!!! */, len = rawChanges.length; i < len; i++) {\r\n            var nextChange = (i + 1 < len ? rawChanges[i + 1] : null);\r\n            var originalStop = (nextChange ? nextChange.originalStart : this.originalLines.length);\r\n            var modifiedStop = (nextChange ? nextChange.modifiedStart : this.modifiedLines.length);\r\n            while (originalLineIndex < originalStop && modifiedLineIndex < modifiedStop) {\r\n                var originalLine = this.originalLines[originalLineIndex];\r\n                var modifiedLine = this.modifiedLines[modifiedLineIndex];\r\n                if (originalLine !== modifiedLine) {\r\n                    // These lines differ only in trim whitespace\r\n                    // Check the leading whitespace\r\n                    {\r\n                        var originalStartColumn = getFirstNonBlankColumn(originalLine, 1);\r\n                        var modifiedStartColumn = getFirstNonBlankColumn(modifiedLine, 1);\r\n                        while (originalStartColumn > 1 && modifiedStartColumn > 1) {\r\n                            var originalChar = originalLine.charCodeAt(originalStartColumn - 2);\r\n                            var modifiedChar = modifiedLine.charCodeAt(modifiedStartColumn - 2);\r\n                            if (originalChar !== modifiedChar) {\r\n                                break;\r\n                            }\r\n                            originalStartColumn--;\r\n                            modifiedStartColumn--;\r\n                        }\r\n                        if (originalStartColumn > 1 || modifiedStartColumn > 1) {\r\n                            this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, 1, originalStartColumn, modifiedLineIndex + 1, 1, modifiedStartColumn);\r\n                        }\r\n                    }\r\n                    // Check the trailing whitespace\r\n                    {\r\n                        var originalEndColumn = getLastNonBlankColumn(originalLine, 1);\r\n                        var modifiedEndColumn = getLastNonBlankColumn(modifiedLine, 1);\r\n                        var originalMaxColumn = originalLine.length + 1;\r\n                        var modifiedMaxColumn = modifiedLine.length + 1;\r\n                        while (originalEndColumn < originalMaxColumn && modifiedEndColumn < modifiedMaxColumn) {\r\n                            var originalChar = originalLine.charCodeAt(originalEndColumn - 1);\r\n                            var modifiedChar = originalLine.charCodeAt(modifiedEndColumn - 1);\r\n                            if (originalChar !== modifiedChar) {\r\n                                break;\r\n                            }\r\n                            originalEndColumn++;\r\n                            modifiedEndColumn++;\r\n                        }\r\n                        if (originalEndColumn < originalMaxColumn || modifiedEndColumn < modifiedMaxColumn) {\r\n                            this._pushTrimWhitespaceCharChange(result, originalLineIndex + 1, originalEndColumn, originalMaxColumn, modifiedLineIndex + 1, modifiedEndColumn, modifiedMaxColumn);\r\n                        }\r\n                    }\r\n                }\r\n                originalLineIndex++;\r\n                modifiedLineIndex++;\r\n            }\r\n            if (nextChange) {\r\n                // Emit the actual change\r\n                result.push(LineChange.createFromDiffResult(this.shouldIgnoreTrimWhitespace, nextChange, this.original, this.modified, this.continueCharDiff, this.shouldComputeCharChanges, this.shouldPostProcessCharChanges));\r\n                originalLineIndex += nextChange.originalLength;\r\n                modifiedLineIndex += nextChange.modifiedLength;\r\n            }\r\n        }\r\n        return {\r\n            quitEarly: quitEarly,\r\n            changes: result\r\n        };\r\n    };\r\n    DiffComputer.prototype._pushTrimWhitespaceCharChange = function (result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\r\n        if (this._mergeTrimWhitespaceCharChange(result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn)) {\r\n            // Merged into previous\r\n            return;\r\n        }\r\n        var charChanges = undefined;\r\n        if (this.shouldComputeCharChanges) {\r\n            charChanges = [new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn)];\r\n        }\r\n        result.push(new LineChange(originalLineNumber, originalLineNumber, modifiedLineNumber, modifiedLineNumber, charChanges));\r\n    };\r\n    DiffComputer.prototype._mergeTrimWhitespaceCharChange = function (result, originalLineNumber, originalStartColumn, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedEndColumn) {\r\n        var len = result.length;\r\n        if (len === 0) {\r\n            return false;\r\n        }\r\n        var prevChange = result[len - 1];\r\n        if (prevChange.originalEndLineNumber === 0 || prevChange.modifiedEndLineNumber === 0) {\r\n            // Don't merge with inserts/deletes\r\n            return false;\r\n        }\r\n        if (prevChange.originalEndLineNumber + 1 === originalLineNumber && prevChange.modifiedEndLineNumber + 1 === modifiedLineNumber) {\r\n            prevChange.originalEndLineNumber = originalLineNumber;\r\n            prevChange.modifiedEndLineNumber = modifiedLineNumber;\r\n            if (this.shouldComputeCharChanges && prevChange.charChanges) {\r\n                prevChange.charChanges.push(new CharChange(originalLineNumber, originalStartColumn, originalLineNumber, originalEndColumn, modifiedLineNumber, modifiedStartColumn, modifiedLineNumber, modifiedEndColumn));\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    return DiffComputer;\r\n}());\r\nexport { DiffComputer };\r\nfunction getFirstNonBlankColumn(txt, defaultValue) {\r\n    var r = strings.firstNonWhitespaceIndex(txt);\r\n    if (r === -1) {\r\n        return defaultValue;\r\n    }\r\n    return r + 1;\r\n}\r\nfunction getLastNonBlankColumn(txt, defaultValue) {\r\n    var r = strings.lastNonWhitespaceIndex(txt);\r\n    if (r === -1) {\r\n        return defaultValue;\r\n    }\r\n    return r + 2;\r\n}\r\nfunction createContinueProcessingPredicate(maximumRuntime) {\r\n    if (maximumRuntime === 0) {\r\n        return function () { return true; };\r\n    }\r\n    var startTime = Date.now();\r\n    return function () {\r\n        return Date.now() - startTime < maximumRuntime;\r\n    };\r\n}\r\n","/**\r\n * @internal\r\n */\r\nexport function isThemeColor(o) {\r\n    return o && typeof o.id === 'string';\r\n}\r\n/**\r\n * The type of the `IEditor`.\r\n */\r\nexport var EditorType = {\r\n    ICodeEditor: 'vs.editor.ICodeEditor',\r\n    IDiffEditor: 'vs.editor.IDiffEditor'\r\n};\r\n/**\r\n * Built-in commands.\r\n * @internal\r\n */\r\nexport var Handler = {\r\n    ExecuteCommand: 'executeCommand',\r\n    ExecuteCommands: 'executeCommands',\r\n    Type: 'type',\r\n    ReplacePreviousChar: 'replacePreviousChar',\r\n    CompositionStart: 'compositionStart',\r\n    CompositionEnd: 'compositionEnd',\r\n    Paste: 'paste',\r\n    Cut: 'cut',\r\n    Undo: 'undo',\r\n    Redo: 'redo',\r\n};\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { RawContextKey } from '../../platform/contextkey/common/contextkey.js';\r\nexport var EditorContextKeys;\r\n(function (EditorContextKeys) {\r\n    EditorContextKeys.editorSimpleInput = new RawContextKey('editorSimpleInput', false);\r\n    /**\r\n     * A context key that is set when the editor's text has focus (cursor is blinking).\r\n     */\r\n    EditorContextKeys.editorTextFocus = new RawContextKey('editorTextFocus', false);\r\n    /**\r\n     * A context key that is set when the editor's text or an editor's widget has focus.\r\n     */\r\n    EditorContextKeys.focus = new RawContextKey('editorFocus', false);\r\n    /**\r\n     * A context key that is set when any editor input has focus (regular editor, repl input...).\r\n     */\r\n    EditorContextKeys.textInputFocus = new RawContextKey('textInputFocus', false);\r\n    EditorContextKeys.readOnly = new RawContextKey('editorReadonly', false);\r\n    EditorContextKeys.writable = EditorContextKeys.readOnly.toNegated();\r\n    EditorContextKeys.hasNonEmptySelection = new RawContextKey('editorHasSelection', false);\r\n    EditorContextKeys.hasOnlyEmptySelection = EditorContextKeys.hasNonEmptySelection.toNegated();\r\n    EditorContextKeys.hasMultipleSelections = new RawContextKey('editorHasMultipleSelections', false);\r\n    EditorContextKeys.hasSingleSelection = EditorContextKeys.hasMultipleSelections.toNegated();\r\n    EditorContextKeys.tabMovesFocus = new RawContextKey('editorTabMovesFocus', false);\r\n    EditorContextKeys.tabDoesNotMoveFocus = EditorContextKeys.tabMovesFocus.toNegated();\r\n    EditorContextKeys.isInEmbeddedEditor = new RawContextKey('isInEmbeddedEditor', false);\r\n    EditorContextKeys.canUndo = new RawContextKey('canUndo', false);\r\n    EditorContextKeys.canRedo = new RawContextKey('canRedo', false);\r\n    // -- mode context keys\r\n    EditorContextKeys.languageId = new RawContextKey('editorLangId', '');\r\n    EditorContextKeys.hasCompletionItemProvider = new RawContextKey('editorHasCompletionItemProvider', false);\r\n    EditorContextKeys.hasCodeActionsProvider = new RawContextKey('editorHasCodeActionsProvider', false);\r\n    EditorContextKeys.hasCodeLensProvider = new RawContextKey('editorHasCodeLensProvider', false);\r\n    EditorContextKeys.hasDefinitionProvider = new RawContextKey('editorHasDefinitionProvider', false);\r\n    EditorContextKeys.hasDeclarationProvider = new RawContextKey('editorHasDeclarationProvider', false);\r\n    EditorContextKeys.hasImplementationProvider = new RawContextKey('editorHasImplementationProvider', false);\r\n    EditorContextKeys.hasTypeDefinitionProvider = new RawContextKey('editorHasTypeDefinitionProvider', false);\r\n    EditorContextKeys.hasHoverProvider = new RawContextKey('editorHasHoverProvider', false);\r\n    EditorContextKeys.hasDocumentHighlightProvider = new RawContextKey('editorHasDocumentHighlightProvider', false);\r\n    EditorContextKeys.hasDocumentSymbolProvider = new RawContextKey('editorHasDocumentSymbolProvider', false);\r\n    EditorContextKeys.hasReferenceProvider = new RawContextKey('editorHasReferenceProvider', false);\r\n    EditorContextKeys.hasRenameProvider = new RawContextKey('editorHasRenameProvider', false);\r\n    EditorContextKeys.hasSignatureHelpProvider = new RawContextKey('editorHasSignatureHelpProvider', false);\r\n    // -- mode context keys: formatting\r\n    EditorContextKeys.hasDocumentFormattingProvider = new RawContextKey('editorHasDocumentFormattingProvider', false);\r\n    EditorContextKeys.hasDocumentSelectionFormattingProvider = new RawContextKey('editorHasDocumentSelectionFormattingProvider', false);\r\n    EditorContextKeys.hasMultipleDocumentFormattingProvider = new RawContextKey('editorHasMultipleDocumentFormattingProvider', false);\r\n    EditorContextKeys.hasMultipleDocumentSelectionFormattingProvider = new RawContextKey('editorHasMultipleDocumentSelectionFormattingProvider', false);\r\n})(EditorContextKeys || (EditorContextKeys = {}));\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar InternalEditorAction = /** @class */ (function () {\r\n    function InternalEditorAction(id, label, alias, precondition, run, contextKeyService) {\r\n        this.id = id;\r\n        this.label = label;\r\n        this.alias = alias;\r\n        this._precondition = precondition;\r\n        this._run = run;\r\n        this._contextKeyService = contextKeyService;\r\n    }\r\n    InternalEditorAction.prototype.isSupported = function () {\r\n        return this._contextKeyService.contextMatchesRules(this._precondition);\r\n    };\r\n    InternalEditorAction.prototype.run = function () {\r\n        if (!this.isSupported()) {\r\n            return Promise.resolve(undefined);\r\n        }\r\n        var r = this._run();\r\n        return r ? r : Promise.resolve(undefined);\r\n    };\r\n    return InternalEditorAction;\r\n}());\r\nexport { InternalEditorAction };\r\n"],"sourceRoot":""}