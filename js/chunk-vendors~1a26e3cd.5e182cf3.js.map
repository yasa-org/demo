{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/editor/common/viewModel/splitLinesCollection.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/viewModel/prefixSumComputer.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/viewModel/monospaceLineBreaksComputer.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelDecorations.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelImpl.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModel.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewEventHandler.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/viewModel/minimapTokensColorTracker.js"],"names":["OutputPosition","outputLineIndex","outputOffset","this","LineBreakData","breakOffsets","breakOffsetsVisibleColumn","wrappedTextIndentLength","getInputOffsetOfOutputPosition","getOutputPositionOfInputOffset","inputOffset","low","high","length","mid","midStart","midStop","CoordinatesConverter","lines","_lines","prototype","convertViewPositionToModelPosition","viewPosition","lineNumber","column","convertViewRangeToModelRange","viewRange","validateViewPosition","expectedModelPosition","validateViewRange","expectedModelRange","convertModelPositionToViewPosition","modelPosition","convertModelRangeToViewRange","modelRange","modelPositionIsVisible","LineNumberMapper","viewLineCounts","_counts","_isValid","_validEndIndex","_modelToView","_viewToModel","_invalidate","index","Math","min","_ensureValid","i","len","viewLineCount","viewLinesAbove","j","changeValue","value","removeValues","start","deleteCount","splice","insertValues","insertIndex","insertArr","getTotalValue","getAccumulatedValue","getIndexOf","accumulatedValue","modelLineIndex","SplitLinesCollection","model","domLineBreaksComputerFactory","monospaceLineBreaksComputerFactory","fontInfo","tabSize","wrappingStrategy","wrappingColumn","wrappingIndent","_validModelVersionId","_domLineBreaksComputerFactory","_monospaceLineBreaksComputerFactory","_constructLines","dispose","hiddenAreasIds","deltaDecorations","createCoordinatesConverter","resetHiddenAreas","previousLineBreaks","_this","linesContent","getLinesContent","lineCount","lineBreaksComputer","createLineBreaksComputer","addRequest","linesBreaks","finalize","values","hiddenAreas","map","areaId","getDecorationRange","sort","compareRangesUsingStarts","hiddenAreaStart","hiddenAreaEnd","hiddenAreaIdx","nextLineNumberToUpdateHiddenArea","startLineNumber","endLineNumber","isInHiddenArea","line","createSplitLine","getViewLineCount","getVersionId","prefixSumComputer","getHiddenAreas","decId","_reduceRanges","_ranges","ranges","r","validateRange","result","currentRangeStart","currentRangeEnd","range","push","setHiddenAreas","newRanges","oldRanges","hasDifference","equalsRange","newDecorations","_i","newRanges_1","newRange","options","EMPTY","hasVisibleLine","lineChanged","isVisible","setVisible","newOutputLineCount","modelLineNumber","_modelColumn","setTabSize","newTabSize","setWrappingSettings","equalFontInfo","equals","equalWrappingStrategy","equalWrappingColumn","equalWrappingIndent","onlyWrappingColumnChanged","getLineBreakData","lineBreaksComputerFactory","onModelFlushed","onModelLinesDeleted","versionId","fromLineNumber","toLineNumber","outputFromLineNumber","outputToLineNumber","onModelLinesInserted","_toLineNumber","lineBreaks","testPosition","hiddenAreas_1","hiddenArea","containsPosition","totalOutputLineCount","insertLines","insertPrefixSumValues","outputLineCount","slice","concat","onModelLineChanged","lineBreakData","lineIndex","oldOutputLineCount","lineMappingChanged","changeFrom","changeTo","insertFrom","insertTo","deleteFrom","deleteTo","viewLinesChangedEvent","viewLinesInsertedEvent","viewLinesDeletedEvent","acceptVersionId","_toValidViewLineNumber","viewLineNumber","getActiveIndentGuide","minLineNumber","maxLineNumber","getViewLineMinColumn","modelMinPosition","modelMaxPosition","viewStartPosition","viewEndPosition","getLineMaxColumn","indent","getViewLinesIndentGuides","viewStartLineNumber","viewEndLineNumber","modelStart","modelEnd","getViewLineMaxColumn","resultRepeatCount","resultRepeatOption","modelStartLineIndex","modelEndLineIndex","reqStart","viewLineStartIndex","getViewLineNumberOfModelPosition","viewLineEndIndex","count","option","getLinesIndentGuides","viewIndents","Array","currIndex","blockAtIndex","getViewLineContent","remainder","getViewLineLength","getViewLineData","getViewLinesData","needed","startModelLineIndex","startRemainder","getLineCount","fromViewLineIndex","remainingViewLineCount","lastLine","toViewLineIndex","viewColumn","minColumn","maxColumn","computedModelColumn","getModelColumnOfViewPosition","computedModelPosition","validatePosition","validViewStart","startColumn","getStartPosition","validViewEnd","endColumn","getEndPosition","inputColumn","end","_modelLineNumber","validPosition","inputLineNumber","lineIndexChanged","deltaLineNumber","getViewPositionOfModelPosition","_getViewLineNumberForModelPosition","deltaLineNumber_1","getAllOverviewRulerDecorations","ownerId","filterOutValidation","theme","decorations","getOverviewRulerDecorations","OverviewRulerDecorations","decorations_1","decoration","opts","overviewRuler","lane","position","color","getColor","accept","getDecorationsInRange","maxLineColumn","a","b","res","id","finalResult","finalResultLen","prevDecId","result_1","dec","VisibleIdentitySplitLine","InvisibleIdentitySplitLine","INSTANCE","_outputLineIndex","getLineContent","getLineLength","getLineMinColumn","lineTokens","getLineTokens","lineContent","inflate","_fromOuputLineIndex","_toOutputLineIndex","globalStartIndex","outputColumn","_inputColumn","_model","Error","_globalStartIndex","_needed","_result","_outputColumn","_deltaLineNumber","SplitLine","_lineBreakData","_isVisible","getInputStartOffsetOfOutputLineIndex","getInputEndOffsetOfOutputLineIndex","startOffset","endOffset","getValueInRange","spaces","continuesWithWrappedLine","deltaStartIndex","startVisibleColumn","sliceAndInflate","fromOuputLineIndex","toOutputLineIndex","globalIndex","adjustedColumn","_spaces","_makeSpaces","join","IdentityCoordinatesConverter","_validPosition","pos","_validRange","_viewPosition","_viewRange","IdentityLinesCollection","_newTabSize","_fontInfo","_wrappingStrategy","_wrappingColumn","_wrappingIndent","lineText","previousLineBreakData","_versionId","_minLineNumber","_maxLineNumber","max","idx","decorations_2","Object","create","prev","prevLane","prevEndLineNumber","PrefixSumIndexOfResult","PrefixSumComputer","prefixSum","Uint32Array","prefixSumValidIndex","Int32Array","oldValues","oldPrefixSum","insertValuesLen","set","subarray","startIndex","cnt","maxCnt","_getAccumulatedValue","floor","__extends","extendStatics","d","setPrototypeOf","__proto__","p","hasOwnProperty","__","constructor","WrappingCharacterClassifier","_super","BREAK_BEFORE","BREAK_AFTER","call","charCodeAt","get","charCode","_asciiMap","_map","_defaultValue","arrPool1","arrPool2","MonospaceLineBreaksComputerFactory","breakBeforeChars","breakAfterChars","classifier","requests","previousBreakingData","columnsForFullWidthChar","typicalFullwidthCharacterWidth","typicalHalfwidthCharacterWidth","createLineBreaksFromPreviousLineBreaks","createLineBreaks","firstLineBreakColumn","prevBreakingOffsets","prevBreakingOffsetsVisibleColumn","computeWrappedTextIndentLength","wrappedLineBreakColumn","breakingOffsets","breakingOffsetsVisibleColumn","breakingOffsetsCount","breakingColumn","prevLen","prevIndex","bestDistance","abs","distance","prevBreakOffset","prevBreakoffsetVisibleColumn","breakOffset","breakOffsetVisibleColumn","forcedBreakOffset","forcedBreakOffsetVisibleColumn","visibleColumn","prevCharCode","prevCharCodeClass","entireLineFits","charStartOffset","charCodeClass","charWidth","computeCharWidth","canBreak","hitATabCharacter","prevCharWidth","remainingWidthOfNextLine","charCodeAtForcedBreakOffset","tabCharacterWidth","firstNonWhitespaceIndex","numberOfAdditionalTabs","ViewModelDecorations","editorId","configuration","linesCollection","coordinatesConverter","_linesCollection","_coordinatesConverter","_decorationsCache","_cachedModelDecorationsResolver","_cachedModelDecorationsResolverViewRange","_clearCachedModelDecorationsResolver","reset","onModelDecorationsChanged","onLineMappingChanged","_getOrCreateViewModelDecoration","modelDecoration","isWholeLine","getDecorationsViewportData","cacheIsValid","_getDecorationsViewportData","viewportRange","modelDecorations","decorationsInViewport","decorationsInViewportLen","inlineDecorations","decorationOptions","viewModelDecoration","inlineClassName","inlineDecoration","inlineClassNameAffectsLetterSpacing","intersectedStartLineNumber","intersectedEndLineNumber","beforeContentClassName","afterContentClassName","USE_IDENTITY_LINES_COLLECTION","ViewModel","scheduleAtNextAnimationFrame","_tokenizeViewportSoon","_register","tokenizeViewport","hasFocus","viewportStartLine","viewportStartLineTrackedRange","viewportStartLineDelta","isTooLargeForTokenization","wrappingInfo","getOptions","viewLayout","onDidScroll","e","scrollTopChanged","schedule","eventsCollector","_beginEmit","emit","viewEvents","_endEmit","onDidContentSizeChange","_registerModelEvents","onDidChange","_onConfigurationChanged","getInstance","invalidateMinimapColorCache","_setTrackedRange","linesViewportData","getLinesViewportData","startPosition","endPosition","setHasFocus","previousViewportStartModelPosition","previousViewportStartViewPosition","restorePreviousViewportStart","onFlushed","getCurrentScrollTop","hasChanged","onConfigurationChanged","viewPositionTop","getVerticalOffsetForLineNumber","setScrollPositionNow","scrollTop","onDidChangeRawContentFast","hadOtherModelChange","hadModelLineChangeThatChangedLineMapping","changes","changes_1","change","changeType","_a","_b","detail","lineBreaksOffset","_c","changes_2","linesDeletedEvent","onLinesDeleted","insertedLineBreaks","linesInsertedEvent","onLinesInserted","changedLineBreakData","_d","linesChangedEvent","onHeightMaybeChanged","setMaxLineNumber","getAttachedEditorCount","_getTrackedRange","onDidChangeTokens","viewRanges","lenJ","tokenizationSupportChanged","onDidChangeLanguageConfiguration","onDidChangeOptions","onDidChangeDecorations","getVisibleRanges","visibleViewRange","getCompletelyVisibleViewRange","visibleRange","resultLen","hiddenStartLineNumber","hiddenEndLineNumber","partialData","startViewLineNumber","completelyVisibleStartLineNumber","endViewLineNumber","completelyVisibleEndLineNumber","getCompletelyVisibleViewRangeAtScrollTop","getLinesViewportDataAtScrollTop","saveState","compatViewState","firstViewLineNumber","getLineNumberAtVerticalOffset","firstPosition","firstPositionDeltaTop","scrollLeft","reduceRestoreState","state","_reduceRestoreStateCompatibility","scrollTopWithoutViewZones","getTabSize","setViewport","centeredLineNumber","viewportStartLineTop","getLineFirstNonWhitespaceColumn","strings","getLineLastNonWhitespaceColumn","getDecorationsInViewport","getViewLineRenderingData","mightContainRTL","mightContainNonBasicASCII","lineData","allInlineDecorations","content","tokens","getMinimapLinesRenderingData","invalidateOverviewRulerColorCache","invalidateCachedColor","getAllDecorations","minimap","eol","getModelLineMaxColumn","validateModelPosition","validateModelRange","deduceModelPositionRelativeToViewPosition","viewAnchorPosition","deltaOffset","lineFeedCnt","modelAnchor","getEOL","modelAnchorOffset","getOffsetAt","resultOffset","getPositionAt","getPlainTextToCopy","modelRanges","emptySelectionClipboard","forceCRLF","newLineCharacter","hasEmptyRange","hasNonEmptyRange","modelRanges_1","isEmpty","modelLineNumbers","result_2","prevModelLineNumber","modelRanges_2","modelRanges_3","getRichTextToCopy","languageId","getLanguageIdentifier","colorMap","_getColorMap","fontFamily","mode","language","html","fontWeight","fontSize","lineHeight","_getHTMLToCopy","platform","getColorMap","Format","CSS","formatHex","Viewport","top","left","width","height","MinimapLinesRenderingData","data","ViewLineData","ViewLineRenderingData","isBasicASCII","containsRTL","InlineDecoration","type","ViewModelDecoration","ViewEventHandler","_shouldRender","shouldRender","forceShouldRender","setShouldRender","onDidRender","onContentSizeChanged","onCursorStateChanged","onDecorationsChanged","onFocusChanged","onLanguageConfigurationChanged","onLinesChanged","onRevealRangeRequest","onScrollChanged","onThemeChanged","onTokensChanged","onTokensColorsChanged","onZonesChanged","handleEvents","events","console","info","MinimapTokensColorTracker","_onDidChange","event","_updateColorMap","changedColorMap","_INSTANCE","_colors","Empty","_backgroundIsLight","colorId","source","rgba","g","round","backgroundLuminosity","getRelativeLuminance","fire","undefined","backgroundIsLight"],"mappings":"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","file":"js/chunk-vendors~1a26e3cd.5e182cf3.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as arrays from '../../../base/common/arrays.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nimport { ModelDecorationOptions } from '../model/textModel.js';\r\nimport * as viewEvents from '../view/viewEvents.js';\r\nimport { PrefixSumIndexOfResult } from './prefixSumComputer.js';\r\nimport { ViewLineData } from './viewModel.js';\r\nvar OutputPosition = /** @class */ (function () {\r\n    function OutputPosition(outputLineIndex, outputOffset) {\r\n        this.outputLineIndex = outputLineIndex;\r\n        this.outputOffset = outputOffset;\r\n    }\r\n    return OutputPosition;\r\n}());\r\nexport { OutputPosition };\r\nvar LineBreakData = /** @class */ (function () {\r\n    function LineBreakData(breakOffsets, breakOffsetsVisibleColumn, wrappedTextIndentLength) {\r\n        this.breakOffsets = breakOffsets;\r\n        this.breakOffsetsVisibleColumn = breakOffsetsVisibleColumn;\r\n        this.wrappedTextIndentLength = wrappedTextIndentLength;\r\n    }\r\n    LineBreakData.getInputOffsetOfOutputPosition = function (breakOffsets, outputLineIndex, outputOffset) {\r\n        if (outputLineIndex === 0) {\r\n            return outputOffset;\r\n        }\r\n        else {\r\n            return breakOffsets[outputLineIndex - 1] + outputOffset;\r\n        }\r\n    };\r\n    LineBreakData.getOutputPositionOfInputOffset = function (breakOffsets, inputOffset) {\r\n        var low = 0;\r\n        var high = breakOffsets.length - 1;\r\n        var mid = 0;\r\n        var midStart = 0;\r\n        while (low <= high) {\r\n            mid = low + ((high - low) / 2) | 0;\r\n            var midStop = breakOffsets[mid];\r\n            midStart = mid > 0 ? breakOffsets[mid - 1] : 0;\r\n            if (inputOffset < midStart) {\r\n                high = mid - 1;\r\n            }\r\n            else if (inputOffset >= midStop) {\r\n                low = mid + 1;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return new OutputPosition(mid, inputOffset - midStart);\r\n    };\r\n    return LineBreakData;\r\n}());\r\nexport { LineBreakData };\r\nvar CoordinatesConverter = /** @class */ (function () {\r\n    function CoordinatesConverter(lines) {\r\n        this._lines = lines;\r\n    }\r\n    // View -> Model conversion and related methods\r\n    CoordinatesConverter.prototype.convertViewPositionToModelPosition = function (viewPosition) {\r\n        return this._lines.convertViewPositionToModelPosition(viewPosition.lineNumber, viewPosition.column);\r\n    };\r\n    CoordinatesConverter.prototype.convertViewRangeToModelRange = function (viewRange) {\r\n        return this._lines.convertViewRangeToModelRange(viewRange);\r\n    };\r\n    CoordinatesConverter.prototype.validateViewPosition = function (viewPosition, expectedModelPosition) {\r\n        return this._lines.validateViewPosition(viewPosition.lineNumber, viewPosition.column, expectedModelPosition);\r\n    };\r\n    CoordinatesConverter.prototype.validateViewRange = function (viewRange, expectedModelRange) {\r\n        return this._lines.validateViewRange(viewRange, expectedModelRange);\r\n    };\r\n    // Model -> View conversion and related methods\r\n    CoordinatesConverter.prototype.convertModelPositionToViewPosition = function (modelPosition) {\r\n        return this._lines.convertModelPositionToViewPosition(modelPosition.lineNumber, modelPosition.column);\r\n    };\r\n    CoordinatesConverter.prototype.convertModelRangeToViewRange = function (modelRange) {\r\n        return this._lines.convertModelRangeToViewRange(modelRange);\r\n    };\r\n    CoordinatesConverter.prototype.modelPositionIsVisible = function (modelPosition) {\r\n        return this._lines.modelPositionIsVisible(modelPosition.lineNumber, modelPosition.column);\r\n    };\r\n    return CoordinatesConverter;\r\n}());\r\nexport { CoordinatesConverter };\r\nvar LineNumberMapper = /** @class */ (function () {\r\n    function LineNumberMapper(viewLineCounts) {\r\n        this._counts = viewLineCounts;\r\n        this._isValid = false;\r\n        this._validEndIndex = -1;\r\n        this._modelToView = [];\r\n        this._viewToModel = [];\r\n    }\r\n    LineNumberMapper.prototype._invalidate = function (index) {\r\n        this._isValid = false;\r\n        this._validEndIndex = Math.min(this._validEndIndex, index - 1);\r\n    };\r\n    LineNumberMapper.prototype._ensureValid = function () {\r\n        if (this._isValid) {\r\n            return;\r\n        }\r\n        for (var i = this._validEndIndex + 1, len = this._counts.length; i < len; i++) {\r\n            var viewLineCount = this._counts[i];\r\n            var viewLinesAbove = (i > 0 ? this._modelToView[i - 1] : 0);\r\n            this._modelToView[i] = viewLinesAbove + viewLineCount;\r\n            for (var j = 0; j < viewLineCount; j++) {\r\n                this._viewToModel[viewLinesAbove + j] = i;\r\n            }\r\n        }\r\n        // trim things\r\n        this._modelToView.length = this._counts.length;\r\n        this._viewToModel.length = this._modelToView[this._modelToView.length - 1];\r\n        // mark as valid\r\n        this._isValid = true;\r\n        this._validEndIndex = this._counts.length - 1;\r\n    };\r\n    LineNumberMapper.prototype.changeValue = function (index, value) {\r\n        if (this._counts[index] === value) {\r\n            // no change\r\n            return;\r\n        }\r\n        this._counts[index] = value;\r\n        this._invalidate(index);\r\n    };\r\n    LineNumberMapper.prototype.removeValues = function (start, deleteCount) {\r\n        this._counts.splice(start, deleteCount);\r\n        this._invalidate(start);\r\n    };\r\n    LineNumberMapper.prototype.insertValues = function (insertIndex, insertArr) {\r\n        this._counts = arrays.arrayInsert(this._counts, insertIndex, insertArr);\r\n        this._invalidate(insertIndex);\r\n    };\r\n    LineNumberMapper.prototype.getTotalValue = function () {\r\n        this._ensureValid();\r\n        return this._viewToModel.length;\r\n    };\r\n    LineNumberMapper.prototype.getAccumulatedValue = function (index) {\r\n        this._ensureValid();\r\n        return this._modelToView[index];\r\n    };\r\n    LineNumberMapper.prototype.getIndexOf = function (accumulatedValue) {\r\n        this._ensureValid();\r\n        var modelLineIndex = this._viewToModel[accumulatedValue];\r\n        var viewLinesAbove = (modelLineIndex > 0 ? this._modelToView[modelLineIndex - 1] : 0);\r\n        return new PrefixSumIndexOfResult(modelLineIndex, accumulatedValue - viewLinesAbove);\r\n    };\r\n    return LineNumberMapper;\r\n}());\r\nvar SplitLinesCollection = /** @class */ (function () {\r\n    function SplitLinesCollection(model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, tabSize, wrappingStrategy, wrappingColumn, wrappingIndent) {\r\n        this.model = model;\r\n        this._validModelVersionId = -1;\r\n        this._domLineBreaksComputerFactory = domLineBreaksComputerFactory;\r\n        this._monospaceLineBreaksComputerFactory = monospaceLineBreaksComputerFactory;\r\n        this.fontInfo = fontInfo;\r\n        this.tabSize = tabSize;\r\n        this.wrappingStrategy = wrappingStrategy;\r\n        this.wrappingColumn = wrappingColumn;\r\n        this.wrappingIndent = wrappingIndent;\r\n        this._constructLines(/*resetHiddenAreas*/ true, null);\r\n    }\r\n    SplitLinesCollection.prototype.dispose = function () {\r\n        this.hiddenAreasIds = this.model.deltaDecorations(this.hiddenAreasIds, []);\r\n    };\r\n    SplitLinesCollection.prototype.createCoordinatesConverter = function () {\r\n        return new CoordinatesConverter(this);\r\n    };\r\n    SplitLinesCollection.prototype._constructLines = function (resetHiddenAreas, previousLineBreaks) {\r\n        var _this = this;\r\n        this.lines = [];\r\n        if (resetHiddenAreas) {\r\n            this.hiddenAreasIds = [];\r\n        }\r\n        var linesContent = this.model.getLinesContent();\r\n        var lineCount = linesContent.length;\r\n        var lineBreaksComputer = this.createLineBreaksComputer();\r\n        for (var i = 0; i < lineCount; i++) {\r\n            lineBreaksComputer.addRequest(linesContent[i], previousLineBreaks ? previousLineBreaks[i] : null);\r\n        }\r\n        var linesBreaks = lineBreaksComputer.finalize();\r\n        var values = [];\r\n        var hiddenAreas = this.hiddenAreasIds.map(function (areaId) { return _this.model.getDecorationRange(areaId); }).sort(Range.compareRangesUsingStarts);\r\n        var hiddenAreaStart = 1, hiddenAreaEnd = 0;\r\n        var hiddenAreaIdx = -1;\r\n        var nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\r\n        for (var i = 0; i < lineCount; i++) {\r\n            var lineNumber = i + 1;\r\n            if (lineNumber === nextLineNumberToUpdateHiddenArea) {\r\n                hiddenAreaIdx++;\r\n                hiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\r\n                hiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\r\n                nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\r\n            }\r\n            var isInHiddenArea = (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd);\r\n            var line = createSplitLine(linesBreaks[i], !isInHiddenArea);\r\n            values[i] = line.getViewLineCount();\r\n            this.lines[i] = line;\r\n        }\r\n        this._validModelVersionId = this.model.getVersionId();\r\n        this.prefixSumComputer = new LineNumberMapper(values);\r\n    };\r\n    SplitLinesCollection.prototype.getHiddenAreas = function () {\r\n        var _this = this;\r\n        return this.hiddenAreasIds.map(function (decId) {\r\n            return _this.model.getDecorationRange(decId);\r\n        });\r\n    };\r\n    SplitLinesCollection.prototype._reduceRanges = function (_ranges) {\r\n        var _this = this;\r\n        if (_ranges.length === 0) {\r\n            return [];\r\n        }\r\n        var ranges = _ranges.map(function (r) { return _this.model.validateRange(r); }).sort(Range.compareRangesUsingStarts);\r\n        var result = [];\r\n        var currentRangeStart = ranges[0].startLineNumber;\r\n        var currentRangeEnd = ranges[0].endLineNumber;\r\n        for (var i = 1, len = ranges.length; i < len; i++) {\r\n            var range = ranges[i];\r\n            if (range.startLineNumber > currentRangeEnd + 1) {\r\n                result.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\r\n                currentRangeStart = range.startLineNumber;\r\n                currentRangeEnd = range.endLineNumber;\r\n            }\r\n            else if (range.endLineNumber > currentRangeEnd) {\r\n                currentRangeEnd = range.endLineNumber;\r\n            }\r\n        }\r\n        result.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\r\n        return result;\r\n    };\r\n    SplitLinesCollection.prototype.setHiddenAreas = function (_ranges) {\r\n        var _this = this;\r\n        var newRanges = this._reduceRanges(_ranges);\r\n        // BEGIN TODO@Martin: Please stop calling this method on each model change!\r\n        var oldRanges = this.hiddenAreasIds.map(function (areaId) { return _this.model.getDecorationRange(areaId); }).sort(Range.compareRangesUsingStarts);\r\n        if (newRanges.length === oldRanges.length) {\r\n            var hasDifference = false;\r\n            for (var i = 0; i < newRanges.length; i++) {\r\n                if (!newRanges[i].equalsRange(oldRanges[i])) {\r\n                    hasDifference = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!hasDifference) {\r\n                return false;\r\n            }\r\n        }\r\n        // END TODO@Martin: Please stop calling this method on each model change!\r\n        var newDecorations = [];\r\n        for (var _i = 0, newRanges_1 = newRanges; _i < newRanges_1.length; _i++) {\r\n            var newRange = newRanges_1[_i];\r\n            newDecorations.push({\r\n                range: newRange,\r\n                options: ModelDecorationOptions.EMPTY\r\n            });\r\n        }\r\n        this.hiddenAreasIds = this.model.deltaDecorations(this.hiddenAreasIds, newDecorations);\r\n        var hiddenAreas = newRanges;\r\n        var hiddenAreaStart = 1, hiddenAreaEnd = 0;\r\n        var hiddenAreaIdx = -1;\r\n        var nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.lines.length + 2;\r\n        var hasVisibleLine = false;\r\n        for (var i = 0; i < this.lines.length; i++) {\r\n            var lineNumber = i + 1;\r\n            if (lineNumber === nextLineNumberToUpdateHiddenArea) {\r\n                hiddenAreaIdx++;\r\n                hiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\r\n                hiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\r\n                nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.lines.length + 2;\r\n            }\r\n            var lineChanged = false;\r\n            if (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd) {\r\n                // Line should be hidden\r\n                if (this.lines[i].isVisible()) {\r\n                    this.lines[i] = this.lines[i].setVisible(false);\r\n                    lineChanged = true;\r\n                }\r\n            }\r\n            else {\r\n                hasVisibleLine = true;\r\n                // Line should be visible\r\n                if (!this.lines[i].isVisible()) {\r\n                    this.lines[i] = this.lines[i].setVisible(true);\r\n                    lineChanged = true;\r\n                }\r\n            }\r\n            if (lineChanged) {\r\n                var newOutputLineCount = this.lines[i].getViewLineCount();\r\n                this.prefixSumComputer.changeValue(i, newOutputLineCount);\r\n            }\r\n        }\r\n        if (!hasVisibleLine) {\r\n            // Cannot have everything be hidden => reveal everything!\r\n            this.setHiddenAreas([]);\r\n        }\r\n        return true;\r\n    };\r\n    SplitLinesCollection.prototype.modelPositionIsVisible = function (modelLineNumber, _modelColumn) {\r\n        if (modelLineNumber < 1 || modelLineNumber > this.lines.length) {\r\n            // invalid arguments\r\n            return false;\r\n        }\r\n        return this.lines[modelLineNumber - 1].isVisible();\r\n    };\r\n    SplitLinesCollection.prototype.setTabSize = function (newTabSize) {\r\n        if (this.tabSize === newTabSize) {\r\n            return false;\r\n        }\r\n        this.tabSize = newTabSize;\r\n        this._constructLines(/*resetHiddenAreas*/ false, null);\r\n        return true;\r\n    };\r\n    SplitLinesCollection.prototype.setWrappingSettings = function (fontInfo, wrappingStrategy, wrappingColumn, wrappingIndent) {\r\n        var equalFontInfo = this.fontInfo.equals(fontInfo);\r\n        var equalWrappingStrategy = (this.wrappingStrategy === wrappingStrategy);\r\n        var equalWrappingColumn = (this.wrappingColumn === wrappingColumn);\r\n        var equalWrappingIndent = (this.wrappingIndent === wrappingIndent);\r\n        if (equalFontInfo && equalWrappingStrategy && equalWrappingColumn && equalWrappingIndent) {\r\n            return false;\r\n        }\r\n        var onlyWrappingColumnChanged = (equalFontInfo && equalWrappingStrategy && !equalWrappingColumn && equalWrappingIndent);\r\n        this.fontInfo = fontInfo;\r\n        this.wrappingStrategy = wrappingStrategy;\r\n        this.wrappingColumn = wrappingColumn;\r\n        this.wrappingIndent = wrappingIndent;\r\n        var previousLineBreaks = null;\r\n        if (onlyWrappingColumnChanged) {\r\n            previousLineBreaks = [];\r\n            for (var i = 0, len = this.lines.length; i < len; i++) {\r\n                previousLineBreaks[i] = this.lines[i].getLineBreakData();\r\n            }\r\n        }\r\n        this._constructLines(/*resetHiddenAreas*/ false, previousLineBreaks);\r\n        return true;\r\n    };\r\n    SplitLinesCollection.prototype.createLineBreaksComputer = function () {\r\n        var lineBreaksComputerFactory = (this.wrappingStrategy === 'advanced'\r\n            ? this._domLineBreaksComputerFactory\r\n            : this._monospaceLineBreaksComputerFactory);\r\n        return lineBreaksComputerFactory.createLineBreaksComputer(this.fontInfo, this.tabSize, this.wrappingColumn, this.wrappingIndent);\r\n    };\r\n    SplitLinesCollection.prototype.onModelFlushed = function () {\r\n        this._constructLines(/*resetHiddenAreas*/ true, null);\r\n    };\r\n    SplitLinesCollection.prototype.onModelLinesDeleted = function (versionId, fromLineNumber, toLineNumber) {\r\n        if (versionId <= this._validModelVersionId) {\r\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\r\n            // We don't want to apply stale change events on top of a newer read model state.\r\n            return null;\r\n        }\r\n        var outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(fromLineNumber - 2) + 1);\r\n        var outputToLineNumber = this.prefixSumComputer.getAccumulatedValue(toLineNumber - 1);\r\n        this.lines.splice(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\r\n        this.prefixSumComputer.removeValues(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\r\n        return new viewEvents.ViewLinesDeletedEvent(outputFromLineNumber, outputToLineNumber);\r\n    };\r\n    SplitLinesCollection.prototype.onModelLinesInserted = function (versionId, fromLineNumber, _toLineNumber, lineBreaks) {\r\n        if (versionId <= this._validModelVersionId) {\r\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\r\n            // We don't want to apply stale change events on top of a newer read model state.\r\n            return null;\r\n        }\r\n        var hiddenAreas = this.getHiddenAreas();\r\n        var isInHiddenArea = false;\r\n        var testPosition = new Position(fromLineNumber, 1);\r\n        for (var _i = 0, hiddenAreas_1 = hiddenAreas; _i < hiddenAreas_1.length; _i++) {\r\n            var hiddenArea = hiddenAreas_1[_i];\r\n            if (hiddenArea.containsPosition(testPosition)) {\r\n                isInHiddenArea = true;\r\n                break;\r\n            }\r\n        }\r\n        var outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(fromLineNumber - 2) + 1);\r\n        var totalOutputLineCount = 0;\r\n        var insertLines = [];\r\n        var insertPrefixSumValues = [];\r\n        for (var i = 0, len = lineBreaks.length; i < len; i++) {\r\n            var line = createSplitLine(lineBreaks[i], !isInHiddenArea);\r\n            insertLines.push(line);\r\n            var outputLineCount = line.getViewLineCount();\r\n            totalOutputLineCount += outputLineCount;\r\n            insertPrefixSumValues[i] = outputLineCount;\r\n        }\r\n        // TODO@Alex: use arrays.arrayInsert\r\n        this.lines = this.lines.slice(0, fromLineNumber - 1).concat(insertLines).concat(this.lines.slice(fromLineNumber - 1));\r\n        this.prefixSumComputer.insertValues(fromLineNumber - 1, insertPrefixSumValues);\r\n        return new viewEvents.ViewLinesInsertedEvent(outputFromLineNumber, outputFromLineNumber + totalOutputLineCount - 1);\r\n    };\r\n    SplitLinesCollection.prototype.onModelLineChanged = function (versionId, lineNumber, lineBreakData) {\r\n        if (versionId <= this._validModelVersionId) {\r\n            // Here we check for versionId in case the lines were reconstructed in the meantime.\r\n            // We don't want to apply stale change events on top of a newer read model state.\r\n            return [false, null, null, null];\r\n        }\r\n        var lineIndex = lineNumber - 1;\r\n        var oldOutputLineCount = this.lines[lineIndex].getViewLineCount();\r\n        var isVisible = this.lines[lineIndex].isVisible();\r\n        var line = createSplitLine(lineBreakData, isVisible);\r\n        this.lines[lineIndex] = line;\r\n        var newOutputLineCount = this.lines[lineIndex].getViewLineCount();\r\n        var lineMappingChanged = false;\r\n        var changeFrom = 0;\r\n        var changeTo = -1;\r\n        var insertFrom = 0;\r\n        var insertTo = -1;\r\n        var deleteFrom = 0;\r\n        var deleteTo = -1;\r\n        if (oldOutputLineCount > newOutputLineCount) {\r\n            changeFrom = (lineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(lineNumber - 2) + 1);\r\n            changeTo = changeFrom + newOutputLineCount - 1;\r\n            deleteFrom = changeTo + 1;\r\n            deleteTo = deleteFrom + (oldOutputLineCount - newOutputLineCount) - 1;\r\n            lineMappingChanged = true;\r\n        }\r\n        else if (oldOutputLineCount < newOutputLineCount) {\r\n            changeFrom = (lineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(lineNumber - 2) + 1);\r\n            changeTo = changeFrom + oldOutputLineCount - 1;\r\n            insertFrom = changeTo + 1;\r\n            insertTo = insertFrom + (newOutputLineCount - oldOutputLineCount) - 1;\r\n            lineMappingChanged = true;\r\n        }\r\n        else {\r\n            changeFrom = (lineNumber === 1 ? 1 : this.prefixSumComputer.getAccumulatedValue(lineNumber - 2) + 1);\r\n            changeTo = changeFrom + newOutputLineCount - 1;\r\n        }\r\n        this.prefixSumComputer.changeValue(lineIndex, newOutputLineCount);\r\n        var viewLinesChangedEvent = (changeFrom <= changeTo ? new viewEvents.ViewLinesChangedEvent(changeFrom, changeTo) : null);\r\n        var viewLinesInsertedEvent = (insertFrom <= insertTo ? new viewEvents.ViewLinesInsertedEvent(insertFrom, insertTo) : null);\r\n        var viewLinesDeletedEvent = (deleteFrom <= deleteTo ? new viewEvents.ViewLinesDeletedEvent(deleteFrom, deleteTo) : null);\r\n        return [lineMappingChanged, viewLinesChangedEvent, viewLinesInsertedEvent, viewLinesDeletedEvent];\r\n    };\r\n    SplitLinesCollection.prototype.acceptVersionId = function (versionId) {\r\n        this._validModelVersionId = versionId;\r\n        if (this.lines.length === 1 && !this.lines[0].isVisible()) {\r\n            // At least one line must be visible => reset hidden areas\r\n            this.setHiddenAreas([]);\r\n        }\r\n    };\r\n    SplitLinesCollection.prototype.getViewLineCount = function () {\r\n        return this.prefixSumComputer.getTotalValue();\r\n    };\r\n    SplitLinesCollection.prototype._toValidViewLineNumber = function (viewLineNumber) {\r\n        if (viewLineNumber < 1) {\r\n            return 1;\r\n        }\r\n        var viewLineCount = this.getViewLineCount();\r\n        if (viewLineNumber > viewLineCount) {\r\n            return viewLineCount;\r\n        }\r\n        return viewLineNumber | 0;\r\n    };\r\n    SplitLinesCollection.prototype.getActiveIndentGuide = function (viewLineNumber, minLineNumber, maxLineNumber) {\r\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\r\n        minLineNumber = this._toValidViewLineNumber(minLineNumber);\r\n        maxLineNumber = this._toValidViewLineNumber(maxLineNumber);\r\n        var modelPosition = this.convertViewPositionToModelPosition(viewLineNumber, this.getViewLineMinColumn(viewLineNumber));\r\n        var modelMinPosition = this.convertViewPositionToModelPosition(minLineNumber, this.getViewLineMinColumn(minLineNumber));\r\n        var modelMaxPosition = this.convertViewPositionToModelPosition(maxLineNumber, this.getViewLineMinColumn(maxLineNumber));\r\n        var result = this.model.getActiveIndentGuide(modelPosition.lineNumber, modelMinPosition.lineNumber, modelMaxPosition.lineNumber);\r\n        var viewStartPosition = this.convertModelPositionToViewPosition(result.startLineNumber, 1);\r\n        var viewEndPosition = this.convertModelPositionToViewPosition(result.endLineNumber, this.model.getLineMaxColumn(result.endLineNumber));\r\n        return {\r\n            startLineNumber: viewStartPosition.lineNumber,\r\n            endLineNumber: viewEndPosition.lineNumber,\r\n            indent: result.indent\r\n        };\r\n    };\r\n    SplitLinesCollection.prototype.getViewLinesIndentGuides = function (viewStartLineNumber, viewEndLineNumber) {\r\n        viewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\r\n        viewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\r\n        var modelStart = this.convertViewPositionToModelPosition(viewStartLineNumber, this.getViewLineMinColumn(viewStartLineNumber));\r\n        var modelEnd = this.convertViewPositionToModelPosition(viewEndLineNumber, this.getViewLineMaxColumn(viewEndLineNumber));\r\n        var result = [];\r\n        var resultRepeatCount = [];\r\n        var resultRepeatOption = [];\r\n        var modelStartLineIndex = modelStart.lineNumber - 1;\r\n        var modelEndLineIndex = modelEnd.lineNumber - 1;\r\n        var reqStart = null;\r\n        for (var modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\r\n            var line = this.lines[modelLineIndex];\r\n            if (line.isVisible()) {\r\n                var viewLineStartIndex = line.getViewLineNumberOfModelPosition(0, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\r\n                var viewLineEndIndex = line.getViewLineNumberOfModelPosition(0, this.model.getLineMaxColumn(modelLineIndex + 1));\r\n                var count = viewLineEndIndex - viewLineStartIndex + 1;\r\n                var option = 0 /* BlockNone */;\r\n                if (count > 1 && line.getViewLineMinColumn(this.model, modelLineIndex + 1, viewLineEndIndex) === 1) {\r\n                    // wrapped lines should block indent guides\r\n                    option = (viewLineStartIndex === 0 ? 1 /* BlockSubsequent */ : 2 /* BlockAll */);\r\n                }\r\n                resultRepeatCount.push(count);\r\n                resultRepeatOption.push(option);\r\n                // merge into previous request\r\n                if (reqStart === null) {\r\n                    reqStart = new Position(modelLineIndex + 1, 0);\r\n                }\r\n            }\r\n            else {\r\n                // hit invisible line => flush request\r\n                if (reqStart !== null) {\r\n                    result = result.concat(this.model.getLinesIndentGuides(reqStart.lineNumber, modelLineIndex));\r\n                    reqStart = null;\r\n                }\r\n            }\r\n        }\r\n        if (reqStart !== null) {\r\n            result = result.concat(this.model.getLinesIndentGuides(reqStart.lineNumber, modelEnd.lineNumber));\r\n            reqStart = null;\r\n        }\r\n        var viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\r\n        var viewIndents = new Array(viewLineCount);\r\n        var currIndex = 0;\r\n        for (var i = 0, len = result.length; i < len; i++) {\r\n            var value = result[i];\r\n            var count = Math.min(viewLineCount - currIndex, resultRepeatCount[i]);\r\n            var option = resultRepeatOption[i];\r\n            var blockAtIndex = void 0;\r\n            if (option === 2 /* BlockAll */) {\r\n                blockAtIndex = 0;\r\n            }\r\n            else if (option === 1 /* BlockSubsequent */) {\r\n                blockAtIndex = 1;\r\n            }\r\n            else {\r\n                blockAtIndex = count;\r\n            }\r\n            for (var j = 0; j < count; j++) {\r\n                if (j === blockAtIndex) {\r\n                    value = 0;\r\n                }\r\n                viewIndents[currIndex++] = value;\r\n            }\r\n        }\r\n        return viewIndents;\r\n    };\r\n    SplitLinesCollection.prototype.getViewLineContent = function (viewLineNumber) {\r\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\r\n        var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\r\n        var lineIndex = r.index;\r\n        var remainder = r.remainder;\r\n        return this.lines[lineIndex].getViewLineContent(this.model, lineIndex + 1, remainder);\r\n    };\r\n    SplitLinesCollection.prototype.getViewLineLength = function (viewLineNumber) {\r\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\r\n        var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\r\n        var lineIndex = r.index;\r\n        var remainder = r.remainder;\r\n        return this.lines[lineIndex].getViewLineLength(this.model, lineIndex + 1, remainder);\r\n    };\r\n    SplitLinesCollection.prototype.getViewLineMinColumn = function (viewLineNumber) {\r\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\r\n        var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\r\n        var lineIndex = r.index;\r\n        var remainder = r.remainder;\r\n        return this.lines[lineIndex].getViewLineMinColumn(this.model, lineIndex + 1, remainder);\r\n    };\r\n    SplitLinesCollection.prototype.getViewLineMaxColumn = function (viewLineNumber) {\r\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\r\n        var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\r\n        var lineIndex = r.index;\r\n        var remainder = r.remainder;\r\n        return this.lines[lineIndex].getViewLineMaxColumn(this.model, lineIndex + 1, remainder);\r\n    };\r\n    SplitLinesCollection.prototype.getViewLineData = function (viewLineNumber) {\r\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\r\n        var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\r\n        var lineIndex = r.index;\r\n        var remainder = r.remainder;\r\n        return this.lines[lineIndex].getViewLineData(this.model, lineIndex + 1, remainder);\r\n    };\r\n    SplitLinesCollection.prototype.getViewLinesData = function (viewStartLineNumber, viewEndLineNumber, needed) {\r\n        viewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\r\n        viewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\r\n        var start = this.prefixSumComputer.getIndexOf(viewStartLineNumber - 1);\r\n        var viewLineNumber = viewStartLineNumber;\r\n        var startModelLineIndex = start.index;\r\n        var startRemainder = start.remainder;\r\n        var result = [];\r\n        for (var modelLineIndex = startModelLineIndex, len = this.model.getLineCount(); modelLineIndex < len; modelLineIndex++) {\r\n            var line = this.lines[modelLineIndex];\r\n            if (!line.isVisible()) {\r\n                continue;\r\n            }\r\n            var fromViewLineIndex = (modelLineIndex === startModelLineIndex ? startRemainder : 0);\r\n            var remainingViewLineCount = line.getViewLineCount() - fromViewLineIndex;\r\n            var lastLine = false;\r\n            if (viewLineNumber + remainingViewLineCount > viewEndLineNumber) {\r\n                lastLine = true;\r\n                remainingViewLineCount = viewEndLineNumber - viewLineNumber + 1;\r\n            }\r\n            var toViewLineIndex = fromViewLineIndex + remainingViewLineCount;\r\n            line.getViewLinesData(this.model, modelLineIndex + 1, fromViewLineIndex, toViewLineIndex, viewLineNumber - viewStartLineNumber, needed, result);\r\n            viewLineNumber += remainingViewLineCount;\r\n            if (lastLine) {\r\n                break;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    SplitLinesCollection.prototype.validateViewPosition = function (viewLineNumber, viewColumn, expectedModelPosition) {\r\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\r\n        var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\r\n        var lineIndex = r.index;\r\n        var remainder = r.remainder;\r\n        var line = this.lines[lineIndex];\r\n        var minColumn = line.getViewLineMinColumn(this.model, lineIndex + 1, remainder);\r\n        var maxColumn = line.getViewLineMaxColumn(this.model, lineIndex + 1, remainder);\r\n        if (viewColumn < minColumn) {\r\n            viewColumn = minColumn;\r\n        }\r\n        if (viewColumn > maxColumn) {\r\n            viewColumn = maxColumn;\r\n        }\r\n        var computedModelColumn = line.getModelColumnOfViewPosition(remainder, viewColumn);\r\n        var computedModelPosition = this.model.validatePosition(new Position(lineIndex + 1, computedModelColumn));\r\n        if (computedModelPosition.equals(expectedModelPosition)) {\r\n            return new Position(viewLineNumber, viewColumn);\r\n        }\r\n        return this.convertModelPositionToViewPosition(expectedModelPosition.lineNumber, expectedModelPosition.column);\r\n    };\r\n    SplitLinesCollection.prototype.validateViewRange = function (viewRange, expectedModelRange) {\r\n        var validViewStart = this.validateViewPosition(viewRange.startLineNumber, viewRange.startColumn, expectedModelRange.getStartPosition());\r\n        var validViewEnd = this.validateViewPosition(viewRange.endLineNumber, viewRange.endColumn, expectedModelRange.getEndPosition());\r\n        return new Range(validViewStart.lineNumber, validViewStart.column, validViewEnd.lineNumber, validViewEnd.column);\r\n    };\r\n    SplitLinesCollection.prototype.convertViewPositionToModelPosition = function (viewLineNumber, viewColumn) {\r\n        viewLineNumber = this._toValidViewLineNumber(viewLineNumber);\r\n        var r = this.prefixSumComputer.getIndexOf(viewLineNumber - 1);\r\n        var lineIndex = r.index;\r\n        var remainder = r.remainder;\r\n        var inputColumn = this.lines[lineIndex].getModelColumnOfViewPosition(remainder, viewColumn);\r\n        // console.log('out -> in ' + viewLineNumber + ',' + viewColumn + ' ===> ' + (lineIndex+1) + ',' + inputColumn);\r\n        return this.model.validatePosition(new Position(lineIndex + 1, inputColumn));\r\n    };\r\n    SplitLinesCollection.prototype.convertViewRangeToModelRange = function (viewRange) {\r\n        var start = this.convertViewPositionToModelPosition(viewRange.startLineNumber, viewRange.startColumn);\r\n        var end = this.convertViewPositionToModelPosition(viewRange.endLineNumber, viewRange.endColumn);\r\n        return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\r\n    };\r\n    SplitLinesCollection.prototype.convertModelPositionToViewPosition = function (_modelLineNumber, _modelColumn) {\r\n        var validPosition = this.model.validatePosition(new Position(_modelLineNumber, _modelColumn));\r\n        var inputLineNumber = validPosition.lineNumber;\r\n        var inputColumn = validPosition.column;\r\n        var lineIndex = inputLineNumber - 1, lineIndexChanged = false;\r\n        while (lineIndex > 0 && !this.lines[lineIndex].isVisible()) {\r\n            lineIndex--;\r\n            lineIndexChanged = true;\r\n        }\r\n        if (lineIndex === 0 && !this.lines[lineIndex].isVisible()) {\r\n            // Could not reach a real line\r\n            // console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + 1 + ',' + 1);\r\n            return new Position(1, 1);\r\n        }\r\n        var deltaLineNumber = 1 + (lineIndex === 0 ? 0 : this.prefixSumComputer.getAccumulatedValue(lineIndex - 1));\r\n        var r;\r\n        if (lineIndexChanged) {\r\n            r = this.lines[lineIndex].getViewPositionOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1));\r\n        }\r\n        else {\r\n            r = this.lines[inputLineNumber - 1].getViewPositionOfModelPosition(deltaLineNumber, inputColumn);\r\n        }\r\n        // console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + r.lineNumber + ',' + r);\r\n        return r;\r\n    };\r\n    SplitLinesCollection.prototype.convertModelRangeToViewRange = function (modelRange) {\r\n        var start = this.convertModelPositionToViewPosition(modelRange.startLineNumber, modelRange.startColumn);\r\n        var end = this.convertModelPositionToViewPosition(modelRange.endLineNumber, modelRange.endColumn);\r\n        if (modelRange.startLineNumber === modelRange.endLineNumber && start.lineNumber !== end.lineNumber) {\r\n            // This is a single line range that ends up taking more lines due to wrapping\r\n            if (end.column === this.getViewLineMinColumn(end.lineNumber)) {\r\n                // the end column lands on the first column of the next line\r\n                return new Range(start.lineNumber, start.column, end.lineNumber - 1, this.getViewLineMaxColumn(end.lineNumber - 1));\r\n            }\r\n        }\r\n        return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\r\n    };\r\n    SplitLinesCollection.prototype._getViewLineNumberForModelPosition = function (inputLineNumber, inputColumn) {\r\n        var lineIndex = inputLineNumber - 1;\r\n        if (this.lines[lineIndex].isVisible()) {\r\n            // this model line is visible\r\n            var deltaLineNumber_1 = 1 + (lineIndex === 0 ? 0 : this.prefixSumComputer.getAccumulatedValue(lineIndex - 1));\r\n            return this.lines[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber_1, inputColumn);\r\n        }\r\n        // this model line is not visible\r\n        while (lineIndex > 0 && !this.lines[lineIndex].isVisible()) {\r\n            lineIndex--;\r\n        }\r\n        if (lineIndex === 0 && !this.lines[lineIndex].isVisible()) {\r\n            // Could not reach a real line\r\n            return 1;\r\n        }\r\n        var deltaLineNumber = 1 + (lineIndex === 0 ? 0 : this.prefixSumComputer.getAccumulatedValue(lineIndex - 1));\r\n        return this.lines[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1));\r\n    };\r\n    SplitLinesCollection.prototype.getAllOverviewRulerDecorations = function (ownerId, filterOutValidation, theme) {\r\n        var decorations = this.model.getOverviewRulerDecorations(ownerId, filterOutValidation);\r\n        var result = new OverviewRulerDecorations();\r\n        for (var _i = 0, decorations_1 = decorations; _i < decorations_1.length; _i++) {\r\n            var decoration = decorations_1[_i];\r\n            var opts = decoration.options.overviewRuler;\r\n            var lane = opts ? opts.position : 0;\r\n            if (lane === 0) {\r\n                continue;\r\n            }\r\n            var color = opts.getColor(theme);\r\n            var viewStartLineNumber = this._getViewLineNumberForModelPosition(decoration.range.startLineNumber, decoration.range.startColumn);\r\n            var viewEndLineNumber = this._getViewLineNumberForModelPosition(decoration.range.endLineNumber, decoration.range.endColumn);\r\n            result.accept(color, viewStartLineNumber, viewEndLineNumber, lane);\r\n        }\r\n        return result.result;\r\n    };\r\n    SplitLinesCollection.prototype.getDecorationsInRange = function (range, ownerId, filterOutValidation) {\r\n        var modelStart = this.convertViewPositionToModelPosition(range.startLineNumber, range.startColumn);\r\n        var modelEnd = this.convertViewPositionToModelPosition(range.endLineNumber, range.endColumn);\r\n        if (modelEnd.lineNumber - modelStart.lineNumber <= range.endLineNumber - range.startLineNumber) {\r\n            // most likely there are no hidden lines => fast path\r\n            // fetch decorations from column 1 to cover the case of wrapped lines that have whole line decorations at column 1\r\n            return this.model.getDecorationsInRange(new Range(modelStart.lineNumber, 1, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation);\r\n        }\r\n        var result = [];\r\n        var modelStartLineIndex = modelStart.lineNumber - 1;\r\n        var modelEndLineIndex = modelEnd.lineNumber - 1;\r\n        var reqStart = null;\r\n        for (var modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\r\n            var line = this.lines[modelLineIndex];\r\n            if (line.isVisible()) {\r\n                // merge into previous request\r\n                if (reqStart === null) {\r\n                    reqStart = new Position(modelLineIndex + 1, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\r\n                }\r\n            }\r\n            else {\r\n                // hit invisible line => flush request\r\n                if (reqStart !== null) {\r\n                    var maxLineColumn = this.model.getLineMaxColumn(modelLineIndex);\r\n                    result = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelLineIndex, maxLineColumn), ownerId, filterOutValidation));\r\n                    reqStart = null;\r\n                }\r\n            }\r\n        }\r\n        if (reqStart !== null) {\r\n            result = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation));\r\n            reqStart = null;\r\n        }\r\n        result.sort(function (a, b) {\r\n            var res = Range.compareRangesUsingStarts(a.range, b.range);\r\n            if (res === 0) {\r\n                if (a.id < b.id) {\r\n                    return -1;\r\n                }\r\n                if (a.id > b.id) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            }\r\n            return res;\r\n        });\r\n        // Eliminate duplicate decorations that might have intersected our visible ranges multiple times\r\n        var finalResult = [], finalResultLen = 0;\r\n        var prevDecId = null;\r\n        for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {\r\n            var dec = result_1[_i];\r\n            var decId = dec.id;\r\n            if (prevDecId === decId) {\r\n                // skip\r\n                continue;\r\n            }\r\n            prevDecId = decId;\r\n            finalResult[finalResultLen++] = dec;\r\n        }\r\n        return finalResult;\r\n    };\r\n    return SplitLinesCollection;\r\n}());\r\nexport { SplitLinesCollection };\r\nvar VisibleIdentitySplitLine = /** @class */ (function () {\r\n    function VisibleIdentitySplitLine() {\r\n    }\r\n    VisibleIdentitySplitLine.prototype.isVisible = function () {\r\n        return true;\r\n    };\r\n    VisibleIdentitySplitLine.prototype.setVisible = function (isVisible) {\r\n        if (isVisible) {\r\n            return this;\r\n        }\r\n        return InvisibleIdentitySplitLine.INSTANCE;\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getLineBreakData = function () {\r\n        return null;\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getViewLineCount = function () {\r\n        return 1;\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getViewLineContent = function (model, modelLineNumber, _outputLineIndex) {\r\n        return model.getLineContent(modelLineNumber);\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getViewLineLength = function (model, modelLineNumber, _outputLineIndex) {\r\n        return model.getLineLength(modelLineNumber);\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getViewLineMinColumn = function (model, modelLineNumber, _outputLineIndex) {\r\n        return model.getLineMinColumn(modelLineNumber);\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getViewLineMaxColumn = function (model, modelLineNumber, _outputLineIndex) {\r\n        return model.getLineMaxColumn(modelLineNumber);\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getViewLineData = function (model, modelLineNumber, _outputLineIndex) {\r\n        var lineTokens = model.getLineTokens(modelLineNumber);\r\n        var lineContent = lineTokens.getLineContent();\r\n        return new ViewLineData(lineContent, false, 1, lineContent.length + 1, 0, lineTokens.inflate());\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getViewLinesData = function (model, modelLineNumber, _fromOuputLineIndex, _toOutputLineIndex, globalStartIndex, needed, result) {\r\n        if (!needed[globalStartIndex]) {\r\n            result[globalStartIndex] = null;\r\n            return;\r\n        }\r\n        result[globalStartIndex] = this.getViewLineData(model, modelLineNumber, 0);\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getModelColumnOfViewPosition = function (_outputLineIndex, outputColumn) {\r\n        return outputColumn;\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getViewPositionOfModelPosition = function (deltaLineNumber, inputColumn) {\r\n        return new Position(deltaLineNumber, inputColumn);\r\n    };\r\n    VisibleIdentitySplitLine.prototype.getViewLineNumberOfModelPosition = function (deltaLineNumber, _inputColumn) {\r\n        return deltaLineNumber;\r\n    };\r\n    VisibleIdentitySplitLine.INSTANCE = new VisibleIdentitySplitLine();\r\n    return VisibleIdentitySplitLine;\r\n}());\r\nvar InvisibleIdentitySplitLine = /** @class */ (function () {\r\n    function InvisibleIdentitySplitLine() {\r\n    }\r\n    InvisibleIdentitySplitLine.prototype.isVisible = function () {\r\n        return false;\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.setVisible = function (isVisible) {\r\n        if (!isVisible) {\r\n            return this;\r\n        }\r\n        return VisibleIdentitySplitLine.INSTANCE;\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getLineBreakData = function () {\r\n        return null;\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getViewLineCount = function () {\r\n        return 0;\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getViewLineContent = function (_model, _modelLineNumber, _outputLineIndex) {\r\n        throw new Error('Not supported');\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getViewLineLength = function (_model, _modelLineNumber, _outputLineIndex) {\r\n        throw new Error('Not supported');\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getViewLineMinColumn = function (_model, _modelLineNumber, _outputLineIndex) {\r\n        throw new Error('Not supported');\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getViewLineMaxColumn = function (_model, _modelLineNumber, _outputLineIndex) {\r\n        throw new Error('Not supported');\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getViewLineData = function (_model, _modelLineNumber, _outputLineIndex) {\r\n        throw new Error('Not supported');\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getViewLinesData = function (_model, _modelLineNumber, _fromOuputLineIndex, _toOutputLineIndex, _globalStartIndex, _needed, _result) {\r\n        throw new Error('Not supported');\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getModelColumnOfViewPosition = function (_outputLineIndex, _outputColumn) {\r\n        throw new Error('Not supported');\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getViewPositionOfModelPosition = function (_deltaLineNumber, _inputColumn) {\r\n        throw new Error('Not supported');\r\n    };\r\n    InvisibleIdentitySplitLine.prototype.getViewLineNumberOfModelPosition = function (_deltaLineNumber, _inputColumn) {\r\n        throw new Error('Not supported');\r\n    };\r\n    InvisibleIdentitySplitLine.INSTANCE = new InvisibleIdentitySplitLine();\r\n    return InvisibleIdentitySplitLine;\r\n}());\r\nvar SplitLine = /** @class */ (function () {\r\n    function SplitLine(lineBreakData, isVisible) {\r\n        this._lineBreakData = lineBreakData;\r\n        this._isVisible = isVisible;\r\n    }\r\n    SplitLine.prototype.isVisible = function () {\r\n        return this._isVisible;\r\n    };\r\n    SplitLine.prototype.setVisible = function (isVisible) {\r\n        this._isVisible = isVisible;\r\n        return this;\r\n    };\r\n    SplitLine.prototype.getLineBreakData = function () {\r\n        return this._lineBreakData;\r\n    };\r\n    SplitLine.prototype.getViewLineCount = function () {\r\n        if (!this._isVisible) {\r\n            return 0;\r\n        }\r\n        return this._lineBreakData.breakOffsets.length;\r\n    };\r\n    SplitLine.prototype.getInputStartOffsetOfOutputLineIndex = function (outputLineIndex) {\r\n        return LineBreakData.getInputOffsetOfOutputPosition(this._lineBreakData.breakOffsets, outputLineIndex, 0);\r\n    };\r\n    SplitLine.prototype.getInputEndOffsetOfOutputLineIndex = function (model, modelLineNumber, outputLineIndex) {\r\n        if (outputLineIndex + 1 === this._lineBreakData.breakOffsets.length) {\r\n            return model.getLineMaxColumn(modelLineNumber) - 1;\r\n        }\r\n        return LineBreakData.getInputOffsetOfOutputPosition(this._lineBreakData.breakOffsets, outputLineIndex + 1, 0);\r\n    };\r\n    SplitLine.prototype.getViewLineContent = function (model, modelLineNumber, outputLineIndex) {\r\n        if (!this._isVisible) {\r\n            throw new Error('Not supported');\r\n        }\r\n        var startOffset = this.getInputStartOffsetOfOutputLineIndex(outputLineIndex);\r\n        var endOffset = this.getInputEndOffsetOfOutputLineIndex(model, modelLineNumber, outputLineIndex);\r\n        var r = model.getValueInRange({\r\n            startLineNumber: modelLineNumber,\r\n            startColumn: startOffset + 1,\r\n            endLineNumber: modelLineNumber,\r\n            endColumn: endOffset + 1\r\n        });\r\n        if (outputLineIndex > 0) {\r\n            r = spaces(this._lineBreakData.wrappedTextIndentLength) + r;\r\n        }\r\n        return r;\r\n    };\r\n    SplitLine.prototype.getViewLineLength = function (model, modelLineNumber, outputLineIndex) {\r\n        if (!this._isVisible) {\r\n            throw new Error('Not supported');\r\n        }\r\n        var startOffset = this.getInputStartOffsetOfOutputLineIndex(outputLineIndex);\r\n        var endOffset = this.getInputEndOffsetOfOutputLineIndex(model, modelLineNumber, outputLineIndex);\r\n        var r = endOffset - startOffset;\r\n        if (outputLineIndex > 0) {\r\n            r = this._lineBreakData.wrappedTextIndentLength + r;\r\n        }\r\n        return r;\r\n    };\r\n    SplitLine.prototype.getViewLineMinColumn = function (_model, _modelLineNumber, outputLineIndex) {\r\n        if (!this._isVisible) {\r\n            throw new Error('Not supported');\r\n        }\r\n        if (outputLineIndex > 0) {\r\n            return this._lineBreakData.wrappedTextIndentLength + 1;\r\n        }\r\n        return 1;\r\n    };\r\n    SplitLine.prototype.getViewLineMaxColumn = function (model, modelLineNumber, outputLineIndex) {\r\n        if (!this._isVisible) {\r\n            throw new Error('Not supported');\r\n        }\r\n        return this.getViewLineContent(model, modelLineNumber, outputLineIndex).length + 1;\r\n    };\r\n    SplitLine.prototype.getViewLineData = function (model, modelLineNumber, outputLineIndex) {\r\n        if (!this._isVisible) {\r\n            throw new Error('Not supported');\r\n        }\r\n        var startOffset = this.getInputStartOffsetOfOutputLineIndex(outputLineIndex);\r\n        var endOffset = this.getInputEndOffsetOfOutputLineIndex(model, modelLineNumber, outputLineIndex);\r\n        var lineContent = model.getValueInRange({\r\n            startLineNumber: modelLineNumber,\r\n            startColumn: startOffset + 1,\r\n            endLineNumber: modelLineNumber,\r\n            endColumn: endOffset + 1\r\n        });\r\n        if (outputLineIndex > 0) {\r\n            lineContent = spaces(this._lineBreakData.wrappedTextIndentLength) + lineContent;\r\n        }\r\n        var minColumn = (outputLineIndex > 0 ? this._lineBreakData.wrappedTextIndentLength + 1 : 1);\r\n        var maxColumn = lineContent.length + 1;\r\n        var continuesWithWrappedLine = (outputLineIndex + 1 < this.getViewLineCount());\r\n        var deltaStartIndex = 0;\r\n        if (outputLineIndex > 0) {\r\n            deltaStartIndex = this._lineBreakData.wrappedTextIndentLength;\r\n        }\r\n        var lineTokens = model.getLineTokens(modelLineNumber);\r\n        var startVisibleColumn = (outputLineIndex === 0 ? 0 : this._lineBreakData.breakOffsetsVisibleColumn[outputLineIndex - 1]);\r\n        return new ViewLineData(lineContent, continuesWithWrappedLine, minColumn, maxColumn, startVisibleColumn, lineTokens.sliceAndInflate(startOffset, endOffset, deltaStartIndex));\r\n    };\r\n    SplitLine.prototype.getViewLinesData = function (model, modelLineNumber, fromOuputLineIndex, toOutputLineIndex, globalStartIndex, needed, result) {\r\n        if (!this._isVisible) {\r\n            throw new Error('Not supported');\r\n        }\r\n        for (var outputLineIndex = fromOuputLineIndex; outputLineIndex < toOutputLineIndex; outputLineIndex++) {\r\n            var globalIndex = globalStartIndex + outputLineIndex - fromOuputLineIndex;\r\n            if (!needed[globalIndex]) {\r\n                result[globalIndex] = null;\r\n                continue;\r\n            }\r\n            result[globalIndex] = this.getViewLineData(model, modelLineNumber, outputLineIndex);\r\n        }\r\n    };\r\n    SplitLine.prototype.getModelColumnOfViewPosition = function (outputLineIndex, outputColumn) {\r\n        if (!this._isVisible) {\r\n            throw new Error('Not supported');\r\n        }\r\n        var adjustedColumn = outputColumn - 1;\r\n        if (outputLineIndex > 0) {\r\n            if (adjustedColumn < this._lineBreakData.wrappedTextIndentLength) {\r\n                adjustedColumn = 0;\r\n            }\r\n            else {\r\n                adjustedColumn -= this._lineBreakData.wrappedTextIndentLength;\r\n            }\r\n        }\r\n        return LineBreakData.getInputOffsetOfOutputPosition(this._lineBreakData.breakOffsets, outputLineIndex, adjustedColumn) + 1;\r\n    };\r\n    SplitLine.prototype.getViewPositionOfModelPosition = function (deltaLineNumber, inputColumn) {\r\n        if (!this._isVisible) {\r\n            throw new Error('Not supported');\r\n        }\r\n        var r = LineBreakData.getOutputPositionOfInputOffset(this._lineBreakData.breakOffsets, inputColumn - 1);\r\n        var outputLineIndex = r.outputLineIndex;\r\n        var outputColumn = r.outputOffset + 1;\r\n        if (outputLineIndex > 0) {\r\n            outputColumn += this._lineBreakData.wrappedTextIndentLength;\r\n        }\r\n        //\t\tconsole.log('in -> out ' + deltaLineNumber + ',' + inputColumn + ' ===> ' + (deltaLineNumber+outputLineIndex) + ',' + outputColumn);\r\n        return new Position(deltaLineNumber + outputLineIndex, outputColumn);\r\n    };\r\n    SplitLine.prototype.getViewLineNumberOfModelPosition = function (deltaLineNumber, inputColumn) {\r\n        if (!this._isVisible) {\r\n            throw new Error('Not supported');\r\n        }\r\n        var r = LineBreakData.getOutputPositionOfInputOffset(this._lineBreakData.breakOffsets, inputColumn - 1);\r\n        return (deltaLineNumber + r.outputLineIndex);\r\n    };\r\n    return SplitLine;\r\n}());\r\nexport { SplitLine };\r\nvar _spaces = [''];\r\nfunction spaces(count) {\r\n    if (count >= _spaces.length) {\r\n        for (var i = 1; i <= count; i++) {\r\n            _spaces[i] = _makeSpaces(i);\r\n        }\r\n    }\r\n    return _spaces[count];\r\n}\r\nfunction _makeSpaces(count) {\r\n    return new Array(count + 1).join(' ');\r\n}\r\nfunction createSplitLine(lineBreakData, isVisible) {\r\n    if (lineBreakData === null) {\r\n        // No mapping needed\r\n        if (isVisible) {\r\n            return VisibleIdentitySplitLine.INSTANCE;\r\n        }\r\n        return InvisibleIdentitySplitLine.INSTANCE;\r\n    }\r\n    else {\r\n        return new SplitLine(lineBreakData, isVisible);\r\n    }\r\n}\r\nvar IdentityCoordinatesConverter = /** @class */ (function () {\r\n    function IdentityCoordinatesConverter(lines) {\r\n        this._lines = lines;\r\n    }\r\n    IdentityCoordinatesConverter.prototype._validPosition = function (pos) {\r\n        return this._lines.model.validatePosition(pos);\r\n    };\r\n    IdentityCoordinatesConverter.prototype._validRange = function (range) {\r\n        return this._lines.model.validateRange(range);\r\n    };\r\n    // View -> Model conversion and related methods\r\n    IdentityCoordinatesConverter.prototype.convertViewPositionToModelPosition = function (viewPosition) {\r\n        return this._validPosition(viewPosition);\r\n    };\r\n    IdentityCoordinatesConverter.prototype.convertViewRangeToModelRange = function (viewRange) {\r\n        return this._validRange(viewRange);\r\n    };\r\n    IdentityCoordinatesConverter.prototype.validateViewPosition = function (_viewPosition, expectedModelPosition) {\r\n        return this._validPosition(expectedModelPosition);\r\n    };\r\n    IdentityCoordinatesConverter.prototype.validateViewRange = function (_viewRange, expectedModelRange) {\r\n        return this._validRange(expectedModelRange);\r\n    };\r\n    // Model -> View conversion and related methods\r\n    IdentityCoordinatesConverter.prototype.convertModelPositionToViewPosition = function (modelPosition) {\r\n        return this._validPosition(modelPosition);\r\n    };\r\n    IdentityCoordinatesConverter.prototype.convertModelRangeToViewRange = function (modelRange) {\r\n        return this._validRange(modelRange);\r\n    };\r\n    IdentityCoordinatesConverter.prototype.modelPositionIsVisible = function (modelPosition) {\r\n        var lineCount = this._lines.model.getLineCount();\r\n        if (modelPosition.lineNumber < 1 || modelPosition.lineNumber > lineCount) {\r\n            // invalid arguments\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    return IdentityCoordinatesConverter;\r\n}());\r\nexport { IdentityCoordinatesConverter };\r\nvar IdentityLinesCollection = /** @class */ (function () {\r\n    function IdentityLinesCollection(model) {\r\n        this.model = model;\r\n    }\r\n    IdentityLinesCollection.prototype.dispose = function () {\r\n    };\r\n    IdentityLinesCollection.prototype.createCoordinatesConverter = function () {\r\n        return new IdentityCoordinatesConverter(this);\r\n    };\r\n    IdentityLinesCollection.prototype.getHiddenAreas = function () {\r\n        return [];\r\n    };\r\n    IdentityLinesCollection.prototype.setHiddenAreas = function (_ranges) {\r\n        return false;\r\n    };\r\n    IdentityLinesCollection.prototype.setTabSize = function (_newTabSize) {\r\n        return false;\r\n    };\r\n    IdentityLinesCollection.prototype.setWrappingSettings = function (_fontInfo, _wrappingStrategy, _wrappingColumn, _wrappingIndent) {\r\n        return false;\r\n    };\r\n    IdentityLinesCollection.prototype.createLineBreaksComputer = function () {\r\n        var result = [];\r\n        return {\r\n            addRequest: function (lineText, previousLineBreakData) {\r\n                result.push(null);\r\n            },\r\n            finalize: function () {\r\n                return result;\r\n            }\r\n        };\r\n    };\r\n    IdentityLinesCollection.prototype.onModelFlushed = function () {\r\n    };\r\n    IdentityLinesCollection.prototype.onModelLinesDeleted = function (_versionId, fromLineNumber, toLineNumber) {\r\n        return new viewEvents.ViewLinesDeletedEvent(fromLineNumber, toLineNumber);\r\n    };\r\n    IdentityLinesCollection.prototype.onModelLinesInserted = function (_versionId, fromLineNumber, toLineNumber, lineBreaks) {\r\n        return new viewEvents.ViewLinesInsertedEvent(fromLineNumber, toLineNumber);\r\n    };\r\n    IdentityLinesCollection.prototype.onModelLineChanged = function (_versionId, lineNumber, lineBreakData) {\r\n        return [false, new viewEvents.ViewLinesChangedEvent(lineNumber, lineNumber), null, null];\r\n    };\r\n    IdentityLinesCollection.prototype.acceptVersionId = function (_versionId) {\r\n    };\r\n    IdentityLinesCollection.prototype.getViewLineCount = function () {\r\n        return this.model.getLineCount();\r\n    };\r\n    IdentityLinesCollection.prototype.getActiveIndentGuide = function (viewLineNumber, _minLineNumber, _maxLineNumber) {\r\n        return {\r\n            startLineNumber: viewLineNumber,\r\n            endLineNumber: viewLineNumber,\r\n            indent: 0\r\n        };\r\n    };\r\n    IdentityLinesCollection.prototype.getViewLinesIndentGuides = function (viewStartLineNumber, viewEndLineNumber) {\r\n        var viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\r\n        var result = new Array(viewLineCount);\r\n        for (var i = 0; i < viewLineCount; i++) {\r\n            result[i] = 0;\r\n        }\r\n        return result;\r\n    };\r\n    IdentityLinesCollection.prototype.getViewLineContent = function (viewLineNumber) {\r\n        return this.model.getLineContent(viewLineNumber);\r\n    };\r\n    IdentityLinesCollection.prototype.getViewLineLength = function (viewLineNumber) {\r\n        return this.model.getLineLength(viewLineNumber);\r\n    };\r\n    IdentityLinesCollection.prototype.getViewLineMinColumn = function (viewLineNumber) {\r\n        return this.model.getLineMinColumn(viewLineNumber);\r\n    };\r\n    IdentityLinesCollection.prototype.getViewLineMaxColumn = function (viewLineNumber) {\r\n        return this.model.getLineMaxColumn(viewLineNumber);\r\n    };\r\n    IdentityLinesCollection.prototype.getViewLineData = function (viewLineNumber) {\r\n        var lineTokens = this.model.getLineTokens(viewLineNumber);\r\n        var lineContent = lineTokens.getLineContent();\r\n        return new ViewLineData(lineContent, false, 1, lineContent.length + 1, 0, lineTokens.inflate());\r\n    };\r\n    IdentityLinesCollection.prototype.getViewLinesData = function (viewStartLineNumber, viewEndLineNumber, needed) {\r\n        var lineCount = this.model.getLineCount();\r\n        viewStartLineNumber = Math.min(Math.max(1, viewStartLineNumber), lineCount);\r\n        viewEndLineNumber = Math.min(Math.max(1, viewEndLineNumber), lineCount);\r\n        var result = [];\r\n        for (var lineNumber = viewStartLineNumber; lineNumber <= viewEndLineNumber; lineNumber++) {\r\n            var idx = lineNumber - viewStartLineNumber;\r\n            if (!needed[idx]) {\r\n                result[idx] = null;\r\n            }\r\n            result[idx] = this.getViewLineData(lineNumber);\r\n        }\r\n        return result;\r\n    };\r\n    IdentityLinesCollection.prototype.getAllOverviewRulerDecorations = function (ownerId, filterOutValidation, theme) {\r\n        var decorations = this.model.getOverviewRulerDecorations(ownerId, filterOutValidation);\r\n        var result = new OverviewRulerDecorations();\r\n        for (var _i = 0, decorations_2 = decorations; _i < decorations_2.length; _i++) {\r\n            var decoration = decorations_2[_i];\r\n            var opts = decoration.options.overviewRuler;\r\n            var lane = opts ? opts.position : 0;\r\n            if (lane === 0) {\r\n                continue;\r\n            }\r\n            var color = opts.getColor(theme);\r\n            var viewStartLineNumber = decoration.range.startLineNumber;\r\n            var viewEndLineNumber = decoration.range.endLineNumber;\r\n            result.accept(color, viewStartLineNumber, viewEndLineNumber, lane);\r\n        }\r\n        return result.result;\r\n    };\r\n    IdentityLinesCollection.prototype.getDecorationsInRange = function (range, ownerId, filterOutValidation) {\r\n        return this.model.getDecorationsInRange(range, ownerId, filterOutValidation);\r\n    };\r\n    return IdentityLinesCollection;\r\n}());\r\nexport { IdentityLinesCollection };\r\nvar OverviewRulerDecorations = /** @class */ (function () {\r\n    function OverviewRulerDecorations() {\r\n        this.result = Object.create(null);\r\n    }\r\n    OverviewRulerDecorations.prototype.accept = function (color, startLineNumber, endLineNumber, lane) {\r\n        var prev = this.result[color];\r\n        if (prev) {\r\n            var prevLane = prev[prev.length - 3];\r\n            var prevEndLineNumber = prev[prev.length - 1];\r\n            if (prevLane === lane && prevEndLineNumber + 1 >= startLineNumber) {\r\n                // merge into prev\r\n                if (endLineNumber > prevEndLineNumber) {\r\n                    prev[prev.length - 1] = endLineNumber;\r\n                }\r\n                return;\r\n            }\r\n            // push\r\n            prev.push(lane, startLineNumber, endLineNumber);\r\n        }\r\n        else {\r\n            this.result[color] = [lane, startLineNumber, endLineNumber];\r\n        }\r\n    };\r\n    return OverviewRulerDecorations;\r\n}());\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { toUint32 } from '../../../base/common/uint.js';\r\nvar PrefixSumIndexOfResult = /** @class */ (function () {\r\n    function PrefixSumIndexOfResult(index, remainder) {\r\n        this.index = index;\r\n        this.remainder = remainder;\r\n    }\r\n    return PrefixSumIndexOfResult;\r\n}());\r\nexport { PrefixSumIndexOfResult };\r\nvar PrefixSumComputer = /** @class */ (function () {\r\n    function PrefixSumComputer(values) {\r\n        this.values = values;\r\n        this.prefixSum = new Uint32Array(values.length);\r\n        this.prefixSumValidIndex = new Int32Array(1);\r\n        this.prefixSumValidIndex[0] = -1;\r\n    }\r\n    PrefixSumComputer.prototype.insertValues = function (insertIndex, insertValues) {\r\n        insertIndex = toUint32(insertIndex);\r\n        var oldValues = this.values;\r\n        var oldPrefixSum = this.prefixSum;\r\n        var insertValuesLen = insertValues.length;\r\n        if (insertValuesLen === 0) {\r\n            return false;\r\n        }\r\n        this.values = new Uint32Array(oldValues.length + insertValuesLen);\r\n        this.values.set(oldValues.subarray(0, insertIndex), 0);\r\n        this.values.set(oldValues.subarray(insertIndex), insertIndex + insertValuesLen);\r\n        this.values.set(insertValues, insertIndex);\r\n        if (insertIndex - 1 < this.prefixSumValidIndex[0]) {\r\n            this.prefixSumValidIndex[0] = insertIndex - 1;\r\n        }\r\n        this.prefixSum = new Uint32Array(this.values.length);\r\n        if (this.prefixSumValidIndex[0] >= 0) {\r\n            this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\r\n        }\r\n        return true;\r\n    };\r\n    PrefixSumComputer.prototype.changeValue = function (index, value) {\r\n        index = toUint32(index);\r\n        value = toUint32(value);\r\n        if (this.values[index] === value) {\r\n            return false;\r\n        }\r\n        this.values[index] = value;\r\n        if (index - 1 < this.prefixSumValidIndex[0]) {\r\n            this.prefixSumValidIndex[0] = index - 1;\r\n        }\r\n        return true;\r\n    };\r\n    PrefixSumComputer.prototype.removeValues = function (startIndex, cnt) {\r\n        startIndex = toUint32(startIndex);\r\n        cnt = toUint32(cnt);\r\n        var oldValues = this.values;\r\n        var oldPrefixSum = this.prefixSum;\r\n        if (startIndex >= oldValues.length) {\r\n            return false;\r\n        }\r\n        var maxCnt = oldValues.length - startIndex;\r\n        if (cnt >= maxCnt) {\r\n            cnt = maxCnt;\r\n        }\r\n        if (cnt === 0) {\r\n            return false;\r\n        }\r\n        this.values = new Uint32Array(oldValues.length - cnt);\r\n        this.values.set(oldValues.subarray(0, startIndex), 0);\r\n        this.values.set(oldValues.subarray(startIndex + cnt), startIndex);\r\n        this.prefixSum = new Uint32Array(this.values.length);\r\n        if (startIndex - 1 < this.prefixSumValidIndex[0]) {\r\n            this.prefixSumValidIndex[0] = startIndex - 1;\r\n        }\r\n        if (this.prefixSumValidIndex[0] >= 0) {\r\n            this.prefixSum.set(oldPrefixSum.subarray(0, this.prefixSumValidIndex[0] + 1));\r\n        }\r\n        return true;\r\n    };\r\n    PrefixSumComputer.prototype.getTotalValue = function () {\r\n        if (this.values.length === 0) {\r\n            return 0;\r\n        }\r\n        return this._getAccumulatedValue(this.values.length - 1);\r\n    };\r\n    PrefixSumComputer.prototype.getAccumulatedValue = function (index) {\r\n        if (index < 0) {\r\n            return 0;\r\n        }\r\n        index = toUint32(index);\r\n        return this._getAccumulatedValue(index);\r\n    };\r\n    PrefixSumComputer.prototype._getAccumulatedValue = function (index) {\r\n        if (index <= this.prefixSumValidIndex[0]) {\r\n            return this.prefixSum[index];\r\n        }\r\n        var startIndex = this.prefixSumValidIndex[0] + 1;\r\n        if (startIndex === 0) {\r\n            this.prefixSum[0] = this.values[0];\r\n            startIndex++;\r\n        }\r\n        if (index >= this.values.length) {\r\n            index = this.values.length - 1;\r\n        }\r\n        for (var i = startIndex; i <= index; i++) {\r\n            this.prefixSum[i] = this.prefixSum[i - 1] + this.values[i];\r\n        }\r\n        this.prefixSumValidIndex[0] = Math.max(this.prefixSumValidIndex[0], index);\r\n        return this.prefixSum[index];\r\n    };\r\n    PrefixSumComputer.prototype.getIndexOf = function (accumulatedValue) {\r\n        accumulatedValue = Math.floor(accumulatedValue); //@perf\r\n        // Compute all sums (to get a fully valid prefixSum)\r\n        this.getTotalValue();\r\n        var low = 0;\r\n        var high = this.values.length - 1;\r\n        var mid = 0;\r\n        var midStop = 0;\r\n        var midStart = 0;\r\n        while (low <= high) {\r\n            mid = low + ((high - low) / 2) | 0;\r\n            midStop = this.prefixSum[mid];\r\n            midStart = midStop - this.values[mid];\r\n            if (accumulatedValue < midStart) {\r\n                high = mid - 1;\r\n            }\r\n            else if (accumulatedValue >= midStop) {\r\n                low = mid + 1;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        return new PrefixSumIndexOfResult(mid, accumulatedValue - midStart);\r\n    };\r\n    return PrefixSumComputer;\r\n}());\r\nexport { PrefixSumComputer };\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { CharacterClassifier } from '../core/characterClassifier.js';\r\nimport { LineBreakData } from './splitLinesCollection.js';\r\nvar WrappingCharacterClassifier = /** @class */ (function (_super) {\r\n    __extends(WrappingCharacterClassifier, _super);\r\n    function WrappingCharacterClassifier(BREAK_BEFORE, BREAK_AFTER) {\r\n        var _this = _super.call(this, 0 /* NONE */) || this;\r\n        for (var i = 0; i < BREAK_BEFORE.length; i++) {\r\n            _this.set(BREAK_BEFORE.charCodeAt(i), 1 /* BREAK_BEFORE */);\r\n        }\r\n        for (var i = 0; i < BREAK_AFTER.length; i++) {\r\n            _this.set(BREAK_AFTER.charCodeAt(i), 2 /* BREAK_AFTER */);\r\n        }\r\n        return _this;\r\n    }\r\n    WrappingCharacterClassifier.prototype.get = function (charCode) {\r\n        if (charCode >= 0 && charCode < 256) {\r\n            return this._asciiMap[charCode];\r\n        }\r\n        else {\r\n            // Initialize CharacterClass.BREAK_IDEOGRAPHIC for these Unicode ranges:\r\n            // 1. CJK Unified Ideographs (0x4E00 -- 0x9FFF)\r\n            // 2. CJK Unified Ideographs Extension A (0x3400 -- 0x4DBF)\r\n            // 3. Hiragana and Katakana (0x3040 -- 0x30FF)\r\n            if ((charCode >= 0x3040 && charCode <= 0x30FF)\r\n                || (charCode >= 0x3400 && charCode <= 0x4DBF)\r\n                || (charCode >= 0x4E00 && charCode <= 0x9FFF)) {\r\n                return 3 /* BREAK_IDEOGRAPHIC */;\r\n            }\r\n            return (this._map.get(charCode) || this._defaultValue);\r\n        }\r\n    };\r\n    return WrappingCharacterClassifier;\r\n}(CharacterClassifier));\r\nvar arrPool1 = [];\r\nvar arrPool2 = [];\r\nvar MonospaceLineBreaksComputerFactory = /** @class */ (function () {\r\n    function MonospaceLineBreaksComputerFactory(breakBeforeChars, breakAfterChars) {\r\n        this.classifier = new WrappingCharacterClassifier(breakBeforeChars, breakAfterChars);\r\n    }\r\n    MonospaceLineBreaksComputerFactory.create = function (options) {\r\n        return new MonospaceLineBreaksComputerFactory(options.get(99 /* wordWrapBreakBeforeCharacters */), options.get(98 /* wordWrapBreakAfterCharacters */));\r\n    };\r\n    MonospaceLineBreaksComputerFactory.prototype.createLineBreaksComputer = function (fontInfo, tabSize, wrappingColumn, wrappingIndent) {\r\n        var _this = this;\r\n        tabSize = tabSize | 0; //@perf\r\n        wrappingColumn = +wrappingColumn; //@perf\r\n        var requests = [];\r\n        var previousBreakingData = [];\r\n        return {\r\n            addRequest: function (lineText, previousLineBreakData) {\r\n                requests.push(lineText);\r\n                previousBreakingData.push(previousLineBreakData);\r\n            },\r\n            finalize: function () {\r\n                var columnsForFullWidthChar = fontInfo.typicalFullwidthCharacterWidth / fontInfo.typicalHalfwidthCharacterWidth; //@perf\r\n                var result = [];\r\n                for (var i = 0, len = requests.length; i < len; i++) {\r\n                    var previousLineBreakData = previousBreakingData[i];\r\n                    if (previousLineBreakData) {\r\n                        result[i] = createLineBreaksFromPreviousLineBreaks(_this.classifier, previousLineBreakData, requests[i], tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent);\r\n                    }\r\n                    else {\r\n                        result[i] = createLineBreaks(_this.classifier, requests[i], tabSize, wrappingColumn, columnsForFullWidthChar, wrappingIndent);\r\n                    }\r\n                }\r\n                arrPool1.length = 0;\r\n                arrPool2.length = 0;\r\n                return result;\r\n            }\r\n        };\r\n    };\r\n    return MonospaceLineBreaksComputerFactory;\r\n}());\r\nexport { MonospaceLineBreaksComputerFactory };\r\nfunction createLineBreaksFromPreviousLineBreaks(classifier, previousBreakingData, lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent) {\r\n    if (firstLineBreakColumn === -1) {\r\n        return null;\r\n    }\r\n    var len = lineText.length;\r\n    if (len <= 1) {\r\n        return null;\r\n    }\r\n    var prevBreakingOffsets = previousBreakingData.breakOffsets;\r\n    var prevBreakingOffsetsVisibleColumn = previousBreakingData.breakOffsetsVisibleColumn;\r\n    var wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\r\n    var wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\r\n    var breakingOffsets = arrPool1;\r\n    var breakingOffsetsVisibleColumn = arrPool2;\r\n    var breakingOffsetsCount = 0;\r\n    var breakingColumn = firstLineBreakColumn;\r\n    var prevLen = prevBreakingOffsets.length;\r\n    var prevIndex = 0;\r\n    if (prevIndex >= 0) {\r\n        var bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\r\n        while (prevIndex + 1 < prevLen) {\r\n            var distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\r\n            if (distance >= bestDistance) {\r\n                break;\r\n            }\r\n            bestDistance = distance;\r\n            prevIndex++;\r\n        }\r\n    }\r\n    while (prevIndex < prevLen) {\r\n        // Allow for prevIndex to be -1 (for the case where we hit a tab when walking backwards from the first break)\r\n        var prevBreakOffset = prevIndex < 0 ? 0 : prevBreakingOffsets[prevIndex];\r\n        var prevBreakoffsetVisibleColumn = prevIndex < 0 ? 0 : prevBreakingOffsetsVisibleColumn[prevIndex];\r\n        var breakOffset = 0;\r\n        var breakOffsetVisibleColumn = 0;\r\n        var forcedBreakOffset = 0;\r\n        var forcedBreakOffsetVisibleColumn = 0;\r\n        // initially, we search as much as possible to the right (if it fits)\r\n        if (prevBreakoffsetVisibleColumn <= breakingColumn) {\r\n            var visibleColumn = prevBreakoffsetVisibleColumn;\r\n            var prevCharCode = lineText.charCodeAt(prevBreakOffset - 1);\r\n            var prevCharCodeClass = classifier.get(prevCharCode);\r\n            var entireLineFits = true;\r\n            for (var i = prevBreakOffset; i < len; i++) {\r\n                var charStartOffset = i;\r\n                var charCode = lineText.charCodeAt(i);\r\n                var charCodeClass = void 0;\r\n                var charWidth = void 0;\r\n                if (strings.isHighSurrogate(charCode)) {\r\n                    // A surrogate pair must always be considered as a single unit, so it is never to be broken\r\n                    i++;\r\n                    charCodeClass = 0 /* NONE */;\r\n                    charWidth = 2;\r\n                }\r\n                else {\r\n                    charCodeClass = classifier.get(charCode);\r\n                    charWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\r\n                }\r\n                if (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass)) {\r\n                    breakOffset = charStartOffset;\r\n                    breakOffsetVisibleColumn = visibleColumn;\r\n                }\r\n                visibleColumn += charWidth;\r\n                // check if adding character at `i` will go over the breaking column\r\n                if (visibleColumn > breakingColumn) {\r\n                    // We need to break at least before character at `i`:\r\n                    forcedBreakOffset = charStartOffset;\r\n                    forcedBreakOffsetVisibleColumn = visibleColumn - charWidth;\r\n                    if (visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\r\n                        // Cannot break at `breakOffset` => reset it if it was set\r\n                        breakOffset = 0;\r\n                    }\r\n                    entireLineFits = false;\r\n                    break;\r\n                }\r\n                prevCharCode = charCode;\r\n                prevCharCodeClass = charCodeClass;\r\n            }\r\n            if (entireLineFits) {\r\n                // there is no more need to break => stop the outer loop!\r\n                if (breakingOffsetsCount > 0) {\r\n                    // Add last segment\r\n                    breakingOffsets[breakingOffsetsCount] = prevBreakingOffsets[prevBreakingOffsets.length - 1];\r\n                    breakingOffsetsVisibleColumn[breakingOffsetsCount] = prevBreakingOffsetsVisibleColumn[prevBreakingOffsets.length - 1];\r\n                    breakingOffsetsCount++;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        if (breakOffset === 0) {\r\n            // must search left\r\n            var visibleColumn = prevBreakoffsetVisibleColumn;\r\n            var charCode = lineText.charCodeAt(prevBreakOffset);\r\n            var charCodeClass = classifier.get(charCode);\r\n            var hitATabCharacter = false;\r\n            for (var i = prevBreakOffset - 1; i >= 0; i--) {\r\n                var charStartOffset = i + 1;\r\n                var prevCharCode = lineText.charCodeAt(i);\r\n                if (prevCharCode === 9 /* Tab */) {\r\n                    // cannot determine the width of a tab when going backwards, so we must go forwards\r\n                    hitATabCharacter = true;\r\n                    break;\r\n                }\r\n                var prevCharCodeClass = void 0;\r\n                var prevCharWidth = void 0;\r\n                if (strings.isLowSurrogate(prevCharCode)) {\r\n                    // A surrogate pair must always be considered as a single unit, so it is never to be broken\r\n                    i--;\r\n                    prevCharCodeClass = 0 /* NONE */;\r\n                    prevCharWidth = 2;\r\n                }\r\n                else {\r\n                    prevCharCodeClass = classifier.get(prevCharCode);\r\n                    prevCharWidth = (strings.isFullWidthCharacter(prevCharCode) ? columnsForFullWidthChar : 1);\r\n                }\r\n                if (visibleColumn <= breakingColumn) {\r\n                    if (forcedBreakOffset === 0) {\r\n                        forcedBreakOffset = charStartOffset;\r\n                        forcedBreakOffsetVisibleColumn = visibleColumn;\r\n                    }\r\n                    if (visibleColumn <= breakingColumn - wrappedLineBreakColumn) {\r\n                        // went too far!\r\n                        break;\r\n                    }\r\n                    if (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass)) {\r\n                        breakOffset = charStartOffset;\r\n                        breakOffsetVisibleColumn = visibleColumn;\r\n                        break;\r\n                    }\r\n                }\r\n                visibleColumn -= prevCharWidth;\r\n                charCode = prevCharCode;\r\n                charCodeClass = prevCharCodeClass;\r\n            }\r\n            if (breakOffset !== 0) {\r\n                var remainingWidthOfNextLine = wrappedLineBreakColumn - (forcedBreakOffsetVisibleColumn - breakOffsetVisibleColumn);\r\n                if (remainingWidthOfNextLine <= tabSize) {\r\n                    var charCodeAtForcedBreakOffset = lineText.charCodeAt(forcedBreakOffset);\r\n                    var charWidth = void 0;\r\n                    if (strings.isHighSurrogate(charCodeAtForcedBreakOffset)) {\r\n                        // A surrogate pair must always be considered as a single unit, so it is never to be broken\r\n                        charWidth = 2;\r\n                    }\r\n                    else {\r\n                        charWidth = computeCharWidth(charCodeAtForcedBreakOffset, forcedBreakOffsetVisibleColumn, tabSize, columnsForFullWidthChar);\r\n                    }\r\n                    if (remainingWidthOfNextLine - charWidth < 0) {\r\n                        // it is not worth it to break at breakOffset, it just introduces an extra needless line!\r\n                        breakOffset = 0;\r\n                    }\r\n                }\r\n            }\r\n            if (hitATabCharacter) {\r\n                // cannot determine the width of a tab when going backwards, so we must go forwards from the previous break\r\n                prevIndex--;\r\n                continue;\r\n            }\r\n        }\r\n        if (breakOffset === 0) {\r\n            // Could not find a good breaking point\r\n            breakOffset = forcedBreakOffset;\r\n            breakOffsetVisibleColumn = forcedBreakOffsetVisibleColumn;\r\n        }\r\n        breakingOffsets[breakingOffsetsCount] = breakOffset;\r\n        breakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\r\n        breakingOffsetsCount++;\r\n        breakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\r\n        while (prevIndex < 0 || (prevIndex < prevLen && prevBreakingOffsetsVisibleColumn[prevIndex] < breakOffsetVisibleColumn)) {\r\n            prevIndex++;\r\n        }\r\n        var bestDistance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex] - breakingColumn);\r\n        while (prevIndex + 1 < prevLen) {\r\n            var distance = Math.abs(prevBreakingOffsetsVisibleColumn[prevIndex + 1] - breakingColumn);\r\n            if (distance >= bestDistance) {\r\n                break;\r\n            }\r\n            bestDistance = distance;\r\n            prevIndex++;\r\n        }\r\n    }\r\n    if (breakingOffsetsCount === 0) {\r\n        return null;\r\n    }\r\n    // Doing here some object reuse which ends up helping a huge deal with GC pauses!\r\n    breakingOffsets.length = breakingOffsetsCount;\r\n    breakingOffsetsVisibleColumn.length = breakingOffsetsCount;\r\n    arrPool1 = previousBreakingData.breakOffsets;\r\n    arrPool2 = previousBreakingData.breakOffsetsVisibleColumn;\r\n    previousBreakingData.breakOffsets = breakingOffsets;\r\n    previousBreakingData.breakOffsetsVisibleColumn = breakingOffsetsVisibleColumn;\r\n    previousBreakingData.wrappedTextIndentLength = wrappedTextIndentLength;\r\n    return previousBreakingData;\r\n}\r\nfunction createLineBreaks(classifier, lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent) {\r\n    if (firstLineBreakColumn === -1) {\r\n        return null;\r\n    }\r\n    var len = lineText.length;\r\n    if (len <= 1) {\r\n        return null;\r\n    }\r\n    var wrappedTextIndentLength = computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent);\r\n    var wrappedLineBreakColumn = firstLineBreakColumn - wrappedTextIndentLength;\r\n    var breakingOffsets = [];\r\n    var breakingOffsetsVisibleColumn = [];\r\n    var breakingOffsetsCount = 0;\r\n    var breakOffset = 0;\r\n    var breakOffsetVisibleColumn = 0;\r\n    var breakingColumn = firstLineBreakColumn;\r\n    var prevCharCode = lineText.charCodeAt(0);\r\n    var prevCharCodeClass = classifier.get(prevCharCode);\r\n    var visibleColumn = computeCharWidth(prevCharCode, 0, tabSize, columnsForFullWidthChar);\r\n    var startOffset = 1;\r\n    if (strings.isHighSurrogate(prevCharCode)) {\r\n        // A surrogate pair must always be considered as a single unit, so it is never to be broken\r\n        visibleColumn += 1;\r\n        prevCharCode = lineText.charCodeAt(1);\r\n        prevCharCodeClass = classifier.get(prevCharCode);\r\n        startOffset++;\r\n    }\r\n    for (var i = startOffset; i < len; i++) {\r\n        var charStartOffset = i;\r\n        var charCode = lineText.charCodeAt(i);\r\n        var charCodeClass = void 0;\r\n        var charWidth = void 0;\r\n        if (strings.isHighSurrogate(charCode)) {\r\n            // A surrogate pair must always be considered as a single unit, so it is never to be broken\r\n            i++;\r\n            charCodeClass = 0 /* NONE */;\r\n            charWidth = 2;\r\n        }\r\n        else {\r\n            charCodeClass = classifier.get(charCode);\r\n            charWidth = computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar);\r\n        }\r\n        if (canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass)) {\r\n            breakOffset = charStartOffset;\r\n            breakOffsetVisibleColumn = visibleColumn;\r\n        }\r\n        visibleColumn += charWidth;\r\n        // check if adding character at `i` will go over the breaking column\r\n        if (visibleColumn > breakingColumn) {\r\n            // We need to break at least before character at `i`:\r\n            if (breakOffset === 0 || visibleColumn - breakOffsetVisibleColumn > wrappedLineBreakColumn) {\r\n                // Cannot break at `breakOffset`, must break at `i`\r\n                breakOffset = charStartOffset;\r\n                breakOffsetVisibleColumn = visibleColumn - charWidth;\r\n            }\r\n            breakingOffsets[breakingOffsetsCount] = breakOffset;\r\n            breakingOffsetsVisibleColumn[breakingOffsetsCount] = breakOffsetVisibleColumn;\r\n            breakingOffsetsCount++;\r\n            breakingColumn = breakOffsetVisibleColumn + wrappedLineBreakColumn;\r\n            breakOffset = 0;\r\n        }\r\n        prevCharCode = charCode;\r\n        prevCharCodeClass = charCodeClass;\r\n    }\r\n    if (breakingOffsetsCount === 0) {\r\n        return null;\r\n    }\r\n    // Add last segment\r\n    breakingOffsets[breakingOffsetsCount] = len;\r\n    breakingOffsetsVisibleColumn[breakingOffsetsCount] = visibleColumn;\r\n    return new LineBreakData(breakingOffsets, breakingOffsetsVisibleColumn, wrappedTextIndentLength);\r\n}\r\nfunction computeCharWidth(charCode, visibleColumn, tabSize, columnsForFullWidthChar) {\r\n    if (charCode === 9 /* Tab */) {\r\n        return (tabSize - (visibleColumn % tabSize));\r\n    }\r\n    if (strings.isFullWidthCharacter(charCode)) {\r\n        return columnsForFullWidthChar;\r\n    }\r\n    return 1;\r\n}\r\nfunction tabCharacterWidth(visibleColumn, tabSize) {\r\n    return (tabSize - (visibleColumn % tabSize));\r\n}\r\n/**\r\n * Kinsoku Shori : Don't break after a leading character, like an open bracket\r\n * Kinsoku Shori : Don't break before a trailing character, like a period\r\n */\r\nfunction canBreak(prevCharCode, prevCharCodeClass, charCode, charCodeClass) {\r\n    return (charCode !== 32 /* Space */\r\n        && ((prevCharCodeClass === 2 /* BREAK_AFTER */)\r\n            || (prevCharCodeClass === 3 /* BREAK_IDEOGRAPHIC */ && charCodeClass !== 2 /* BREAK_AFTER */)\r\n            || (charCodeClass === 1 /* BREAK_BEFORE */)\r\n            || (charCodeClass === 3 /* BREAK_IDEOGRAPHIC */ && prevCharCodeClass !== 1 /* BREAK_BEFORE */)));\r\n}\r\nfunction computeWrappedTextIndentLength(lineText, tabSize, firstLineBreakColumn, columnsForFullWidthChar, wrappingIndent) {\r\n    var wrappedTextIndentLength = 0;\r\n    if (wrappingIndent !== 0 /* None */) {\r\n        var firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineText);\r\n        if (firstNonWhitespaceIndex !== -1) {\r\n            // Track existing indent\r\n            for (var i = 0; i < firstNonWhitespaceIndex; i++) {\r\n                var charWidth = (lineText.charCodeAt(i) === 9 /* Tab */ ? tabCharacterWidth(wrappedTextIndentLength, tabSize) : 1);\r\n                wrappedTextIndentLength += charWidth;\r\n            }\r\n            // Increase indent of continuation lines, if desired\r\n            var numberOfAdditionalTabs = (wrappingIndent === 3 /* DeepIndent */ ? 2 : wrappingIndent === 2 /* Indent */ ? 1 : 0);\r\n            for (var i = 0; i < numberOfAdditionalTabs; i++) {\r\n                var charWidth = tabCharacterWidth(wrappedTextIndentLength, tabSize);\r\n                wrappedTextIndentLength += charWidth;\r\n            }\r\n            // Force sticking to beginning of line if no character would fit except for the indentation\r\n            if (wrappedTextIndentLength + columnsForFullWidthChar > firstLineBreakColumn) {\r\n                wrappedTextIndentLength = 0;\r\n            }\r\n        }\r\n    }\r\n    return wrappedTextIndentLength;\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nimport { InlineDecoration, ViewModelDecoration } from './viewModel.js';\r\nimport { filterValidationDecorations } from '../config/editorOptions.js';\r\nvar ViewModelDecorations = /** @class */ (function () {\r\n    function ViewModelDecorations(editorId, model, configuration, linesCollection, coordinatesConverter) {\r\n        this.editorId = editorId;\r\n        this.model = model;\r\n        this.configuration = configuration;\r\n        this._linesCollection = linesCollection;\r\n        this._coordinatesConverter = coordinatesConverter;\r\n        this._decorationsCache = Object.create(null);\r\n        this._cachedModelDecorationsResolver = null;\r\n        this._cachedModelDecorationsResolverViewRange = null;\r\n    }\r\n    ViewModelDecorations.prototype._clearCachedModelDecorationsResolver = function () {\r\n        this._cachedModelDecorationsResolver = null;\r\n        this._cachedModelDecorationsResolverViewRange = null;\r\n    };\r\n    ViewModelDecorations.prototype.dispose = function () {\r\n        this._decorationsCache = Object.create(null);\r\n        this._clearCachedModelDecorationsResolver();\r\n    };\r\n    ViewModelDecorations.prototype.reset = function () {\r\n        this._decorationsCache = Object.create(null);\r\n        this._clearCachedModelDecorationsResolver();\r\n    };\r\n    ViewModelDecorations.prototype.onModelDecorationsChanged = function () {\r\n        this._decorationsCache = Object.create(null);\r\n        this._clearCachedModelDecorationsResolver();\r\n    };\r\n    ViewModelDecorations.prototype.onLineMappingChanged = function () {\r\n        this._decorationsCache = Object.create(null);\r\n        this._clearCachedModelDecorationsResolver();\r\n    };\r\n    ViewModelDecorations.prototype._getOrCreateViewModelDecoration = function (modelDecoration) {\r\n        var id = modelDecoration.id;\r\n        var r = this._decorationsCache[id];\r\n        if (!r) {\r\n            var modelRange = modelDecoration.range;\r\n            var options = modelDecoration.options;\r\n            var viewRange = void 0;\r\n            if (options.isWholeLine) {\r\n                var start = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.startLineNumber, 1));\r\n                var end = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.endLineNumber, this.model.getLineMaxColumn(modelRange.endLineNumber)));\r\n                viewRange = new Range(start.lineNumber, start.column, end.lineNumber, end.column);\r\n            }\r\n            else {\r\n                viewRange = this._coordinatesConverter.convertModelRangeToViewRange(modelRange);\r\n            }\r\n            r = new ViewModelDecoration(viewRange, options);\r\n            this._decorationsCache[id] = r;\r\n        }\r\n        return r;\r\n    };\r\n    ViewModelDecorations.prototype.getDecorationsViewportData = function (viewRange) {\r\n        var cacheIsValid = (this._cachedModelDecorationsResolver !== null);\r\n        cacheIsValid = cacheIsValid && (viewRange.equalsRange(this._cachedModelDecorationsResolverViewRange));\r\n        if (!cacheIsValid) {\r\n            this._cachedModelDecorationsResolver = this._getDecorationsViewportData(viewRange);\r\n            this._cachedModelDecorationsResolverViewRange = viewRange;\r\n        }\r\n        return this._cachedModelDecorationsResolver;\r\n    };\r\n    ViewModelDecorations.prototype._getDecorationsViewportData = function (viewportRange) {\r\n        var modelDecorations = this._linesCollection.getDecorationsInRange(viewportRange, this.editorId, filterValidationDecorations(this.configuration.options));\r\n        var startLineNumber = viewportRange.startLineNumber;\r\n        var endLineNumber = viewportRange.endLineNumber;\r\n        var decorationsInViewport = [], decorationsInViewportLen = 0;\r\n        var inlineDecorations = [];\r\n        for (var j = startLineNumber; j <= endLineNumber; j++) {\r\n            inlineDecorations[j - startLineNumber] = [];\r\n        }\r\n        for (var i = 0, len = modelDecorations.length; i < len; i++) {\r\n            var modelDecoration = modelDecorations[i];\r\n            var decorationOptions = modelDecoration.options;\r\n            var viewModelDecoration = this._getOrCreateViewModelDecoration(modelDecoration);\r\n            var viewRange = viewModelDecoration.range;\r\n            decorationsInViewport[decorationsInViewportLen++] = viewModelDecoration;\r\n            if (decorationOptions.inlineClassName) {\r\n                var inlineDecoration = new InlineDecoration(viewRange, decorationOptions.inlineClassName, decorationOptions.inlineClassNameAffectsLetterSpacing ? 3 /* RegularAffectingLetterSpacing */ : 0 /* Regular */);\r\n                var intersectedStartLineNumber = Math.max(startLineNumber, viewRange.startLineNumber);\r\n                var intersectedEndLineNumber = Math.min(endLineNumber, viewRange.endLineNumber);\r\n                for (var j = intersectedStartLineNumber; j <= intersectedEndLineNumber; j++) {\r\n                    inlineDecorations[j - startLineNumber].push(inlineDecoration);\r\n                }\r\n            }\r\n            if (decorationOptions.beforeContentClassName) {\r\n                if (startLineNumber <= viewRange.startLineNumber && viewRange.startLineNumber <= endLineNumber) {\r\n                    var inlineDecoration = new InlineDecoration(new Range(viewRange.startLineNumber, viewRange.startColumn, viewRange.startLineNumber, viewRange.startColumn), decorationOptions.beforeContentClassName, 1 /* Before */);\r\n                    inlineDecorations[viewRange.startLineNumber - startLineNumber].push(inlineDecoration);\r\n                }\r\n            }\r\n            if (decorationOptions.afterContentClassName) {\r\n                if (startLineNumber <= viewRange.endLineNumber && viewRange.endLineNumber <= endLineNumber) {\r\n                    var inlineDecoration = new InlineDecoration(new Range(viewRange.endLineNumber, viewRange.endColumn, viewRange.endLineNumber, viewRange.endColumn), decorationOptions.afterContentClassName, 2 /* After */);\r\n                    inlineDecorations[viewRange.endLineNumber - startLineNumber].push(inlineDecoration);\r\n                }\r\n            }\r\n        }\r\n        return {\r\n            decorations: decorationsInViewport,\r\n            inlineDecorations: inlineDecorations\r\n        };\r\n    };\r\n    return ViewModelDecorations;\r\n}());\r\nexport { ViewModelDecorations };\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { Color } from '../../../base/common/color.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { EDITOR_FONT_DEFAULTS, filterValidationDecorations } from '../config/editorOptions.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nimport { TokenizationRegistry } from '../modes.js';\r\nimport { tokenizeLineToHTML } from '../modes/textToHtmlTokenizer.js';\r\nimport { MinimapTokensColorTracker } from './minimapTokensColorTracker.js';\r\nimport * as viewEvents from '../view/viewEvents.js';\r\nimport { ViewLayout } from '../viewLayout/viewLayout.js';\r\nimport { IdentityLinesCollection, SplitLinesCollection } from './splitLinesCollection.js';\r\nimport { MinimapLinesRenderingData, ViewLineRenderingData } from './viewModel.js';\r\nimport { ViewModelDecorations } from './viewModelDecorations.js';\r\nimport { RunOnceScheduler } from '../../../base/common/async.js';\r\nimport * as platform from '../../../base/common/platform.js';\r\nvar USE_IDENTITY_LINES_COLLECTION = true;\r\nvar ViewModel = /** @class */ (function (_super) {\r\n    __extends(ViewModel, _super);\r\n    function ViewModel(editorId, configuration, model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, scheduleAtNextAnimationFrame) {\r\n        var _this = _super.call(this) || this;\r\n        _this.editorId = editorId;\r\n        _this.configuration = configuration;\r\n        _this.model = model;\r\n        _this._tokenizeViewportSoon = _this._register(new RunOnceScheduler(function () { return _this.tokenizeViewport(); }, 50));\r\n        _this.hasFocus = false;\r\n        _this.viewportStartLine = -1;\r\n        _this.viewportStartLineTrackedRange = null;\r\n        _this.viewportStartLineDelta = 0;\r\n        if (USE_IDENTITY_LINES_COLLECTION && _this.model.isTooLargeForTokenization()) {\r\n            _this.lines = new IdentityLinesCollection(_this.model);\r\n        }\r\n        else {\r\n            var options = _this.configuration.options;\r\n            var fontInfo = options.get(34 /* fontInfo */);\r\n            var wrappingStrategy = options.get(103 /* wrappingStrategy */);\r\n            var wrappingInfo = options.get(108 /* wrappingInfo */);\r\n            var wrappingIndent = options.get(102 /* wrappingIndent */);\r\n            _this.lines = new SplitLinesCollection(_this.model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, _this.model.getOptions().tabSize, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent);\r\n        }\r\n        _this.coordinatesConverter = _this.lines.createCoordinatesConverter();\r\n        _this.viewLayout = _this._register(new ViewLayout(_this.configuration, _this.getLineCount(), scheduleAtNextAnimationFrame));\r\n        _this._register(_this.viewLayout.onDidScroll(function (e) {\r\n            if (e.scrollTopChanged) {\r\n                _this._tokenizeViewportSoon.schedule();\r\n            }\r\n            try {\r\n                var eventsCollector = _this._beginEmit();\r\n                eventsCollector.emit(new viewEvents.ViewScrollChangedEvent(e));\r\n            }\r\n            finally {\r\n                _this._endEmit();\r\n            }\r\n        }));\r\n        _this._register(_this.viewLayout.onDidContentSizeChange(function (e) {\r\n            try {\r\n                var eventsCollector = _this._beginEmit();\r\n                eventsCollector.emit(new viewEvents.ViewContentSizeChangedEvent(e));\r\n            }\r\n            finally {\r\n                _this._endEmit();\r\n            }\r\n        }));\r\n        _this.decorations = new ViewModelDecorations(_this.editorId, _this.model, _this.configuration, _this.lines, _this.coordinatesConverter);\r\n        _this._registerModelEvents();\r\n        _this._register(_this.configuration.onDidChange(function (e) {\r\n            try {\r\n                var eventsCollector = _this._beginEmit();\r\n                _this._onConfigurationChanged(eventsCollector, e);\r\n            }\r\n            finally {\r\n                _this._endEmit();\r\n            }\r\n        }));\r\n        _this._register(MinimapTokensColorTracker.getInstance().onDidChange(function () {\r\n            try {\r\n                var eventsCollector = _this._beginEmit();\r\n                eventsCollector.emit(new viewEvents.ViewTokensColorsChangedEvent());\r\n            }\r\n            finally {\r\n                _this._endEmit();\r\n            }\r\n        }));\r\n        return _this;\r\n    }\r\n    ViewModel.prototype.dispose = function () {\r\n        // First remove listeners, as disposing the lines might end up sending\r\n        // model decoration changed events ... and we no longer care about them ...\r\n        _super.prototype.dispose.call(this);\r\n        this.decorations.dispose();\r\n        this.lines.dispose();\r\n        this.invalidateMinimapColorCache();\r\n        this.viewportStartLineTrackedRange = this.model._setTrackedRange(this.viewportStartLineTrackedRange, null, 1 /* NeverGrowsWhenTypingAtEdges */);\r\n    };\r\n    ViewModel.prototype.tokenizeViewport = function () {\r\n        var linesViewportData = this.viewLayout.getLinesViewportData();\r\n        var startPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(linesViewportData.startLineNumber, 1));\r\n        var endPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(linesViewportData.endLineNumber, 1));\r\n        this.model.tokenizeViewport(startPosition.lineNumber, endPosition.lineNumber);\r\n    };\r\n    ViewModel.prototype.setHasFocus = function (hasFocus) {\r\n        this.hasFocus = hasFocus;\r\n    };\r\n    ViewModel.prototype._onConfigurationChanged = function (eventsCollector, e) {\r\n        // We might need to restore the current centered view range, so save it (if available)\r\n        var previousViewportStartModelPosition = null;\r\n        if (this.viewportStartLine !== -1) {\r\n            var previousViewportStartViewPosition = new Position(this.viewportStartLine, this.getLineMinColumn(this.viewportStartLine));\r\n            previousViewportStartModelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(previousViewportStartViewPosition);\r\n        }\r\n        var restorePreviousViewportStart = false;\r\n        var options = this.configuration.options;\r\n        var fontInfo = options.get(34 /* fontInfo */);\r\n        var wrappingStrategy = options.get(103 /* wrappingStrategy */);\r\n        var wrappingInfo = options.get(108 /* wrappingInfo */);\r\n        var wrappingIndent = options.get(102 /* wrappingIndent */);\r\n        if (this.lines.setWrappingSettings(fontInfo, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent)) {\r\n            eventsCollector.emit(new viewEvents.ViewFlushedEvent());\r\n            eventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\r\n            eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\r\n            this.decorations.onLineMappingChanged();\r\n            this.viewLayout.onFlushed(this.getLineCount());\r\n            if (this.viewLayout.getCurrentScrollTop() !== 0) {\r\n                // Never change the scroll position from 0 to something else...\r\n                restorePreviousViewportStart = true;\r\n            }\r\n        }\r\n        if (e.hasChanged(68 /* readOnly */)) {\r\n            // Must read again all decorations due to readOnly filtering\r\n            this.decorations.reset();\r\n            eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\r\n        }\r\n        eventsCollector.emit(new viewEvents.ViewConfigurationChangedEvent(e));\r\n        this.viewLayout.onConfigurationChanged(e);\r\n        if (restorePreviousViewportStart && previousViewportStartModelPosition) {\r\n            var viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(previousViewportStartModelPosition);\r\n            var viewPositionTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\r\n            this.viewLayout.setScrollPositionNow({ scrollTop: viewPositionTop + this.viewportStartLineDelta });\r\n        }\r\n    };\r\n    ViewModel.prototype._registerModelEvents = function () {\r\n        var _this = this;\r\n        this._register(this.model.onDidChangeRawContentFast(function (e) {\r\n            try {\r\n                var eventsCollector = _this._beginEmit();\r\n                var hadOtherModelChange = false;\r\n                var hadModelLineChangeThatChangedLineMapping = false;\r\n                var changes = e.changes;\r\n                var versionId = e.versionId;\r\n                // Do a first pass to compute line mappings, and a second pass to actually interpret them\r\n                var lineBreaksComputer = _this.lines.createLineBreaksComputer();\r\n                for (var _i = 0, changes_1 = changes; _i < changes_1.length; _i++) {\r\n                    var change = changes_1[_i];\r\n                    switch (change.changeType) {\r\n                        case 4 /* LinesInserted */: {\r\n                            for (var _a = 0, _b = change.detail; _a < _b.length; _a++) {\r\n                                var line = _b[_a];\r\n                                lineBreaksComputer.addRequest(line, null);\r\n                            }\r\n                            break;\r\n                        }\r\n                        case 2 /* LineChanged */: {\r\n                            lineBreaksComputer.addRequest(change.detail, null);\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                var lineBreaks = lineBreaksComputer.finalize();\r\n                var lineBreaksOffset = 0;\r\n                for (var _c = 0, changes_2 = changes; _c < changes_2.length; _c++) {\r\n                    var change = changes_2[_c];\r\n                    switch (change.changeType) {\r\n                        case 1 /* Flush */: {\r\n                            _this.lines.onModelFlushed();\r\n                            eventsCollector.emit(new viewEvents.ViewFlushedEvent());\r\n                            _this.decorations.reset();\r\n                            _this.viewLayout.onFlushed(_this.getLineCount());\r\n                            hadOtherModelChange = true;\r\n                            break;\r\n                        }\r\n                        case 3 /* LinesDeleted */: {\r\n                            var linesDeletedEvent = _this.lines.onModelLinesDeleted(versionId, change.fromLineNumber, change.toLineNumber);\r\n                            if (linesDeletedEvent !== null) {\r\n                                eventsCollector.emit(linesDeletedEvent);\r\n                                _this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\r\n                            }\r\n                            hadOtherModelChange = true;\r\n                            break;\r\n                        }\r\n                        case 4 /* LinesInserted */: {\r\n                            var insertedLineBreaks = lineBreaks.slice(lineBreaksOffset, lineBreaksOffset + change.detail.length);\r\n                            lineBreaksOffset += change.detail.length;\r\n                            var linesInsertedEvent = _this.lines.onModelLinesInserted(versionId, change.fromLineNumber, change.toLineNumber, insertedLineBreaks);\r\n                            if (linesInsertedEvent !== null) {\r\n                                eventsCollector.emit(linesInsertedEvent);\r\n                                _this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\r\n                            }\r\n                            hadOtherModelChange = true;\r\n                            break;\r\n                        }\r\n                        case 2 /* LineChanged */: {\r\n                            var changedLineBreakData = lineBreaks[lineBreaksOffset];\r\n                            lineBreaksOffset++;\r\n                            var _d = _this.lines.onModelLineChanged(versionId, change.lineNumber, changedLineBreakData), lineMappingChanged = _d[0], linesChangedEvent = _d[1], linesInsertedEvent = _d[2], linesDeletedEvent = _d[3];\r\n                            hadModelLineChangeThatChangedLineMapping = lineMappingChanged;\r\n                            if (linesChangedEvent) {\r\n                                eventsCollector.emit(linesChangedEvent);\r\n                            }\r\n                            if (linesInsertedEvent) {\r\n                                eventsCollector.emit(linesInsertedEvent);\r\n                                _this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\r\n                            }\r\n                            if (linesDeletedEvent) {\r\n                                eventsCollector.emit(linesDeletedEvent);\r\n                                _this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\r\n                            }\r\n                            break;\r\n                        }\r\n                        case 5 /* EOLChanged */: {\r\n                            // Nothing to do. The new version will be accepted below\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                _this.lines.acceptVersionId(versionId);\r\n                _this.viewLayout.onHeightMaybeChanged();\r\n                if (!hadOtherModelChange && hadModelLineChangeThatChangedLineMapping) {\r\n                    eventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\r\n                    eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\r\n                    _this.decorations.onLineMappingChanged();\r\n                }\r\n            }\r\n            finally {\r\n                _this._endEmit();\r\n            }\r\n            // Update the configuration and reset the centered view line\r\n            _this.viewportStartLine = -1;\r\n            _this.configuration.setMaxLineNumber(_this.model.getLineCount());\r\n            // Recover viewport\r\n            if (!_this.hasFocus && _this.model.getAttachedEditorCount() >= 2 && _this.viewportStartLineTrackedRange) {\r\n                var modelRange = _this.model._getTrackedRange(_this.viewportStartLineTrackedRange);\r\n                if (modelRange) {\r\n                    var viewPosition = _this.coordinatesConverter.convertModelPositionToViewPosition(modelRange.getStartPosition());\r\n                    var viewPositionTop = _this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\r\n                    _this.viewLayout.setScrollPositionNow({ scrollTop: viewPositionTop + _this.viewportStartLineDelta });\r\n                }\r\n            }\r\n        }));\r\n        this._register(this.model.onDidChangeTokens(function (e) {\r\n            var viewRanges = [];\r\n            for (var j = 0, lenJ = e.ranges.length; j < lenJ; j++) {\r\n                var modelRange = e.ranges[j];\r\n                var viewStartLineNumber = _this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.fromLineNumber, 1)).lineNumber;\r\n                var viewEndLineNumber = _this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.toLineNumber, _this.model.getLineMaxColumn(modelRange.toLineNumber))).lineNumber;\r\n                viewRanges[j] = {\r\n                    fromLineNumber: viewStartLineNumber,\r\n                    toLineNumber: viewEndLineNumber\r\n                };\r\n            }\r\n            try {\r\n                var eventsCollector = _this._beginEmit();\r\n                eventsCollector.emit(new viewEvents.ViewTokensChangedEvent(viewRanges));\r\n            }\r\n            finally {\r\n                _this._endEmit();\r\n            }\r\n            if (e.tokenizationSupportChanged) {\r\n                _this._tokenizeViewportSoon.schedule();\r\n            }\r\n        }));\r\n        this._register(this.model.onDidChangeLanguageConfiguration(function (e) {\r\n            try {\r\n                var eventsCollector = _this._beginEmit();\r\n                eventsCollector.emit(new viewEvents.ViewLanguageConfigurationEvent());\r\n            }\r\n            finally {\r\n                _this._endEmit();\r\n            }\r\n        }));\r\n        this._register(this.model.onDidChangeOptions(function (e) {\r\n            // A tab size change causes a line mapping changed event => all view parts will repaint OK, no further event needed here\r\n            if (_this.lines.setTabSize(_this.model.getOptions().tabSize)) {\r\n                _this.decorations.onLineMappingChanged();\r\n                _this.viewLayout.onFlushed(_this.getLineCount());\r\n                try {\r\n                    var eventsCollector = _this._beginEmit();\r\n                    eventsCollector.emit(new viewEvents.ViewFlushedEvent());\r\n                    eventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\r\n                    eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\r\n                }\r\n                finally {\r\n                    _this._endEmit();\r\n                }\r\n            }\r\n        }));\r\n        this._register(this.model.onDidChangeDecorations(function (e) {\r\n            _this.decorations.onModelDecorationsChanged();\r\n            try {\r\n                var eventsCollector = _this._beginEmit();\r\n                eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\r\n            }\r\n            finally {\r\n                _this._endEmit();\r\n            }\r\n        }));\r\n    };\r\n    ViewModel.prototype.setHiddenAreas = function (ranges) {\r\n        try {\r\n            var eventsCollector = this._beginEmit();\r\n            var lineMappingChanged = this.lines.setHiddenAreas(ranges);\r\n            if (lineMappingChanged) {\r\n                eventsCollector.emit(new viewEvents.ViewFlushedEvent());\r\n                eventsCollector.emit(new viewEvents.ViewLineMappingChangedEvent());\r\n                eventsCollector.emit(new viewEvents.ViewDecorationsChangedEvent());\r\n                this.decorations.onLineMappingChanged();\r\n                this.viewLayout.onFlushed(this.getLineCount());\r\n                this.viewLayout.onHeightMaybeChanged();\r\n            }\r\n        }\r\n        finally {\r\n            this._endEmit();\r\n        }\r\n    };\r\n    ViewModel.prototype.getVisibleRanges = function () {\r\n        var visibleViewRange = this.getCompletelyVisibleViewRange();\r\n        var visibleRange = this.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\r\n        var hiddenAreas = this.lines.getHiddenAreas();\r\n        if (hiddenAreas.length === 0) {\r\n            return [visibleRange];\r\n        }\r\n        var result = [], resultLen = 0;\r\n        var startLineNumber = visibleRange.startLineNumber;\r\n        var startColumn = visibleRange.startColumn;\r\n        var endLineNumber = visibleRange.endLineNumber;\r\n        var endColumn = visibleRange.endColumn;\r\n        for (var i = 0, len = hiddenAreas.length; i < len; i++) {\r\n            var hiddenStartLineNumber = hiddenAreas[i].startLineNumber;\r\n            var hiddenEndLineNumber = hiddenAreas[i].endLineNumber;\r\n            if (hiddenEndLineNumber < startLineNumber) {\r\n                continue;\r\n            }\r\n            if (hiddenStartLineNumber > endLineNumber) {\r\n                continue;\r\n            }\r\n            if (startLineNumber < hiddenStartLineNumber) {\r\n                result[resultLen++] = new Range(startLineNumber, startColumn, hiddenStartLineNumber - 1, this.model.getLineMaxColumn(hiddenStartLineNumber - 1));\r\n            }\r\n            startLineNumber = hiddenEndLineNumber + 1;\r\n            startColumn = 1;\r\n        }\r\n        if (startLineNumber < endLineNumber || (startLineNumber === endLineNumber && startColumn < endColumn)) {\r\n            result[resultLen++] = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\r\n        }\r\n        return result;\r\n    };\r\n    ViewModel.prototype.getCompletelyVisibleViewRange = function () {\r\n        var partialData = this.viewLayout.getLinesViewportData();\r\n        var startViewLineNumber = partialData.completelyVisibleStartLineNumber;\r\n        var endViewLineNumber = partialData.completelyVisibleEndLineNumber;\r\n        return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\r\n    };\r\n    ViewModel.prototype.getCompletelyVisibleViewRangeAtScrollTop = function (scrollTop) {\r\n        var partialData = this.viewLayout.getLinesViewportDataAtScrollTop(scrollTop);\r\n        var startViewLineNumber = partialData.completelyVisibleStartLineNumber;\r\n        var endViewLineNumber = partialData.completelyVisibleEndLineNumber;\r\n        return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\r\n    };\r\n    ViewModel.prototype.saveState = function () {\r\n        var compatViewState = this.viewLayout.saveState();\r\n        var scrollTop = compatViewState.scrollTop;\r\n        var firstViewLineNumber = this.viewLayout.getLineNumberAtVerticalOffset(scrollTop);\r\n        var firstPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(firstViewLineNumber, this.getLineMinColumn(firstViewLineNumber)));\r\n        var firstPositionDeltaTop = this.viewLayout.getVerticalOffsetForLineNumber(firstViewLineNumber) - scrollTop;\r\n        return {\r\n            scrollLeft: compatViewState.scrollLeft,\r\n            firstPosition: firstPosition,\r\n            firstPositionDeltaTop: firstPositionDeltaTop\r\n        };\r\n    };\r\n    ViewModel.prototype.reduceRestoreState = function (state) {\r\n        if (typeof state.firstPosition === 'undefined') {\r\n            // This is a view state serialized by an older version\r\n            return this._reduceRestoreStateCompatibility(state);\r\n        }\r\n        var modelPosition = this.model.validatePosition(state.firstPosition);\r\n        var viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\r\n        var scrollTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber) - state.firstPositionDeltaTop;\r\n        return {\r\n            scrollLeft: state.scrollLeft,\r\n            scrollTop: scrollTop\r\n        };\r\n    };\r\n    ViewModel.prototype._reduceRestoreStateCompatibility = function (state) {\r\n        return {\r\n            scrollLeft: state.scrollLeft,\r\n            scrollTop: state.scrollTopWithoutViewZones\r\n        };\r\n    };\r\n    ViewModel.prototype.getTabSize = function () {\r\n        return this.model.getOptions().tabSize;\r\n    };\r\n    ViewModel.prototype.getOptions = function () {\r\n        return this.model.getOptions();\r\n    };\r\n    ViewModel.prototype.getLineCount = function () {\r\n        return this.lines.getViewLineCount();\r\n    };\r\n    /**\r\n     * Gives a hint that a lot of requests are about to come in for these line numbers.\r\n     */\r\n    ViewModel.prototype.setViewport = function (startLineNumber, endLineNumber, centeredLineNumber) {\r\n        this.viewportStartLine = startLineNumber;\r\n        var position = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(startLineNumber, this.getLineMinColumn(startLineNumber)));\r\n        this.viewportStartLineTrackedRange = this.model._setTrackedRange(this.viewportStartLineTrackedRange, new Range(position.lineNumber, position.column, position.lineNumber, position.column), 1 /* NeverGrowsWhenTypingAtEdges */);\r\n        var viewportStartLineTop = this.viewLayout.getVerticalOffsetForLineNumber(startLineNumber);\r\n        var scrollTop = this.viewLayout.getCurrentScrollTop();\r\n        this.viewportStartLineDelta = scrollTop - viewportStartLineTop;\r\n    };\r\n    ViewModel.prototype.getActiveIndentGuide = function (lineNumber, minLineNumber, maxLineNumber) {\r\n        return this.lines.getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber);\r\n    };\r\n    ViewModel.prototype.getLinesIndentGuides = function (startLineNumber, endLineNumber) {\r\n        return this.lines.getViewLinesIndentGuides(startLineNumber, endLineNumber);\r\n    };\r\n    ViewModel.prototype.getLineContent = function (lineNumber) {\r\n        return this.lines.getViewLineContent(lineNumber);\r\n    };\r\n    ViewModel.prototype.getLineLength = function (lineNumber) {\r\n        return this.lines.getViewLineLength(lineNumber);\r\n    };\r\n    ViewModel.prototype.getLineMinColumn = function (lineNumber) {\r\n        return this.lines.getViewLineMinColumn(lineNumber);\r\n    };\r\n    ViewModel.prototype.getLineMaxColumn = function (lineNumber) {\r\n        return this.lines.getViewLineMaxColumn(lineNumber);\r\n    };\r\n    ViewModel.prototype.getLineFirstNonWhitespaceColumn = function (lineNumber) {\r\n        var result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\r\n        if (result === -1) {\r\n            return 0;\r\n        }\r\n        return result + 1;\r\n    };\r\n    ViewModel.prototype.getLineLastNonWhitespaceColumn = function (lineNumber) {\r\n        var result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\r\n        if (result === -1) {\r\n            return 0;\r\n        }\r\n        return result + 2;\r\n    };\r\n    ViewModel.prototype.getDecorationsInViewport = function (visibleRange) {\r\n        return this.decorations.getDecorationsViewportData(visibleRange).decorations;\r\n    };\r\n    ViewModel.prototype.getViewLineRenderingData = function (visibleRange, lineNumber) {\r\n        var mightContainRTL = this.model.mightContainRTL();\r\n        var mightContainNonBasicASCII = this.model.mightContainNonBasicASCII();\r\n        var tabSize = this.getTabSize();\r\n        var lineData = this.lines.getViewLineData(lineNumber);\r\n        var allInlineDecorations = this.decorations.getDecorationsViewportData(visibleRange).inlineDecorations;\r\n        var inlineDecorations = allInlineDecorations[lineNumber - visibleRange.startLineNumber];\r\n        return new ViewLineRenderingData(lineData.minColumn, lineData.maxColumn, lineData.content, lineData.continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, lineData.tokens, inlineDecorations, tabSize, lineData.startVisibleColumn);\r\n    };\r\n    ViewModel.prototype.getViewLineData = function (lineNumber) {\r\n        return this.lines.getViewLineData(lineNumber);\r\n    };\r\n    ViewModel.prototype.getMinimapLinesRenderingData = function (startLineNumber, endLineNumber, needed) {\r\n        var result = this.lines.getViewLinesData(startLineNumber, endLineNumber, needed);\r\n        return new MinimapLinesRenderingData(this.getTabSize(), result);\r\n    };\r\n    ViewModel.prototype.getAllOverviewRulerDecorations = function (theme) {\r\n        return this.lines.getAllOverviewRulerDecorations(this.editorId, filterValidationDecorations(this.configuration.options), theme);\r\n    };\r\n    ViewModel.prototype.invalidateOverviewRulerColorCache = function () {\r\n        var decorations = this.model.getOverviewRulerDecorations();\r\n        for (var _i = 0, decorations_1 = decorations; _i < decorations_1.length; _i++) {\r\n            var decoration = decorations_1[_i];\r\n            var opts = decoration.options.overviewRuler;\r\n            if (opts) {\r\n                opts.invalidateCachedColor();\r\n            }\r\n        }\r\n    };\r\n    ViewModel.prototype.invalidateMinimapColorCache = function () {\r\n        var decorations = this.model.getAllDecorations();\r\n        for (var _i = 0, decorations_2 = decorations; _i < decorations_2.length; _i++) {\r\n            var decoration = decorations_2[_i];\r\n            var opts = decoration.options.minimap;\r\n            if (opts) {\r\n                opts.invalidateCachedColor();\r\n            }\r\n        }\r\n    };\r\n    ViewModel.prototype.getValueInRange = function (range, eol) {\r\n        var modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\r\n        return this.model.getValueInRange(modelRange, eol);\r\n    };\r\n    ViewModel.prototype.getModelLineMaxColumn = function (modelLineNumber) {\r\n        return this.model.getLineMaxColumn(modelLineNumber);\r\n    };\r\n    ViewModel.prototype.validateModelPosition = function (position) {\r\n        return this.model.validatePosition(position);\r\n    };\r\n    ViewModel.prototype.validateModelRange = function (range) {\r\n        return this.model.validateRange(range);\r\n    };\r\n    ViewModel.prototype.deduceModelPositionRelativeToViewPosition = function (viewAnchorPosition, deltaOffset, lineFeedCnt) {\r\n        var modelAnchor = this.coordinatesConverter.convertViewPositionToModelPosition(viewAnchorPosition);\r\n        if (this.model.getEOL().length === 2) {\r\n            // This model uses CRLF, so the delta must take that into account\r\n            if (deltaOffset < 0) {\r\n                deltaOffset -= lineFeedCnt;\r\n            }\r\n            else {\r\n                deltaOffset += lineFeedCnt;\r\n            }\r\n        }\r\n        var modelAnchorOffset = this.model.getOffsetAt(modelAnchor);\r\n        var resultOffset = modelAnchorOffset + deltaOffset;\r\n        return this.model.getPositionAt(resultOffset);\r\n    };\r\n    ViewModel.prototype.getEOL = function () {\r\n        return this.model.getEOL();\r\n    };\r\n    ViewModel.prototype.getPlainTextToCopy = function (modelRanges, emptySelectionClipboard, forceCRLF) {\r\n        var newLineCharacter = forceCRLF ? '\\r\\n' : this.model.getEOL();\r\n        modelRanges = modelRanges.slice(0);\r\n        modelRanges.sort(Range.compareRangesUsingStarts);\r\n        var hasEmptyRange = false;\r\n        var hasNonEmptyRange = false;\r\n        for (var _i = 0, modelRanges_1 = modelRanges; _i < modelRanges_1.length; _i++) {\r\n            var range = modelRanges_1[_i];\r\n            if (range.isEmpty()) {\r\n                hasEmptyRange = true;\r\n            }\r\n            else {\r\n                hasNonEmptyRange = true;\r\n            }\r\n        }\r\n        if (!hasNonEmptyRange) {\r\n            // all ranges are empty\r\n            if (!emptySelectionClipboard) {\r\n                return '';\r\n            }\r\n            var modelLineNumbers = modelRanges.map(function (r) { return r.startLineNumber; });\r\n            var result_1 = '';\r\n            for (var i = 0; i < modelLineNumbers.length; i++) {\r\n                if (i > 0 && modelLineNumbers[i - 1] === modelLineNumbers[i]) {\r\n                    continue;\r\n                }\r\n                result_1 += this.model.getLineContent(modelLineNumbers[i]) + newLineCharacter;\r\n            }\r\n            return result_1;\r\n        }\r\n        if (hasEmptyRange && emptySelectionClipboard) {\r\n            // mixed empty selections and non-empty selections\r\n            var result_2 = [];\r\n            var prevModelLineNumber = 0;\r\n            for (var _a = 0, modelRanges_2 = modelRanges; _a < modelRanges_2.length; _a++) {\r\n                var modelRange = modelRanges_2[_a];\r\n                var modelLineNumber = modelRange.startLineNumber;\r\n                if (modelRange.isEmpty()) {\r\n                    if (modelLineNumber !== prevModelLineNumber) {\r\n                        result_2.push(this.model.getLineContent(modelLineNumber));\r\n                    }\r\n                }\r\n                else {\r\n                    result_2.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* CRLF */ : 0 /* TextDefined */));\r\n                }\r\n                prevModelLineNumber = modelLineNumber;\r\n            }\r\n            return result_2.length === 1 ? result_2[0] : result_2;\r\n        }\r\n        var result = [];\r\n        for (var _b = 0, modelRanges_3 = modelRanges; _b < modelRanges_3.length; _b++) {\r\n            var modelRange = modelRanges_3[_b];\r\n            if (!modelRange.isEmpty()) {\r\n                result.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* CRLF */ : 0 /* TextDefined */));\r\n            }\r\n        }\r\n        return result.length === 1 ? result[0] : result;\r\n    };\r\n    ViewModel.prototype.getRichTextToCopy = function (modelRanges, emptySelectionClipboard) {\r\n        var languageId = this.model.getLanguageIdentifier();\r\n        if (languageId.id === 1 /* PlainText */) {\r\n            return null;\r\n        }\r\n        if (modelRanges.length !== 1) {\r\n            // no multiple selection support at this time\r\n            return null;\r\n        }\r\n        var range = modelRanges[0];\r\n        if (range.isEmpty()) {\r\n            if (!emptySelectionClipboard) {\r\n                // nothing to copy\r\n                return null;\r\n            }\r\n            var lineNumber = range.startLineNumber;\r\n            range = new Range(lineNumber, this.model.getLineMinColumn(lineNumber), lineNumber, this.model.getLineMaxColumn(lineNumber));\r\n        }\r\n        var fontInfo = this.configuration.options.get(34 /* fontInfo */);\r\n        var colorMap = this._getColorMap();\r\n        var fontFamily = fontInfo.fontFamily === EDITOR_FONT_DEFAULTS.fontFamily ? fontInfo.fontFamily : \"'\" + fontInfo.fontFamily + \"', \" + EDITOR_FONT_DEFAULTS.fontFamily;\r\n        return {\r\n            mode: languageId.language,\r\n            html: (\"<div style=\\\"\"\r\n                + (\"color: \" + colorMap[1 /* DefaultForeground */] + \";\")\r\n                + (\"background-color: \" + colorMap[2 /* DefaultBackground */] + \";\")\r\n                + (\"font-family: \" + fontFamily + \";\")\r\n                + (\"font-weight: \" + fontInfo.fontWeight + \";\")\r\n                + (\"font-size: \" + fontInfo.fontSize + \"px;\")\r\n                + (\"line-height: \" + fontInfo.lineHeight + \"px;\")\r\n                + \"white-space: pre;\"\r\n                + \"\\\">\"\r\n                + this._getHTMLToCopy(range, colorMap)\r\n                + '</div>')\r\n        };\r\n    };\r\n    ViewModel.prototype._getHTMLToCopy = function (modelRange, colorMap) {\r\n        var startLineNumber = modelRange.startLineNumber;\r\n        var startColumn = modelRange.startColumn;\r\n        var endLineNumber = modelRange.endLineNumber;\r\n        var endColumn = modelRange.endColumn;\r\n        var tabSize = this.getTabSize();\r\n        var result = '';\r\n        for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\r\n            var lineTokens = this.model.getLineTokens(lineNumber);\r\n            var lineContent = lineTokens.getLineContent();\r\n            var startOffset = (lineNumber === startLineNumber ? startColumn - 1 : 0);\r\n            var endOffset = (lineNumber === endLineNumber ? endColumn - 1 : lineContent.length);\r\n            if (lineContent === '') {\r\n                result += '<br>';\r\n            }\r\n            else {\r\n                result += tokenizeLineToHTML(lineContent, lineTokens.inflate(), colorMap, startOffset, endOffset, tabSize, platform.isWindows);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    ViewModel.prototype._getColorMap = function () {\r\n        var colorMap = TokenizationRegistry.getColorMap();\r\n        var result = ['#000000'];\r\n        if (colorMap) {\r\n            for (var i = 1, len = colorMap.length; i < len; i++) {\r\n                result[i] = Color.Format.CSS.formatHex(colorMap[i]);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    return ViewModel;\r\n}(viewEvents.ViewEventEmitter));\r\nexport { ViewModel };\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as strings from '../../../base/common/strings.js';\r\nvar Viewport = /** @class */ (function () {\r\n    function Viewport(top, left, width, height) {\r\n        this.top = top | 0;\r\n        this.left = left | 0;\r\n        this.width = width | 0;\r\n        this.height = height | 0;\r\n    }\r\n    return Viewport;\r\n}());\r\nexport { Viewport };\r\nvar MinimapLinesRenderingData = /** @class */ (function () {\r\n    function MinimapLinesRenderingData(tabSize, data) {\r\n        this.tabSize = tabSize;\r\n        this.data = data;\r\n    }\r\n    return MinimapLinesRenderingData;\r\n}());\r\nexport { MinimapLinesRenderingData };\r\nvar ViewLineData = /** @class */ (function () {\r\n    function ViewLineData(content, continuesWithWrappedLine, minColumn, maxColumn, startVisibleColumn, tokens) {\r\n        this.content = content;\r\n        this.continuesWithWrappedLine = continuesWithWrappedLine;\r\n        this.minColumn = minColumn;\r\n        this.maxColumn = maxColumn;\r\n        this.startVisibleColumn = startVisibleColumn;\r\n        this.tokens = tokens;\r\n    }\r\n    return ViewLineData;\r\n}());\r\nexport { ViewLineData };\r\nvar ViewLineRenderingData = /** @class */ (function () {\r\n    function ViewLineRenderingData(minColumn, maxColumn, content, continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, tokens, inlineDecorations, tabSize, startVisibleColumn) {\r\n        this.minColumn = minColumn;\r\n        this.maxColumn = maxColumn;\r\n        this.content = content;\r\n        this.continuesWithWrappedLine = continuesWithWrappedLine;\r\n        this.isBasicASCII = ViewLineRenderingData.isBasicASCII(content, mightContainNonBasicASCII);\r\n        this.containsRTL = ViewLineRenderingData.containsRTL(content, this.isBasicASCII, mightContainRTL);\r\n        this.tokens = tokens;\r\n        this.inlineDecorations = inlineDecorations;\r\n        this.tabSize = tabSize;\r\n        this.startVisibleColumn = startVisibleColumn;\r\n    }\r\n    ViewLineRenderingData.isBasicASCII = function (lineContent, mightContainNonBasicASCII) {\r\n        if (mightContainNonBasicASCII) {\r\n            return strings.isBasicASCII(lineContent);\r\n        }\r\n        return true;\r\n    };\r\n    ViewLineRenderingData.containsRTL = function (lineContent, isBasicASCII, mightContainRTL) {\r\n        if (!isBasicASCII && mightContainRTL) {\r\n            return strings.containsRTL(lineContent);\r\n        }\r\n        return false;\r\n    };\r\n    return ViewLineRenderingData;\r\n}());\r\nexport { ViewLineRenderingData };\r\nvar InlineDecoration = /** @class */ (function () {\r\n    function InlineDecoration(range, inlineClassName, type) {\r\n        this.range = range;\r\n        this.inlineClassName = inlineClassName;\r\n        this.type = type;\r\n    }\r\n    return InlineDecoration;\r\n}());\r\nexport { InlineDecoration };\r\nvar ViewModelDecoration = /** @class */ (function () {\r\n    function ViewModelDecoration(range, options) {\r\n        this.range = range;\r\n        this.options = options;\r\n    }\r\n    return ViewModelDecoration;\r\n}());\r\nexport { ViewModelDecoration };\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { Disposable } from '../../../base/common/lifecycle.js';\r\nvar ViewEventHandler = /** @class */ (function (_super) {\r\n    __extends(ViewEventHandler, _super);\r\n    function ViewEventHandler() {\r\n        var _this = _super.call(this) || this;\r\n        _this._shouldRender = true;\r\n        return _this;\r\n    }\r\n    ViewEventHandler.prototype.shouldRender = function () {\r\n        return this._shouldRender;\r\n    };\r\n    ViewEventHandler.prototype.forceShouldRender = function () {\r\n        this._shouldRender = true;\r\n    };\r\n    ViewEventHandler.prototype.setShouldRender = function () {\r\n        this._shouldRender = true;\r\n    };\r\n    ViewEventHandler.prototype.onDidRender = function () {\r\n        this._shouldRender = false;\r\n    };\r\n    // --- begin event handlers\r\n    ViewEventHandler.prototype.onConfigurationChanged = function (e) {\r\n        return false;\r\n    };\r\n    ViewEventHandler.prototype.onContentSizeChanged = function (e) {\r\n        return false;\r\n    };\r\n    ViewEventHandler.prototype.onCursorStateChanged = function (e) {\r\n        return false;\r\n    };\r\n    ViewEventHandler.prototype.onDecorationsChanged = function (e) {\r\n        return false;\r\n    };\r\n    ViewEventHandler.prototype.onFlushed = function (e) {\r\n        return false;\r\n    };\r\n    ViewEventHandler.prototype.onFocusChanged = function (e) {\r\n        return false;\r\n    };\r\n    ViewEventHandler.prototype.onLanguageConfigurationChanged = function (e) {\r\n        return false;\r\n    };\r\n    ViewEventHandler.prototype.onLineMappingChanged = function (e) {\r\n        return false;\r\n    };\r\n    ViewEventHandler.prototype.onLinesChanged = function (e) {\r\n        return false;\r\n    };\r\n    ViewEventHandler.prototype.onLinesDeleted = function (e) {\r\n        return false;\r\n    };\r\n    ViewEventHandler.prototype.onLinesInserted = function (e) {\r\n        return false;\r\n    };\r\n    ViewEventHandler.prototype.onRevealRangeRequest = function (e) {\r\n        return false;\r\n    };\r\n    ViewEventHandler.prototype.onScrollChanged = function (e) {\r\n        return false;\r\n    };\r\n    ViewEventHandler.prototype.onThemeChanged = function (e) {\r\n        return false;\r\n    };\r\n    ViewEventHandler.prototype.onTokensChanged = function (e) {\r\n        return false;\r\n    };\r\n    ViewEventHandler.prototype.onTokensColorsChanged = function (e) {\r\n        return false;\r\n    };\r\n    ViewEventHandler.prototype.onZonesChanged = function (e) {\r\n        return false;\r\n    };\r\n    // --- end event handlers\r\n    ViewEventHandler.prototype.handleEvents = function (events) {\r\n        var shouldRender = false;\r\n        for (var i = 0, len = events.length; i < len; i++) {\r\n            var e = events[i];\r\n            switch (e.type) {\r\n                case 1 /* ViewConfigurationChanged */:\r\n                    if (this.onConfigurationChanged(e)) {\r\n                        shouldRender = true;\r\n                    }\r\n                    break;\r\n                case 2 /* ViewContentSizeChanged */:\r\n                    if (this.onContentSizeChanged(e)) {\r\n                        shouldRender = true;\r\n                    }\r\n                    break;\r\n                case 3 /* ViewCursorStateChanged */:\r\n                    if (this.onCursorStateChanged(e)) {\r\n                        shouldRender = true;\r\n                    }\r\n                    break;\r\n                case 4 /* ViewDecorationsChanged */:\r\n                    if (this.onDecorationsChanged(e)) {\r\n                        shouldRender = true;\r\n                    }\r\n                    break;\r\n                case 5 /* ViewFlushed */:\r\n                    if (this.onFlushed(e)) {\r\n                        shouldRender = true;\r\n                    }\r\n                    break;\r\n                case 6 /* ViewFocusChanged */:\r\n                    if (this.onFocusChanged(e)) {\r\n                        shouldRender = true;\r\n                    }\r\n                    break;\r\n                case 7 /* ViewLanguageConfigurationChanged */:\r\n                    if (this.onLanguageConfigurationChanged(e)) {\r\n                        shouldRender = true;\r\n                    }\r\n                    break;\r\n                case 8 /* ViewLineMappingChanged */:\r\n                    if (this.onLineMappingChanged(e)) {\r\n                        shouldRender = true;\r\n                    }\r\n                    break;\r\n                case 9 /* ViewLinesChanged */:\r\n                    if (this.onLinesChanged(e)) {\r\n                        shouldRender = true;\r\n                    }\r\n                    break;\r\n                case 10 /* ViewLinesDeleted */:\r\n                    if (this.onLinesDeleted(e)) {\r\n                        shouldRender = true;\r\n                    }\r\n                    break;\r\n                case 11 /* ViewLinesInserted */:\r\n                    if (this.onLinesInserted(e)) {\r\n                        shouldRender = true;\r\n                    }\r\n                    break;\r\n                case 12 /* ViewRevealRangeRequest */:\r\n                    if (this.onRevealRangeRequest(e)) {\r\n                        shouldRender = true;\r\n                    }\r\n                    break;\r\n                case 13 /* ViewScrollChanged */:\r\n                    if (this.onScrollChanged(e)) {\r\n                        shouldRender = true;\r\n                    }\r\n                    break;\r\n                case 15 /* ViewTokensChanged */:\r\n                    if (this.onTokensChanged(e)) {\r\n                        shouldRender = true;\r\n                    }\r\n                    break;\r\n                case 14 /* ViewThemeChanged */:\r\n                    if (this.onThemeChanged(e)) {\r\n                        shouldRender = true;\r\n                    }\r\n                    break;\r\n                case 16 /* ViewTokensColorsChanged */:\r\n                    if (this.onTokensColorsChanged(e)) {\r\n                        shouldRender = true;\r\n                    }\r\n                    break;\r\n                case 17 /* ViewZonesChanged */:\r\n                    if (this.onZonesChanged(e)) {\r\n                        shouldRender = true;\r\n                    }\r\n                    break;\r\n                default:\r\n                    console.info('View received unknown event: ');\r\n                    console.info(e);\r\n            }\r\n        }\r\n        if (shouldRender) {\r\n            this._shouldRender = true;\r\n        }\r\n    };\r\n    return ViewEventHandler;\r\n}(Disposable));\r\nexport { ViewEventHandler };\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport { RGBA8 } from '../core/rgba.js';\r\nimport { TokenizationRegistry } from '../modes.js';\r\nvar MinimapTokensColorTracker = /** @class */ (function () {\r\n    function MinimapTokensColorTracker() {\r\n        var _this = this;\r\n        this._onDidChange = new Emitter();\r\n        this.onDidChange = this._onDidChange.event;\r\n        this._updateColorMap();\r\n        TokenizationRegistry.onDidChange(function (e) {\r\n            if (e.changedColorMap) {\r\n                _this._updateColorMap();\r\n            }\r\n        });\r\n    }\r\n    MinimapTokensColorTracker.getInstance = function () {\r\n        if (!this._INSTANCE) {\r\n            this._INSTANCE = new MinimapTokensColorTracker();\r\n        }\r\n        return this._INSTANCE;\r\n    };\r\n    MinimapTokensColorTracker.prototype._updateColorMap = function () {\r\n        var colorMap = TokenizationRegistry.getColorMap();\r\n        if (!colorMap) {\r\n            this._colors = [RGBA8.Empty];\r\n            this._backgroundIsLight = true;\r\n            return;\r\n        }\r\n        this._colors = [RGBA8.Empty];\r\n        for (var colorId = 1; colorId < colorMap.length; colorId++) {\r\n            var source = colorMap[colorId].rgba;\r\n            // Use a VM friendly data-type\r\n            this._colors[colorId] = new RGBA8(source.r, source.g, source.b, Math.round(source.a * 255));\r\n        }\r\n        var backgroundLuminosity = colorMap[2 /* DefaultBackground */].getRelativeLuminance();\r\n        this._backgroundIsLight = backgroundLuminosity >= 0.5;\r\n        this._onDidChange.fire(undefined);\r\n    };\r\n    MinimapTokensColorTracker.prototype.getColor = function (colorId) {\r\n        if (colorId < 1 || colorId >= this._colors.length) {\r\n            // background color (basically invisible)\r\n            colorId = 2 /* DefaultBackground */;\r\n        }\r\n        return this._colors[colorId];\r\n    };\r\n    MinimapTokensColorTracker.prototype.backgroundIsLight = function () {\r\n        return this._backgroundIsLight;\r\n    };\r\n    MinimapTokensColorTracker._INSTANCE = null;\r\n    return MinimapTokensColorTracker;\r\n}());\r\nexport { MinimapTokensColorTracker };\r\n"],"sourceRoot":""}