{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/editor/common/controller/oneCursor.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/controller/cursorCollection.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/controller/cursor.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/controller/cursorTypeOperations.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/controller/cursorCommon.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/core/characterClassifier.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/core/rgba.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/core/range.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/core/position.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/controller/cursorMoveCommands.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/controller/cursorDeleteOperations.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/core/editOperation.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/controller/cursorWordOperations.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/core/lineTokens.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/controller/wordCharacterClassifier.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/controller/cursorMoveOperations.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/common/controller/cursorColumnSelection.js"],"names":["OneCursor","context","this","_selTrackedRange","_trackSelection","_setState","prototype","dispose","_removeTrackedRange","startTrackingSelection","_updateTrackedRange","stopTrackingSelection","model","_setTrackedRange","modelState","selection","asCursorState","viewState","readSelectionFromMarkers","range","_getTrackedRange","getDirection","startLineNumber","startColumn","endLineNumber","endColumn","ensureValidState","setState","selectionStart","validateRange","selectionStartLeftoverVisibleColumns","equalsRange","leftoverVisibleColumns","position","validatePosition","equals","convertViewRangeToModelRange","convertViewPositionToModelPosition","lineNumber","column","viewSelectionStart","validateViewRange","viewPosition","validateViewPosition","viewSelectionStart1","convertModelPositionToViewPosition","viewSelectionStart2","CursorCollection","primaryCursor","secondaryCursors","lastAddedCursorIndex","killSecondaryCursors","startTrackingSelections","i","len","length","stopTrackingSelections","updateContext","result","getAll","getViewPositions","getSelections","getViewSelections","setSelections","selections","setStates","fromModelSelections","getPrimaryCursor","states","_setSecondaryStates","slice","secondaryStates","secondaryCursorsLength","secondaryStatesLength","createCnt","_addSecondaryCursor","removeCnt","_removeSecondaryCursor","push","getLastAddedCursorIndex","removeIndex","splice","_getAll","normalize","cursors","sortedCursors","index","sort","a","b","sortedCursorIndex","current","next","currentSelection","nextSelection","config","multiCursorMergeOverlapping","shouldMergeCursors","isEmpty","getStartPosition","isBeforeOrEqual","getEndPosition","isBefore","winnerSortedCursorIndex","looserSortedCursorIndex","looserIndex","winnerIndex","looserSelection","winnerSelection","equalsSelection","resultingRange","plusRange","looserSelectionIsLTR","selectionStartLineNumber","selectionStartColumn","winnerSelectionIsLTR","resultingSelectionIsLTR","resultingSelection","resultingState","fromModelSelection","_i","sortedCursors_1","sortedCursor","__extends","extendStatics","d","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","create","containsLineMappingChanged","events","type","CursorStateChangedEvent","modelVersionId","oldSelections","oldModelVersionId","source","reason","CursorModelState","cursor","getVersionId","cursorState","other","AutoClosedAction","autoClosedCharactersDecorations","autoClosedEnclosingDecorations","_model","_autoClosedCharactersDecorations","_autoClosedEnclosingDecorations","getAllAutoClosedCharacters","autoClosedActions","autoClosedCharacters","autoClosedActions_1","autoClosedAction","concat","getAutoClosedCharactersRanges","deltaDecorations","decorationRange","getDecorationRange","isValid","enclosingRanges","compareRangesUsingStarts","strictContainsRange","_super","Cursor","configuration","viewModel","_this","call","_onDidReachMaxCursorCount","_register","onDidReachMaxCursorCount","event","_onDidAttemptReadOnlyEdit","onDidAttemptReadOnlyEdit","_onDidChange","onDidChange","_configuration","_knownModelVersionId","_viewModel","_cursors","_isHandling","_isDoingComposition","_selectionsWhenCompositionStarted","_columnSelectData","_autoClosedActions","_prevEditOperationType","onDidChangeRawContent","e","versionId","hadFlushEvent","containsEvent","_onModelContentChanged","addEventListener","updateCursorContext","onDidChangeLanguage","onDidChangeLanguageConfiguration","onDidChangeOptions","shouldRecreate","_validateAutoClosedActions","MAX_CURSOR_COUNT","fire","undefined","oldState","_emitStateChangedIfNecessary","setColumnSelectData","columnSelectData","reveal","horizontal","target","scrollType","_revealRange","revealRange","revealHorizontal","viewRange","verticalType","emitCursorRevealRange","scrollTo","desiredScrollTop","viewLayout","setScrollPositionSmooth","scrollTop","saveState","inSelectionMode","positionLineNumber","positionColumn","restoreState","desiredSelections","state","selectionsFromMarkers","getSelection","getColumnSelectData","primaryPos","viewLineNumber","viewVisualColumn","visibleColumnFromColumn2","isReal","fromViewLineNumber","fromViewVisualColumn","toViewLineNumber","toViewVisualColumn","getPosition","getPrevEditOperationType","setPrevEditOperationType","_pushAutoClosedAction","autoClosedCharactersRanges","autoClosedEnclosingRanges","autoClosedCharactersDeltaDecorations","autoClosedEnclosingDeltaDecorations","options","inlineClassName","stickiness","_executeEditOperation","opResult","shouldPushStackElementBefore","pushStackElement","executeCommands","commands","_interpretCommandResult","command","enclosingRange","closeCharacterRange","shouldPushStackElementAfter","newState","viewSelections","eventsCollector","_beginEmit","emit","viewEvents","_endEmit","some","newCursorState","map","s","revealTarget","viewPositions","_findAutoClosingPairs","edits","indices","edit","text","indexOf","m","match","closeChar","autoClosingPairsCandidates","autoClosingPairsClose2","get","openChar","open","closeCharIndex","openCharIndex","lastIndexOf","executeEdits","cursorStateComputer","autoClosingIndices","_isTracked","pushEditOperations","undoEdits","_a","openCharInnerIndex","closeCharInnerIndex","undoEdit","trigger","handlerId","payload","H","editorCommon","CompositionStart","CompositionEnd","cursorChangeReason","Undo","Redo","Type","_type","ReplacePreviousChar","_replacePreviousChar","replaceCharCnt","Paste","_paste","pasteOnNewLine","multicursorText","Cut","_cut","undo","redo","ExecuteCommand","_externalExecuteCommand","ExecuteCommands","_externalExecuteCommands","_interpretCompositionEnd","err","compositionEndWithInterceptors","typeWithoutInterceptors","offset","charLength","strings","chr","substr","typeWithInterceptors","replacePreviousChar","paste","cut","CommandExecutor","selectionsBefore","ctx","trackedRanges","trackedRangesDirection","_innerExecuteCommands","_arrayIsEmpty","commandsData","_getEditOperations","operations","rawOperations","loserCursorsMap","_getLoserCursorMap","console","warn","filteredOperations","identifier","major","toString","hadTrackedEditOperation","selectionsAfter","inverseEditOperations","groupedInverseEditOperations","inverseEditOperations_1","op","minorBasedSorter","minor","cursorSelections","_loop_1","computeCursorState","getInverseEditOperations","getTrackedSelection","id","idx","parseInt","losingCursors","losingCursorIndex","losingCursors_1","losingCursor","r","_getEditOperationsFromCommand","majorIdentifier","operationMinor","addEditOperation","forceMoveMarkers","isAutoWhitespaceEdit","insertsAutoWhitespace","addTrackedEditOperation","trackSelection","trackPreviousOnEmpty","maxLineColumn","getLineMaxColumn","l","editOperationBuilder","getEditOperations","compareRangesUsingEnds","previousOp","currentOp","loserMajor","j","TypeOperations","indent","isUnshift","tabSize","indentSize","insertSpaces","useTabStops","autoIndent","outdent","shiftIndent","indentation","count","unshiftIndent","_distributedPaste","_simplePaste","typeSelection","_distributePasteToCursors","multiCursorPaste","charCodeAt","lines","split","distributedPaste","_goodIndentForLine","action","expectedIndentAction","getInheritIndentForLine","lastLineNumber","lineText","getLineContent","nonWhitespaceIdx","maxColumn","expectedEnterAction","getEnterAction","appendText","Indent","Outdent","normalizeIndentation","_replaceJumpToNextIndent","typeText","visibleColumnFromColumn","spacesCnt","tab","test","isCheapToTokenize","goodIndent","possibleTypeText","lineMaxColumn","prevEditOperationType","txt","pos","Math","max","_typeCommand","keepPosition","_enter","lineText_1","indentation_1","substring","indentAction","None","IndentOutdent","normalIndent","increasedIndent","actualIndentation","ir","getIndentForEnter","oldEndViewColumn","oldEndColumn","beforeText","beforeEnter","newLineContent","firstNonWhitespace","setEndPosition","afterEnter","ceil","min","_isAutoIndentType","_runAutoIndentType","ch","currentIndentation","getIndentationAtPosition","getIndentActionForType","getLineFirstNonWhitespaceColumn","_isAutoClosingOvertype","autoClosingOvertype","has","afterCharacter","charAt","chIsQuote","beforeCharacter","found","lenJ","autoClosedCharacter","_runAutoClosingOvertype","_autoClosingPairIsSymmetric","autoClosingPair","close","_isBeforeClosingBrace","characterAfter","otherAutoClosingPairs","thisBraceIsSymmetric","otherAutoClosingPairs_1","otherAutoClosingPair","otherBraceIsSymmetric","_findAutoClosingPairOpen","positions","autoClosingPairCandidates","autoClosingPairsOpen2","autoClosingPairCandidates_1","autoClosingPairCandidate","candidateIsMatch","positions_1","relevantText","getValueInRange","_isAutoClosingOpenCharType","insertOpenCharacter","autoCloseConfig","autoClosingQuotes","autoClosingBrackets","shouldAutoCloseBefore","quote","bracket","isBeforeCloseBrace","wordSeparators","forceTokenization","lineTokens","getLineTokens","shouldAutoClosePair","_runAutoClosingOpenCharType","TypeWithAutoClosingCommand","_shouldSurroundChar","autoSurround","_isSurroundSelectionType","surroundingPairs","isTypingAQuoteCharacter","selectionContainsOnlyWhitespace","startIndex","endIndex","selectedText","selectionText","_runSurroundSelectionType","closeCharacter","_isTypeInterceptorElectricChar","_typeInterceptorElectricChar","electricChars","electricAction","onElectricCharacter","matchOpenBracket","findMatchingBracketUp","matchLine","matchLineIndentation","newIndentation","lineFirstNonBlankColumn","prefix","selectionsWhenCompositionStarted","selectionsArrEqual","selections_1","currentChar","autoClosingPairOpenCharType","commands_1","commands_2","autoIndentFails","str","lineInsertBefore","lineInsertAfter","lineBreakInsert","openCharacter","_openCharacter","_closeCharacter","helper","autoCloseAlways","autoCloseNever","autoCloseBeforeWhitespace","appendEntry","key","value","set","CursorConfiguration","languageIdentifier","modelOptions","_languageIdentifier","layoutInfo","readOnly","lineHeight","pageSize","floor","height","emptySelectionClipboard","copyWithSyntaxHighlighting","Map","_electricChars","_getShouldAutoClose","autoClosingPairs","_getAutoClosingPairs","autoClosingPairs_1","pair","_getSurroundingPairs","surroundingPairs_1","hasChanged","defineProperty","_getElectricCharacters","electricChars_1","char","enumerable","configurable","getElectricCharacters","getAutoClosingPairs","_getLanguageDefinedShouldAutoClose","autoCloseBeforeSet_1","getAutoCloseBeforeSet","c","getSurroundingPairs","SingleCursorState","_computeSelection","hasSelection","move","CursorContext","getLanguageIdentifier","getOptions","modelPosition","coordinatesConverter","expectedModelRange","convertModelRangeToViewRange","modelRange","getCurrentScrollTop","getCompletelyVisibleViewRange","getCompletelyVisibleModelRange","getCompletelyVisibleViewRangeAtScrollTop","getVerticalOffsetForViewLine","getVerticalOffsetForLineNumber","PartialModelCursorState","PartialViewCursorState","CursorState","fromModelState","fromViewState","modelSelection","modelSelections","EditOperationResult","opts","CursorColumns","lineContent","lineContentLength","endOffset","codePoint","nextRenderTabStop","graphemeBreakType","nextCodePoint","nextGraphemeBreakType","columnFromVisibleColumn","visibleColumn","lineLength","beforeVisibleColumn","beforeColumn","afterVisibleColumn","afterColumn","beforeDelta","afterDelta","columnFromVisibleColumn2","minColumn","getLineMinColumn","nextIndentTabStop","prevRenderTabStop","prevIndentTabStop","isQuote","CharacterClassifier","_defaultValue","defaultValue","_asciiMap","_createAsciiMap","_map","asciiMap","Uint8Array","charCode","_value","CharacterSet","_actual","add","RGBA8","g","_clamp","Empty","Range","containsPosition","containsRange","otherRange","intersectRanges","resultStartLineNumber","resultStartColumn","resultEndLineNumber","resultEndColumn","otherStartLineNumber","otherStartColumn","otherEndLineNumber","otherEndColumn","setStartPosition","collapseToStart","fromPositions","start","end","lift","isIRange","obj","areIntersectingOrTouching","areIntersecting","aStartLineNumber","bStartLineNumber","aStartColumn","bStartColumn","aEndLineNumber","bEndLineNumber","aEndColumn","bEndColumn","aExists","bExists","spansMultipleLines","Position","with","newLineNumber","newColumn","delta","deltaLineNumber","deltaColumn","compare","aLineNumber","bLineNumber","aColumn","bColumn","clone","isIPosition","CursorMove","CursorMoveCommands","addCursorDown","useLogicalLine","resultLen","translateDown","addCursorUp","translateUp","moveToBeginningOfLine","_moveToLineStart","currentViewStateColumn","currentModelStateColumn","isFirstLineOfWrappedLine","currentViewStatelineNumber","firstNonBlankColumn","isBeginningOfViewLine","_moveToLineStartByModel","_moveToLineStartByView","moveToEndOfLine","_moveToLineEnd","viewStatePosition","viewModelMaxColumn","isEndOfViewLine","modelStatePosition","modelMaxColumn","isEndLineOfWrappedLine","_moveToLineEndByModel","_moveToLineEndByView","expandLineSelection","lineCount","getLineCount","moveToBeginningOfBuffer","moveToEndOfBuffer","selectAll","line","_position","_viewPosition","selectToLineNumber","selectToColumn","enteringLineNumber","selectToViewLineNumber","selectToViewColumn","endPositionOfSelectionStart","word","cancelSelection","moveTo","args","select","direction","unit","_moveHalfLineLeft","_moveLeft","_moveHalfLineRight","_moveRight","_moveUpByViewLines","_moveUpByModelLines","_moveDownByViewLines","_moveDownByModelLines","_moveToViewMinColumn","_moveToViewFirstNonWhitespaceColumn","_moveToViewCenterColumn","_moveToViewMaxColumn","_moveToViewLastNonWhitespaceColumn","visibleModelRange","modelLineNumber","_firstLineNumberInRange","modelColumn","_moveToModelPosition","_lastLineNumberInRange","round","visibleViewRange","findPositionInViewportIfOutside","viewColumn","_moveToViewPosition","noOfColumns","newViewState","moveLeft","newViewModelPosition","halfLine","moveRight","linesCount","moveDown","moveUp","toViewColumn","toModelLineNumber","toModelColumn","getLineLastNonWhitespaceColumn","isCursorMoveArgs","arg","cursorMoveArg","to","by","parse","RawDirection","Left","Right","Up","Down","WrappedLineStart","WrappedLineFirstNonWhitespaceCharacter","WrappedLineColumnCenter","WrappedLineEnd","WrappedLineLastNonWhitespaceCharacter","ViewPortTop","ViewPortBottom","ViewPortCenter","ViewPortIfOutside","RawUnit","Line","WrappedLine","Character","HalfLine","description","name","constraint","schema","DeleteOperations","deleteRight","deleteSelection","rightOfPosition","right","_isAutoClosingPairDelete","character","foundAutoClosingPair","_runAutoClosingPairDelete","deleteLeft","firstNonWhitespaceIndex","lastIndentationColumn","fromVisibleColumn","toVisibleColumn","toColumn","leftOfPosition","left","EditOperation","insert","delete","replace","replaceMove","WordOperations","_createWord","wordType","nextCharClass","_findPreviousWordOnLine","_doFindPreviousWordOnLine","chIndex","chCode","chClass","_findEndOfWord","_findNextWordOnLine","_doFindNextWordOnLine","_findStartOfWord","moveWordLeft","wordNavigationType","movedToPreviousLine","prevWordOnLine","lastWhitespaceColumn","_moveWordPartLeft","rightRight","moveWordRight","movedDown","nextWordOnLine","_moveWordPartRight","_deleteWordLeftWhitespace","lastNonWhitespace","deleteWordLeft","whitespaceHeuristics","_deleteWordPartLeft","toPosition","_findFirstNonWhitespaceChar","_deleteWordRightWhitespace","deleteWordRight","_deleteWordPartRight","startColumn_1","endColumn_1","prevWord","nextWord","possiblePosition","WordPartOperations","apply","arguments","deleteWordPartLeft","candidates","enforceDefined","deleteWordPartRight","moveWordPartLeft","moveWordPartRight","arr","filter","el","Boolean","LineTokens","tokens","_tokens","_tokensCount","_text","slicedEquals","sliceFromTokenIndex","sliceTokenCount","from","getCount","getStartOffset","tokenIndex","getMetadata","metadata","getLanguageId","getStandardTokenType","getTokenType","getForeground","getClassName","getClassNameFromMetadata","getInlineStyle","colorMap","getInlineStyleFromMetadata","getEndOffset","findTokenIndexAtOffset","findIndexInTokensArray","inflate","sliceAndInflate","startOffset","deltaOffset","SlicedLineTokens","convertToEndOffset","lineTextLength","tokenCount","lastTokenIndex","desiredIndex","low","high","mid","_source","_startOffset","_endOffset","_deltaOffset","_firstTokenIndex","tokenStartOffset","tokenEndOffset","WordCharacterClassifier","once","computeFn","cache","input","getMapForWordSeparators","CursorPosition","MoveOperations","leftPosition","rightPosition","down","allowMoveOnLastLine","currentVisibleColumn","up","allowMoveOnFirstLine","relevantColumnNumber","lastColumn","ColumnSelection","columnSelect","fromLineNumber","toLineNumber","abs","reversed","isRTL","isLTR","visibleStartColumn","visibleEndColumn","viewStates","fromVisualColumn","toVisualColumn","columnSelectLeft","prevColumnSelectData","columnSelectRight","maxVisualViewColumn","minViewLineNumber","maxViewLineNumber","lineMaxViewColumn","lineMaxVisualViewColumn","columnSelectUp","isPaged","columnSelectDown"],"mappings":"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","file":"js/chunk-vendors~5c2514be.a708995b.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { CursorState, SingleCursorState } from './cursorCommon.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nimport { Selection } from '../core/selection.js';\r\nvar OneCursor = /** @class */ (function () {\r\n    function OneCursor(context) {\r\n        this._selTrackedRange = null;\r\n        this._trackSelection = true;\r\n        this._setState(context, new SingleCursorState(new Range(1, 1, 1, 1), 0, new Position(1, 1), 0), new SingleCursorState(new Range(1, 1, 1, 1), 0, new Position(1, 1), 0));\r\n    }\r\n    OneCursor.prototype.dispose = function (context) {\r\n        this._removeTrackedRange(context);\r\n    };\r\n    OneCursor.prototype.startTrackingSelection = function (context) {\r\n        this._trackSelection = true;\r\n        this._updateTrackedRange(context);\r\n    };\r\n    OneCursor.prototype.stopTrackingSelection = function (context) {\r\n        this._trackSelection = false;\r\n        this._removeTrackedRange(context);\r\n    };\r\n    OneCursor.prototype._updateTrackedRange = function (context) {\r\n        if (!this._trackSelection) {\r\n            // don't track the selection\r\n            return;\r\n        }\r\n        this._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, this.modelState.selection, 0 /* AlwaysGrowsWhenTypingAtEdges */);\r\n    };\r\n    OneCursor.prototype._removeTrackedRange = function (context) {\r\n        this._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, null, 0 /* AlwaysGrowsWhenTypingAtEdges */);\r\n    };\r\n    OneCursor.prototype.asCursorState = function () {\r\n        return new CursorState(this.modelState, this.viewState);\r\n    };\r\n    OneCursor.prototype.readSelectionFromMarkers = function (context) {\r\n        var range = context.model._getTrackedRange(this._selTrackedRange);\r\n        if (this.modelState.selection.getDirection() === 0 /* LTR */) {\r\n            return new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\r\n        }\r\n        return new Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);\r\n    };\r\n    OneCursor.prototype.ensureValidState = function (context) {\r\n        this._setState(context, this.modelState, this.viewState);\r\n    };\r\n    OneCursor.prototype.setState = function (context, modelState, viewState) {\r\n        this._setState(context, modelState, viewState);\r\n    };\r\n    OneCursor.prototype._setState = function (context, modelState, viewState) {\r\n        if (!modelState) {\r\n            if (!viewState) {\r\n                return;\r\n            }\r\n            // We only have the view state => compute the model state\r\n            var selectionStart = context.model.validateRange(context.convertViewRangeToModelRange(viewState.selectionStart));\r\n            var position = context.model.validatePosition(context.convertViewPositionToModelPosition(viewState.position.lineNumber, viewState.position.column));\r\n            modelState = new SingleCursorState(selectionStart, viewState.selectionStartLeftoverVisibleColumns, position, viewState.leftoverVisibleColumns);\r\n        }\r\n        else {\r\n            // Validate new model state\r\n            var selectionStart = context.model.validateRange(modelState.selectionStart);\r\n            var selectionStartLeftoverVisibleColumns = modelState.selectionStart.equalsRange(selectionStart) ? modelState.selectionStartLeftoverVisibleColumns : 0;\r\n            var position = context.model.validatePosition(modelState.position);\r\n            var leftoverVisibleColumns = modelState.position.equals(position) ? modelState.leftoverVisibleColumns : 0;\r\n            modelState = new SingleCursorState(selectionStart, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns);\r\n        }\r\n        if (!viewState) {\r\n            // We only have the model state => compute the view state\r\n            var viewSelectionStart1 = context.convertModelPositionToViewPosition(new Position(modelState.selectionStart.startLineNumber, modelState.selectionStart.startColumn));\r\n            var viewSelectionStart2 = context.convertModelPositionToViewPosition(new Position(modelState.selectionStart.endLineNumber, modelState.selectionStart.endColumn));\r\n            var viewSelectionStart = new Range(viewSelectionStart1.lineNumber, viewSelectionStart1.column, viewSelectionStart2.lineNumber, viewSelectionStart2.column);\r\n            var viewPosition = context.convertModelPositionToViewPosition(modelState.position);\r\n            viewState = new SingleCursorState(viewSelectionStart, modelState.selectionStartLeftoverVisibleColumns, viewPosition, modelState.leftoverVisibleColumns);\r\n        }\r\n        else {\r\n            // Validate new view state\r\n            var viewSelectionStart = context.validateViewRange(viewState.selectionStart, modelState.selectionStart);\r\n            var viewPosition = context.validateViewPosition(viewState.position, modelState.position);\r\n            viewState = new SingleCursorState(viewSelectionStart, modelState.selectionStartLeftoverVisibleColumns, viewPosition, modelState.leftoverVisibleColumns);\r\n        }\r\n        this.modelState = modelState;\r\n        this.viewState = viewState;\r\n        this._updateTrackedRange(context);\r\n    };\r\n    return OneCursor;\r\n}());\r\nexport { OneCursor };\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { CursorState } from './cursorCommon.js';\r\nimport { OneCursor } from './oneCursor.js';\r\nimport { Selection } from '../core/selection.js';\r\nvar CursorCollection = /** @class */ (function () {\r\n    function CursorCollection(context) {\r\n        this.context = context;\r\n        this.primaryCursor = new OneCursor(context);\r\n        this.secondaryCursors = [];\r\n        this.lastAddedCursorIndex = 0;\r\n    }\r\n    CursorCollection.prototype.dispose = function () {\r\n        this.primaryCursor.dispose(this.context);\r\n        this.killSecondaryCursors();\r\n    };\r\n    CursorCollection.prototype.startTrackingSelections = function () {\r\n        this.primaryCursor.startTrackingSelection(this.context);\r\n        for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            this.secondaryCursors[i].startTrackingSelection(this.context);\r\n        }\r\n    };\r\n    CursorCollection.prototype.stopTrackingSelections = function () {\r\n        this.primaryCursor.stopTrackingSelection(this.context);\r\n        for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            this.secondaryCursors[i].stopTrackingSelection(this.context);\r\n        }\r\n    };\r\n    CursorCollection.prototype.updateContext = function (context) {\r\n        this.context = context;\r\n    };\r\n    CursorCollection.prototype.ensureValidState = function () {\r\n        this.primaryCursor.ensureValidState(this.context);\r\n        for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            this.secondaryCursors[i].ensureValidState(this.context);\r\n        }\r\n    };\r\n    CursorCollection.prototype.readSelectionFromMarkers = function () {\r\n        var result = [];\r\n        result[0] = this.primaryCursor.readSelectionFromMarkers(this.context);\r\n        for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            result[i + 1] = this.secondaryCursors[i].readSelectionFromMarkers(this.context);\r\n        }\r\n        return result;\r\n    };\r\n    CursorCollection.prototype.getAll = function () {\r\n        var result = [];\r\n        result[0] = this.primaryCursor.asCursorState();\r\n        for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            result[i + 1] = this.secondaryCursors[i].asCursorState();\r\n        }\r\n        return result;\r\n    };\r\n    CursorCollection.prototype.getViewPositions = function () {\r\n        var result = [];\r\n        result[0] = this.primaryCursor.viewState.position;\r\n        for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            result[i + 1] = this.secondaryCursors[i].viewState.position;\r\n        }\r\n        return result;\r\n    };\r\n    CursorCollection.prototype.getSelections = function () {\r\n        var result = [];\r\n        result[0] = this.primaryCursor.modelState.selection;\r\n        for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            result[i + 1] = this.secondaryCursors[i].modelState.selection;\r\n        }\r\n        return result;\r\n    };\r\n    CursorCollection.prototype.getViewSelections = function () {\r\n        var result = [];\r\n        result[0] = this.primaryCursor.viewState.selection;\r\n        for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            result[i + 1] = this.secondaryCursors[i].viewState.selection;\r\n        }\r\n        return result;\r\n    };\r\n    CursorCollection.prototype.setSelections = function (selections) {\r\n        this.setStates(CursorState.fromModelSelections(selections));\r\n    };\r\n    CursorCollection.prototype.getPrimaryCursor = function () {\r\n        return this.primaryCursor.asCursorState();\r\n    };\r\n    CursorCollection.prototype.setStates = function (states) {\r\n        if (states === null) {\r\n            return;\r\n        }\r\n        this.primaryCursor.setState(this.context, states[0].modelState, states[0].viewState);\r\n        this._setSecondaryStates(states.slice(1));\r\n    };\r\n    /**\r\n     * Creates or disposes secondary cursors as necessary to match the number of `secondarySelections`.\r\n     */\r\n    CursorCollection.prototype._setSecondaryStates = function (secondaryStates) {\r\n        var secondaryCursorsLength = this.secondaryCursors.length;\r\n        var secondaryStatesLength = secondaryStates.length;\r\n        if (secondaryCursorsLength < secondaryStatesLength) {\r\n            var createCnt = secondaryStatesLength - secondaryCursorsLength;\r\n            for (var i = 0; i < createCnt; i++) {\r\n                this._addSecondaryCursor();\r\n            }\r\n        }\r\n        else if (secondaryCursorsLength > secondaryStatesLength) {\r\n            var removeCnt = secondaryCursorsLength - secondaryStatesLength;\r\n            for (var i = 0; i < removeCnt; i++) {\r\n                this._removeSecondaryCursor(this.secondaryCursors.length - 1);\r\n            }\r\n        }\r\n        for (var i = 0; i < secondaryStatesLength; i++) {\r\n            this.secondaryCursors[i].setState(this.context, secondaryStates[i].modelState, secondaryStates[i].viewState);\r\n        }\r\n    };\r\n    CursorCollection.prototype.killSecondaryCursors = function () {\r\n        this._setSecondaryStates([]);\r\n    };\r\n    CursorCollection.prototype._addSecondaryCursor = function () {\r\n        this.secondaryCursors.push(new OneCursor(this.context));\r\n        this.lastAddedCursorIndex = this.secondaryCursors.length;\r\n    };\r\n    CursorCollection.prototype.getLastAddedCursorIndex = function () {\r\n        if (this.secondaryCursors.length === 0 || this.lastAddedCursorIndex === 0) {\r\n            return 0;\r\n        }\r\n        return this.lastAddedCursorIndex;\r\n    };\r\n    CursorCollection.prototype._removeSecondaryCursor = function (removeIndex) {\r\n        if (this.lastAddedCursorIndex >= removeIndex + 1) {\r\n            this.lastAddedCursorIndex--;\r\n        }\r\n        this.secondaryCursors[removeIndex].dispose(this.context);\r\n        this.secondaryCursors.splice(removeIndex, 1);\r\n    };\r\n    CursorCollection.prototype._getAll = function () {\r\n        var result = [];\r\n        result[0] = this.primaryCursor;\r\n        for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\r\n            result[i + 1] = this.secondaryCursors[i];\r\n        }\r\n        return result;\r\n    };\r\n    CursorCollection.prototype.normalize = function () {\r\n        if (this.secondaryCursors.length === 0) {\r\n            return;\r\n        }\r\n        var cursors = this._getAll();\r\n        var sortedCursors = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            sortedCursors.push({\r\n                index: i,\r\n                selection: cursors[i].modelState.selection,\r\n            });\r\n        }\r\n        sortedCursors.sort(function (a, b) {\r\n            if (a.selection.startLineNumber === b.selection.startLineNumber) {\r\n                return a.selection.startColumn - b.selection.startColumn;\r\n            }\r\n            return a.selection.startLineNumber - b.selection.startLineNumber;\r\n        });\r\n        for (var sortedCursorIndex = 0; sortedCursorIndex < sortedCursors.length - 1; sortedCursorIndex++) {\r\n            var current = sortedCursors[sortedCursorIndex];\r\n            var next = sortedCursors[sortedCursorIndex + 1];\r\n            var currentSelection = current.selection;\r\n            var nextSelection = next.selection;\r\n            if (!this.context.config.multiCursorMergeOverlapping) {\r\n                continue;\r\n            }\r\n            var shouldMergeCursors = void 0;\r\n            if (nextSelection.isEmpty() || currentSelection.isEmpty()) {\r\n                // Merge touching cursors if one of them is collapsed\r\n                shouldMergeCursors = nextSelection.getStartPosition().isBeforeOrEqual(currentSelection.getEndPosition());\r\n            }\r\n            else {\r\n                // Merge only overlapping cursors (i.e. allow touching ranges)\r\n                shouldMergeCursors = nextSelection.getStartPosition().isBefore(currentSelection.getEndPosition());\r\n            }\r\n            if (shouldMergeCursors) {\r\n                var winnerSortedCursorIndex = current.index < next.index ? sortedCursorIndex : sortedCursorIndex + 1;\r\n                var looserSortedCursorIndex = current.index < next.index ? sortedCursorIndex + 1 : sortedCursorIndex;\r\n                var looserIndex = sortedCursors[looserSortedCursorIndex].index;\r\n                var winnerIndex = sortedCursors[winnerSortedCursorIndex].index;\r\n                var looserSelection = sortedCursors[looserSortedCursorIndex].selection;\r\n                var winnerSelection = sortedCursors[winnerSortedCursorIndex].selection;\r\n                if (!looserSelection.equalsSelection(winnerSelection)) {\r\n                    var resultingRange = looserSelection.plusRange(winnerSelection);\r\n                    var looserSelectionIsLTR = (looserSelection.selectionStartLineNumber === looserSelection.startLineNumber && looserSelection.selectionStartColumn === looserSelection.startColumn);\r\n                    var winnerSelectionIsLTR = (winnerSelection.selectionStartLineNumber === winnerSelection.startLineNumber && winnerSelection.selectionStartColumn === winnerSelection.startColumn);\r\n                    // Give more importance to the last added cursor (think Ctrl-dragging + hitting another cursor)\r\n                    var resultingSelectionIsLTR = void 0;\r\n                    if (looserIndex === this.lastAddedCursorIndex) {\r\n                        resultingSelectionIsLTR = looserSelectionIsLTR;\r\n                        this.lastAddedCursorIndex = winnerIndex;\r\n                    }\r\n                    else {\r\n                        // Winner takes it all\r\n                        resultingSelectionIsLTR = winnerSelectionIsLTR;\r\n                    }\r\n                    var resultingSelection = void 0;\r\n                    if (resultingSelectionIsLTR) {\r\n                        resultingSelection = new Selection(resultingRange.startLineNumber, resultingRange.startColumn, resultingRange.endLineNumber, resultingRange.endColumn);\r\n                    }\r\n                    else {\r\n                        resultingSelection = new Selection(resultingRange.endLineNumber, resultingRange.endColumn, resultingRange.startLineNumber, resultingRange.startColumn);\r\n                    }\r\n                    sortedCursors[winnerSortedCursorIndex].selection = resultingSelection;\r\n                    var resultingState = CursorState.fromModelSelection(resultingSelection);\r\n                    cursors[winnerIndex].setState(this.context, resultingState.modelState, resultingState.viewState);\r\n                }\r\n                for (var _i = 0, sortedCursors_1 = sortedCursors; _i < sortedCursors_1.length; _i++) {\r\n                    var sortedCursor = sortedCursors_1[_i];\r\n                    if (sortedCursor.index > looserIndex) {\r\n                        sortedCursor.index--;\r\n                    }\r\n                }\r\n                cursors.splice(looserIndex, 1);\r\n                sortedCursors.splice(looserSortedCursorIndex, 1);\r\n                this._removeSecondaryCursor(looserIndex - 1);\r\n                sortedCursorIndex--;\r\n            }\r\n        }\r\n    };\r\n    return CursorCollection;\r\n}());\r\nexport { CursorCollection };\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { onUnexpectedError } from '../../../base/common/errors.js';\r\nimport { Emitter } from '../../../base/common/event.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { CursorCollection } from './cursorCollection.js';\r\nimport { CursorColumns, CursorConfiguration, CursorContext, CursorState, EditOperationResult } from './cursorCommon.js';\r\nimport { DeleteOperations } from './cursorDeleteOperations.js';\r\nimport { TypeOperations, TypeWithAutoClosingCommand } from './cursorTypeOperations.js';\r\nimport { Range } from '../core/range.js';\r\nimport { Selection } from '../core/selection.js';\r\nimport * as editorCommon from '../editorCommon.js';\r\nimport * as viewEvents from '../view/viewEvents.js';\r\nimport { dispose } from '../../../base/common/lifecycle.js';\r\nfunction containsLineMappingChanged(events) {\r\n    for (var i = 0, len = events.length; i < len; i++) {\r\n        if (events[i].type === 8 /* ViewLineMappingChanged */) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nvar CursorStateChangedEvent = /** @class */ (function () {\r\n    function CursorStateChangedEvent(selections, modelVersionId, oldSelections, oldModelVersionId, source, reason) {\r\n        this.selections = selections;\r\n        this.modelVersionId = modelVersionId;\r\n        this.oldSelections = oldSelections;\r\n        this.oldModelVersionId = oldModelVersionId;\r\n        this.source = source;\r\n        this.reason = reason;\r\n    }\r\n    return CursorStateChangedEvent;\r\n}());\r\nexport { CursorStateChangedEvent };\r\n/**\r\n * A snapshot of the cursor and the model state\r\n */\r\nvar CursorModelState = /** @class */ (function () {\r\n    function CursorModelState(model, cursor) {\r\n        this.modelVersionId = model.getVersionId();\r\n        this.cursorState = cursor.getAll();\r\n    }\r\n    CursorModelState.prototype.equals = function (other) {\r\n        if (!other) {\r\n            return false;\r\n        }\r\n        if (this.modelVersionId !== other.modelVersionId) {\r\n            return false;\r\n        }\r\n        if (this.cursorState.length !== other.cursorState.length) {\r\n            return false;\r\n        }\r\n        for (var i = 0, len = this.cursorState.length; i < len; i++) {\r\n            if (!this.cursorState[i].equals(other.cursorState[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    return CursorModelState;\r\n}());\r\nexport { CursorModelState };\r\nvar AutoClosedAction = /** @class */ (function () {\r\n    function AutoClosedAction(model, autoClosedCharactersDecorations, autoClosedEnclosingDecorations) {\r\n        this._model = model;\r\n        this._autoClosedCharactersDecorations = autoClosedCharactersDecorations;\r\n        this._autoClosedEnclosingDecorations = autoClosedEnclosingDecorations;\r\n    }\r\n    AutoClosedAction.getAllAutoClosedCharacters = function (autoClosedActions) {\r\n        var autoClosedCharacters = [];\r\n        for (var _i = 0, autoClosedActions_1 = autoClosedActions; _i < autoClosedActions_1.length; _i++) {\r\n            var autoClosedAction = autoClosedActions_1[_i];\r\n            autoClosedCharacters = autoClosedCharacters.concat(autoClosedAction.getAutoClosedCharactersRanges());\r\n        }\r\n        return autoClosedCharacters;\r\n    };\r\n    AutoClosedAction.prototype.dispose = function () {\r\n        this._autoClosedCharactersDecorations = this._model.deltaDecorations(this._autoClosedCharactersDecorations, []);\r\n        this._autoClosedEnclosingDecorations = this._model.deltaDecorations(this._autoClosedEnclosingDecorations, []);\r\n    };\r\n    AutoClosedAction.prototype.getAutoClosedCharactersRanges = function () {\r\n        var result = [];\r\n        for (var i = 0; i < this._autoClosedCharactersDecorations.length; i++) {\r\n            var decorationRange = this._model.getDecorationRange(this._autoClosedCharactersDecorations[i]);\r\n            if (decorationRange) {\r\n                result.push(decorationRange);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    AutoClosedAction.prototype.isValid = function (selections) {\r\n        var enclosingRanges = [];\r\n        for (var i = 0; i < this._autoClosedEnclosingDecorations.length; i++) {\r\n            var decorationRange = this._model.getDecorationRange(this._autoClosedEnclosingDecorations[i]);\r\n            if (decorationRange) {\r\n                enclosingRanges.push(decorationRange);\r\n                if (decorationRange.startLineNumber !== decorationRange.endLineNumber) {\r\n                    // Stop tracking if the range becomes multiline...\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        enclosingRanges.sort(Range.compareRangesUsingStarts);\r\n        selections.sort(Range.compareRangesUsingStarts);\r\n        for (var i = 0; i < selections.length; i++) {\r\n            if (i >= enclosingRanges.length) {\r\n                return false;\r\n            }\r\n            if (!enclosingRanges[i].strictContainsRange(selections[i])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    return AutoClosedAction;\r\n}());\r\nvar Cursor = /** @class */ (function (_super) {\r\n    __extends(Cursor, _super);\r\n    function Cursor(configuration, model, viewModel) {\r\n        var _this = _super.call(this) || this;\r\n        _this._onDidReachMaxCursorCount = _this._register(new Emitter());\r\n        _this.onDidReachMaxCursorCount = _this._onDidReachMaxCursorCount.event;\r\n        _this._onDidAttemptReadOnlyEdit = _this._register(new Emitter());\r\n        _this.onDidAttemptReadOnlyEdit = _this._onDidAttemptReadOnlyEdit.event;\r\n        _this._onDidChange = _this._register(new Emitter());\r\n        _this.onDidChange = _this._onDidChange.event;\r\n        _this._configuration = configuration;\r\n        _this._model = model;\r\n        _this._knownModelVersionId = _this._model.getVersionId();\r\n        _this._viewModel = viewModel;\r\n        _this.context = new CursorContext(_this._configuration, _this._model, _this._viewModel);\r\n        _this._cursors = new CursorCollection(_this.context);\r\n        _this._isHandling = false;\r\n        _this._isDoingComposition = false;\r\n        _this._selectionsWhenCompositionStarted = null;\r\n        _this._columnSelectData = null;\r\n        _this._autoClosedActions = [];\r\n        _this._prevEditOperationType = 0 /* Other */;\r\n        _this._register(_this._model.onDidChangeRawContent(function (e) {\r\n            _this._knownModelVersionId = e.versionId;\r\n            if (_this._isHandling) {\r\n                return;\r\n            }\r\n            var hadFlushEvent = e.containsEvent(1 /* Flush */);\r\n            _this._onModelContentChanged(hadFlushEvent);\r\n        }));\r\n        _this._register(viewModel.addEventListener(function (events) {\r\n            if (!containsLineMappingChanged(events)) {\r\n                return;\r\n            }\r\n            if (_this._knownModelVersionId !== _this._model.getVersionId()) {\r\n                // There are model change events that I didn't yet receive.\r\n                //\r\n                // This can happen when editing the model, and the view model receives the change events first,\r\n                // and the view model emits line mapping changed events, all before the cursor gets a chance to\r\n                // recover from markers.\r\n                //\r\n                // The model change listener above will be called soon and we'll ensure a valid cursor state there.\r\n                return;\r\n            }\r\n            // Ensure valid state\r\n            _this.setStates('viewModel', 0 /* NotSet */, _this.getAll());\r\n        }));\r\n        var updateCursorContext = function () {\r\n            _this.context = new CursorContext(_this._configuration, _this._model, _this._viewModel);\r\n            _this._cursors.updateContext(_this.context);\r\n        };\r\n        _this._register(_this._model.onDidChangeLanguage(function (e) {\r\n            updateCursorContext();\r\n        }));\r\n        _this._register(_this._model.onDidChangeLanguageConfiguration(function () {\r\n            updateCursorContext();\r\n        }));\r\n        _this._register(_this._model.onDidChangeOptions(function () {\r\n            updateCursorContext();\r\n        }));\r\n        _this._register(_this._configuration.onDidChange(function (e) {\r\n            if (CursorConfiguration.shouldRecreate(e)) {\r\n                updateCursorContext();\r\n            }\r\n        }));\r\n        return _this;\r\n    }\r\n    Cursor.prototype.dispose = function () {\r\n        this._cursors.dispose();\r\n        this._autoClosedActions = dispose(this._autoClosedActions);\r\n        _super.prototype.dispose.call(this);\r\n    };\r\n    Cursor.prototype._validateAutoClosedActions = function () {\r\n        if (this._autoClosedActions.length > 0) {\r\n            var selections = this._cursors.getSelections();\r\n            for (var i = 0; i < this._autoClosedActions.length; i++) {\r\n                var autoClosedAction = this._autoClosedActions[i];\r\n                if (!autoClosedAction.isValid(selections)) {\r\n                    autoClosedAction.dispose();\r\n                    this._autoClosedActions.splice(i, 1);\r\n                    i--;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    // ------ some getters/setters\r\n    Cursor.prototype.getPrimaryCursor = function () {\r\n        return this._cursors.getPrimaryCursor();\r\n    };\r\n    Cursor.prototype.getLastAddedCursorIndex = function () {\r\n        return this._cursors.getLastAddedCursorIndex();\r\n    };\r\n    Cursor.prototype.getAll = function () {\r\n        return this._cursors.getAll();\r\n    };\r\n    Cursor.prototype.setStates = function (source, reason, states) {\r\n        if (states !== null && states.length > Cursor.MAX_CURSOR_COUNT) {\r\n            states = states.slice(0, Cursor.MAX_CURSOR_COUNT);\r\n            this._onDidReachMaxCursorCount.fire(undefined);\r\n        }\r\n        var oldState = new CursorModelState(this._model, this);\r\n        this._cursors.setStates(states);\r\n        this._cursors.normalize();\r\n        this._columnSelectData = null;\r\n        this._validateAutoClosedActions();\r\n        this._emitStateChangedIfNecessary(source, reason, oldState);\r\n    };\r\n    Cursor.prototype.setColumnSelectData = function (columnSelectData) {\r\n        this._columnSelectData = columnSelectData;\r\n    };\r\n    Cursor.prototype.reveal = function (source, horizontal, target, scrollType) {\r\n        this._revealRange(source, target, 0 /* Simple */, horizontal, scrollType);\r\n    };\r\n    Cursor.prototype.revealRange = function (source, revealHorizontal, viewRange, verticalType, scrollType) {\r\n        this.emitCursorRevealRange(source, viewRange, verticalType, revealHorizontal, scrollType);\r\n    };\r\n    Cursor.prototype.scrollTo = function (desiredScrollTop) {\r\n        this._viewModel.viewLayout.setScrollPositionSmooth({\r\n            scrollTop: desiredScrollTop\r\n        });\r\n    };\r\n    Cursor.prototype.saveState = function () {\r\n        var result = [];\r\n        var selections = this._cursors.getSelections();\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            result.push({\r\n                inSelectionMode: !selection.isEmpty(),\r\n                selectionStart: {\r\n                    lineNumber: selection.selectionStartLineNumber,\r\n                    column: selection.selectionStartColumn,\r\n                },\r\n                position: {\r\n                    lineNumber: selection.positionLineNumber,\r\n                    column: selection.positionColumn,\r\n                }\r\n            });\r\n        }\r\n        return result;\r\n    };\r\n    Cursor.prototype.restoreState = function (states) {\r\n        var desiredSelections = [];\r\n        for (var i = 0, len = states.length; i < len; i++) {\r\n            var state = states[i];\r\n            var positionLineNumber = 1;\r\n            var positionColumn = 1;\r\n            // Avoid missing properties on the literal\r\n            if (state.position && state.position.lineNumber) {\r\n                positionLineNumber = state.position.lineNumber;\r\n            }\r\n            if (state.position && state.position.column) {\r\n                positionColumn = state.position.column;\r\n            }\r\n            var selectionStartLineNumber = positionLineNumber;\r\n            var selectionStartColumn = positionColumn;\r\n            // Avoid missing properties on the literal\r\n            if (state.selectionStart && state.selectionStart.lineNumber) {\r\n                selectionStartLineNumber = state.selectionStart.lineNumber;\r\n            }\r\n            if (state.selectionStart && state.selectionStart.column) {\r\n                selectionStartColumn = state.selectionStart.column;\r\n            }\r\n            desiredSelections.push({\r\n                selectionStartLineNumber: selectionStartLineNumber,\r\n                selectionStartColumn: selectionStartColumn,\r\n                positionLineNumber: positionLineNumber,\r\n                positionColumn: positionColumn\r\n            });\r\n        }\r\n        this.setStates('restoreState', 0 /* NotSet */, CursorState.fromModelSelections(desiredSelections));\r\n        this.reveal('restoreState', true, 0 /* Primary */, 1 /* Immediate */);\r\n    };\r\n    Cursor.prototype._onModelContentChanged = function (hadFlushEvent) {\r\n        this._prevEditOperationType = 0 /* Other */;\r\n        if (hadFlushEvent) {\r\n            // a model.setValue() was called\r\n            this._cursors.dispose();\r\n            this._cursors = new CursorCollection(this.context);\r\n            this._validateAutoClosedActions();\r\n            this._emitStateChangedIfNecessary('model', 1 /* ContentFlush */, null);\r\n        }\r\n        else {\r\n            var selectionsFromMarkers = this._cursors.readSelectionFromMarkers();\r\n            this.setStates('modelChange', 2 /* RecoverFromMarkers */, CursorState.fromModelSelections(selectionsFromMarkers));\r\n        }\r\n    };\r\n    Cursor.prototype.getSelection = function () {\r\n        return this._cursors.getPrimaryCursor().modelState.selection;\r\n    };\r\n    Cursor.prototype.getColumnSelectData = function () {\r\n        if (this._columnSelectData) {\r\n            return this._columnSelectData;\r\n        }\r\n        var primaryCursor = this._cursors.getPrimaryCursor();\r\n        var primaryPos = primaryCursor.viewState.selectionStart.getStartPosition();\r\n        var viewLineNumber = primaryPos.lineNumber;\r\n        var viewVisualColumn = CursorColumns.visibleColumnFromColumn2(this.context.config, this.context.viewModel, primaryPos);\r\n        return {\r\n            isReal: false,\r\n            fromViewLineNumber: viewLineNumber,\r\n            fromViewVisualColumn: viewVisualColumn,\r\n            toViewLineNumber: viewLineNumber,\r\n            toViewVisualColumn: viewVisualColumn,\r\n        };\r\n    };\r\n    Cursor.prototype.getSelections = function () {\r\n        return this._cursors.getSelections();\r\n    };\r\n    Cursor.prototype.getViewSelections = function () {\r\n        return this._cursors.getViewSelections();\r\n    };\r\n    Cursor.prototype.getPosition = function () {\r\n        return this._cursors.getPrimaryCursor().modelState.position;\r\n    };\r\n    Cursor.prototype.setSelections = function (source, selections) {\r\n        this.setStates(source, 0 /* NotSet */, CursorState.fromModelSelections(selections));\r\n    };\r\n    Cursor.prototype.getPrevEditOperationType = function () {\r\n        return this._prevEditOperationType;\r\n    };\r\n    Cursor.prototype.setPrevEditOperationType = function (type) {\r\n        this._prevEditOperationType = type;\r\n    };\r\n    // ------ auxiliary handling logic\r\n    Cursor.prototype._pushAutoClosedAction = function (autoClosedCharactersRanges, autoClosedEnclosingRanges) {\r\n        var autoClosedCharactersDeltaDecorations = [];\r\n        var autoClosedEnclosingDeltaDecorations = [];\r\n        for (var i = 0, len = autoClosedCharactersRanges.length; i < len; i++) {\r\n            autoClosedCharactersDeltaDecorations.push({\r\n                range: autoClosedCharactersRanges[i],\r\n                options: {\r\n                    inlineClassName: 'auto-closed-character',\r\n                    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */\r\n                }\r\n            });\r\n            autoClosedEnclosingDeltaDecorations.push({\r\n                range: autoClosedEnclosingRanges[i],\r\n                options: {\r\n                    stickiness: 1 /* NeverGrowsWhenTypingAtEdges */\r\n                }\r\n            });\r\n        }\r\n        var autoClosedCharactersDecorations = this._model.deltaDecorations([], autoClosedCharactersDeltaDecorations);\r\n        var autoClosedEnclosingDecorations = this._model.deltaDecorations([], autoClosedEnclosingDeltaDecorations);\r\n        this._autoClosedActions.push(new AutoClosedAction(this._model, autoClosedCharactersDecorations, autoClosedEnclosingDecorations));\r\n    };\r\n    Cursor.prototype._executeEditOperation = function (opResult) {\r\n        if (!opResult) {\r\n            // Nothing to execute\r\n            return;\r\n        }\r\n        if (opResult.shouldPushStackElementBefore) {\r\n            this._model.pushStackElement();\r\n        }\r\n        var result = CommandExecutor.executeCommands(this._model, this._cursors.getSelections(), opResult.commands);\r\n        if (result) {\r\n            // The commands were applied correctly\r\n            this._interpretCommandResult(result);\r\n            // Check for auto-closing closed characters\r\n            var autoClosedCharactersRanges = [];\r\n            var autoClosedEnclosingRanges = [];\r\n            for (var i = 0; i < opResult.commands.length; i++) {\r\n                var command = opResult.commands[i];\r\n                if (command instanceof TypeWithAutoClosingCommand && command.enclosingRange && command.closeCharacterRange) {\r\n                    autoClosedCharactersRanges.push(command.closeCharacterRange);\r\n                    autoClosedEnclosingRanges.push(command.enclosingRange);\r\n                }\r\n            }\r\n            if (autoClosedCharactersRanges.length > 0) {\r\n                this._pushAutoClosedAction(autoClosedCharactersRanges, autoClosedEnclosingRanges);\r\n            }\r\n            this._prevEditOperationType = opResult.type;\r\n        }\r\n        if (opResult.shouldPushStackElementAfter) {\r\n            this._model.pushStackElement();\r\n        }\r\n    };\r\n    Cursor.prototype._interpretCommandResult = function (cursorState) {\r\n        if (!cursorState || cursorState.length === 0) {\r\n            cursorState = this._cursors.readSelectionFromMarkers();\r\n        }\r\n        this._columnSelectData = null;\r\n        this._cursors.setSelections(cursorState);\r\n        this._cursors.normalize();\r\n    };\r\n    // -----------------------------------------------------------------------------------------------------------\r\n    // ----- emitting events\r\n    Cursor.prototype._emitStateChangedIfNecessary = function (source, reason, oldState) {\r\n        var newState = new CursorModelState(this._model, this);\r\n        if (newState.equals(oldState)) {\r\n            return false;\r\n        }\r\n        var selections = this._cursors.getSelections();\r\n        var viewSelections = this._cursors.getViewSelections();\r\n        // Let the view get the event first.\r\n        try {\r\n            var eventsCollector = this._beginEmit();\r\n            eventsCollector.emit(new viewEvents.ViewCursorStateChangedEvent(viewSelections, selections));\r\n        }\r\n        finally {\r\n            this._endEmit();\r\n        }\r\n        // Only after the view has been notified, let the rest of the world know...\r\n        if (!oldState\r\n            || oldState.cursorState.length !== newState.cursorState.length\r\n            || newState.cursorState.some(function (newCursorState, i) { return !newCursorState.modelState.equals(oldState.cursorState[i].modelState); })) {\r\n            var oldSelections = oldState ? oldState.cursorState.map(function (s) { return s.modelState.selection; }) : null;\r\n            var oldModelVersionId = oldState ? oldState.modelVersionId : 0;\r\n            this._onDidChange.fire(new CursorStateChangedEvent(selections, newState.modelVersionId, oldSelections, oldModelVersionId, source || 'keyboard', reason));\r\n        }\r\n        return true;\r\n    };\r\n    Cursor.prototype._revealRange = function (source, revealTarget, verticalType, revealHorizontal, scrollType) {\r\n        var viewPositions = this._cursors.getViewPositions();\r\n        var viewPosition = viewPositions[0];\r\n        if (revealTarget === 1 /* TopMost */) {\r\n            for (var i = 1; i < viewPositions.length; i++) {\r\n                if (viewPositions[i].isBefore(viewPosition)) {\r\n                    viewPosition = viewPositions[i];\r\n                }\r\n            }\r\n        }\r\n        else if (revealTarget === 2 /* BottomMost */) {\r\n            for (var i = 1; i < viewPositions.length; i++) {\r\n                if (viewPosition.isBeforeOrEqual(viewPositions[i])) {\r\n                    viewPosition = viewPositions[i];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (viewPositions.length > 1) {\r\n                // no revealing!\r\n                return;\r\n            }\r\n        }\r\n        var viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\r\n        this.emitCursorRevealRange(source, viewRange, verticalType, revealHorizontal, scrollType);\r\n    };\r\n    Cursor.prototype.emitCursorRevealRange = function (source, viewRange, verticalType, revealHorizontal, scrollType) {\r\n        try {\r\n            var eventsCollector = this._beginEmit();\r\n            eventsCollector.emit(new viewEvents.ViewRevealRangeRequestEvent(source, viewRange, verticalType, revealHorizontal, scrollType));\r\n        }\r\n        finally {\r\n            this._endEmit();\r\n        }\r\n    };\r\n    // -----------------------------------------------------------------------------------------------------------\r\n    // ----- handlers beyond this point\r\n    Cursor.prototype._findAutoClosingPairs = function (edits) {\r\n        if (!edits.length) {\r\n            return null;\r\n        }\r\n        var indices = [];\r\n        for (var i = 0, len = edits.length; i < len; i++) {\r\n            var edit = edits[i];\r\n            if (!edit.text || edit.text.indexOf('\\n') >= 0) {\r\n                return null;\r\n            }\r\n            var m = edit.text.match(/([)\\]}>'\"`])([^)\\]}>'\"`]*)$/);\r\n            if (!m) {\r\n                return null;\r\n            }\r\n            var closeChar = m[1];\r\n            var autoClosingPairsCandidates = this.context.config.autoClosingPairsClose2.get(closeChar);\r\n            if (!autoClosingPairsCandidates || autoClosingPairsCandidates.length !== 1) {\r\n                return null;\r\n            }\r\n            var openChar = autoClosingPairsCandidates[0].open;\r\n            var closeCharIndex = edit.text.length - m[2].length - 1;\r\n            var openCharIndex = edit.text.lastIndexOf(openChar, closeCharIndex - 1);\r\n            if (openCharIndex === -1) {\r\n                return null;\r\n            }\r\n            indices.push([openCharIndex, closeCharIndex]);\r\n        }\r\n        return indices;\r\n    };\r\n    Cursor.prototype.executeEdits = function (source, edits, cursorStateComputer) {\r\n        var _this = this;\r\n        var autoClosingIndices = null;\r\n        if (source === 'snippet') {\r\n            autoClosingIndices = this._findAutoClosingPairs(edits);\r\n        }\r\n        if (autoClosingIndices) {\r\n            edits[0]._isTracked = true;\r\n        }\r\n        var autoClosedCharactersRanges = [];\r\n        var autoClosedEnclosingRanges = [];\r\n        var selections = this._model.pushEditOperations(this.getSelections(), edits, function (undoEdits) {\r\n            if (autoClosingIndices) {\r\n                for (var i = 0, len = autoClosingIndices.length; i < len; i++) {\r\n                    var _a = autoClosingIndices[i], openCharInnerIndex = _a[0], closeCharInnerIndex = _a[1];\r\n                    var undoEdit = undoEdits[i];\r\n                    var lineNumber = undoEdit.range.startLineNumber;\r\n                    var openCharIndex = undoEdit.range.startColumn - 1 + openCharInnerIndex;\r\n                    var closeCharIndex = undoEdit.range.startColumn - 1 + closeCharInnerIndex;\r\n                    autoClosedCharactersRanges.push(new Range(lineNumber, closeCharIndex + 1, lineNumber, closeCharIndex + 2));\r\n                    autoClosedEnclosingRanges.push(new Range(lineNumber, openCharIndex + 1, lineNumber, closeCharIndex + 2));\r\n                }\r\n            }\r\n            var selections = cursorStateComputer(undoEdits);\r\n            if (selections) {\r\n                // Don't recover the selection from markers because\r\n                // we know what it should be.\r\n                _this._isHandling = true;\r\n            }\r\n            return selections;\r\n        });\r\n        if (selections) {\r\n            this._isHandling = false;\r\n            this.setSelections(source, selections);\r\n        }\r\n        if (autoClosedCharactersRanges.length > 0) {\r\n            this._pushAutoClosedAction(autoClosedCharactersRanges, autoClosedEnclosingRanges);\r\n        }\r\n    };\r\n    Cursor.prototype.trigger = function (source, handlerId, payload) {\r\n        var H = editorCommon.Handler;\r\n        if (handlerId === H.CompositionStart) {\r\n            this._isDoingComposition = true;\r\n            this._selectionsWhenCompositionStarted = this.getSelections().slice(0);\r\n            return;\r\n        }\r\n        if (handlerId === H.CompositionEnd) {\r\n            this._isDoingComposition = false;\r\n        }\r\n        if (this._configuration.options.get(68 /* readOnly */)) {\r\n            // All the remaining handlers will try to edit the model,\r\n            // but we cannot edit when read only...\r\n            this._onDidAttemptReadOnlyEdit.fire(undefined);\r\n            return;\r\n        }\r\n        var oldState = new CursorModelState(this._model, this);\r\n        var cursorChangeReason = 0 /* NotSet */;\r\n        if (handlerId !== H.Undo && handlerId !== H.Redo) {\r\n            // TODO@Alex: if the undo/redo stack contains non-null selections\r\n            // it would also be OK to stop tracking selections here\r\n            this._cursors.stopTrackingSelections();\r\n        }\r\n        // ensure valid state on all cursors\r\n        this._cursors.ensureValidState();\r\n        this._isHandling = true;\r\n        try {\r\n            switch (handlerId) {\r\n                case H.Type:\r\n                    this._type(source, payload.text);\r\n                    break;\r\n                case H.ReplacePreviousChar:\r\n                    this._replacePreviousChar(payload.text, payload.replaceCharCnt);\r\n                    break;\r\n                case H.Paste:\r\n                    cursorChangeReason = 4 /* Paste */;\r\n                    this._paste(payload.text, payload.pasteOnNewLine, payload.multicursorText || []);\r\n                    break;\r\n                case H.Cut:\r\n                    this._cut();\r\n                    break;\r\n                case H.Undo:\r\n                    cursorChangeReason = 5 /* Undo */;\r\n                    this._interpretCommandResult(this._model.undo());\r\n                    break;\r\n                case H.Redo:\r\n                    cursorChangeReason = 6 /* Redo */;\r\n                    this._interpretCommandResult(this._model.redo());\r\n                    break;\r\n                case H.ExecuteCommand:\r\n                    this._externalExecuteCommand(payload);\r\n                    break;\r\n                case H.ExecuteCommands:\r\n                    this._externalExecuteCommands(payload);\r\n                    break;\r\n                case H.CompositionEnd:\r\n                    this._interpretCompositionEnd(source);\r\n                    break;\r\n            }\r\n        }\r\n        catch (err) {\r\n            onUnexpectedError(err);\r\n        }\r\n        this._isHandling = false;\r\n        if (handlerId !== H.Undo && handlerId !== H.Redo) {\r\n            this._cursors.startTrackingSelections();\r\n        }\r\n        this._validateAutoClosedActions();\r\n        if (this._emitStateChangedIfNecessary(source, cursorChangeReason, oldState)) {\r\n            this._revealRange(source, 0 /* Primary */, 0 /* Simple */, true, 0 /* Smooth */);\r\n        }\r\n    };\r\n    Cursor.prototype._interpretCompositionEnd = function (source) {\r\n        if (!this._isDoingComposition && source === 'keyboard') {\r\n            // composition finishes, let's check if we need to auto complete if necessary.\r\n            var autoClosedCharacters = AutoClosedAction.getAllAutoClosedCharacters(this._autoClosedActions);\r\n            this._executeEditOperation(TypeOperations.compositionEndWithInterceptors(this._prevEditOperationType, this.context.config, this.context.model, this._selectionsWhenCompositionStarted, this.getSelections(), autoClosedCharacters));\r\n            this._selectionsWhenCompositionStarted = null;\r\n        }\r\n    };\r\n    Cursor.prototype._type = function (source, text) {\r\n        if (!this._isDoingComposition && source === 'keyboard') {\r\n            // If this event is coming straight from the keyboard, look for electric characters and enter\r\n            var len = text.length;\r\n            var offset = 0;\r\n            while (offset < len) {\r\n                var charLength = strings.nextCharLength(text, offset);\r\n                var chr = text.substr(offset, charLength);\r\n                // Here we must interpret each typed character individually\r\n                var autoClosedCharacters = AutoClosedAction.getAllAutoClosedCharacters(this._autoClosedActions);\r\n                this._executeEditOperation(TypeOperations.typeWithInterceptors(this._prevEditOperationType, this.context.config, this.context.model, this.getSelections(), autoClosedCharacters, chr));\r\n                offset += charLength;\r\n            }\r\n        }\r\n        else {\r\n            this._executeEditOperation(TypeOperations.typeWithoutInterceptors(this._prevEditOperationType, this.context.config, this.context.model, this.getSelections(), text));\r\n        }\r\n    };\r\n    Cursor.prototype._replacePreviousChar = function (text, replaceCharCnt) {\r\n        this._executeEditOperation(TypeOperations.replacePreviousChar(this._prevEditOperationType, this.context.config, this.context.model, this.getSelections(), text, replaceCharCnt));\r\n    };\r\n    Cursor.prototype._paste = function (text, pasteOnNewLine, multicursorText) {\r\n        this._executeEditOperation(TypeOperations.paste(this.context.config, this.context.model, this.getSelections(), text, pasteOnNewLine, multicursorText));\r\n    };\r\n    Cursor.prototype._cut = function () {\r\n        this._executeEditOperation(DeleteOperations.cut(this.context.config, this.context.model, this.getSelections()));\r\n    };\r\n    Cursor.prototype._externalExecuteCommand = function (command) {\r\n        this._cursors.killSecondaryCursors();\r\n        this._executeEditOperation(new EditOperationResult(0 /* Other */, [command], {\r\n            shouldPushStackElementBefore: false,\r\n            shouldPushStackElementAfter: false\r\n        }));\r\n    };\r\n    Cursor.prototype._externalExecuteCommands = function (commands) {\r\n        this._executeEditOperation(new EditOperationResult(0 /* Other */, commands, {\r\n            shouldPushStackElementBefore: false,\r\n            shouldPushStackElementAfter: false\r\n        }));\r\n    };\r\n    Cursor.MAX_CURSOR_COUNT = 10000;\r\n    return Cursor;\r\n}(viewEvents.ViewEventEmitter));\r\nexport { Cursor };\r\nvar CommandExecutor = /** @class */ (function () {\r\n    function CommandExecutor() {\r\n    }\r\n    CommandExecutor.executeCommands = function (model, selectionsBefore, commands) {\r\n        var ctx = {\r\n            model: model,\r\n            selectionsBefore: selectionsBefore,\r\n            trackedRanges: [],\r\n            trackedRangesDirection: []\r\n        };\r\n        var result = this._innerExecuteCommands(ctx, commands);\r\n        for (var i = 0, len = ctx.trackedRanges.length; i < len; i++) {\r\n            ctx.model._setTrackedRange(ctx.trackedRanges[i], null, 0 /* AlwaysGrowsWhenTypingAtEdges */);\r\n        }\r\n        return result;\r\n    };\r\n    CommandExecutor._innerExecuteCommands = function (ctx, commands) {\r\n        if (this._arrayIsEmpty(commands)) {\r\n            return null;\r\n        }\r\n        var commandsData = this._getEditOperations(ctx, commands);\r\n        if (commandsData.operations.length === 0) {\r\n            return null;\r\n        }\r\n        var rawOperations = commandsData.operations;\r\n        var loserCursorsMap = this._getLoserCursorMap(rawOperations);\r\n        if (loserCursorsMap.hasOwnProperty('0')) {\r\n            // These commands are very messed up\r\n            console.warn('Ignoring commands');\r\n            return null;\r\n        }\r\n        // Remove operations belonging to losing cursors\r\n        var filteredOperations = [];\r\n        for (var i = 0, len = rawOperations.length; i < len; i++) {\r\n            if (!loserCursorsMap.hasOwnProperty(rawOperations[i].identifier.major.toString())) {\r\n                filteredOperations.push(rawOperations[i]);\r\n            }\r\n        }\r\n        // TODO@Alex: find a better way to do this.\r\n        // give the hint that edit operations are tracked to the model\r\n        if (commandsData.hadTrackedEditOperation && filteredOperations.length > 0) {\r\n            filteredOperations[0]._isTracked = true;\r\n        }\r\n        var selectionsAfter = ctx.model.pushEditOperations(ctx.selectionsBefore, filteredOperations, function (inverseEditOperations) {\r\n            var groupedInverseEditOperations = [];\r\n            for (var i = 0; i < ctx.selectionsBefore.length; i++) {\r\n                groupedInverseEditOperations[i] = [];\r\n            }\r\n            for (var _i = 0, inverseEditOperations_1 = inverseEditOperations; _i < inverseEditOperations_1.length; _i++) {\r\n                var op = inverseEditOperations_1[_i];\r\n                if (!op.identifier) {\r\n                    // perhaps auto whitespace trim edits\r\n                    continue;\r\n                }\r\n                groupedInverseEditOperations[op.identifier.major].push(op);\r\n            }\r\n            var minorBasedSorter = function (a, b) {\r\n                return a.identifier.minor - b.identifier.minor;\r\n            };\r\n            var cursorSelections = [];\r\n            var _loop_1 = function (i) {\r\n                if (groupedInverseEditOperations[i].length > 0) {\r\n                    groupedInverseEditOperations[i].sort(minorBasedSorter);\r\n                    cursorSelections[i] = commands[i].computeCursorState(ctx.model, {\r\n                        getInverseEditOperations: function () {\r\n                            return groupedInverseEditOperations[i];\r\n                        },\r\n                        getTrackedSelection: function (id) {\r\n                            var idx = parseInt(id, 10);\r\n                            var range = ctx.model._getTrackedRange(ctx.trackedRanges[idx]);\r\n                            if (ctx.trackedRangesDirection[idx] === 0 /* LTR */) {\r\n                                return new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\r\n                            }\r\n                            return new Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);\r\n                        }\r\n                    });\r\n                }\r\n                else {\r\n                    cursorSelections[i] = ctx.selectionsBefore[i];\r\n                }\r\n            };\r\n            for (var i = 0; i < ctx.selectionsBefore.length; i++) {\r\n                _loop_1(i);\r\n            }\r\n            return cursorSelections;\r\n        });\r\n        if (!selectionsAfter) {\r\n            selectionsAfter = ctx.selectionsBefore;\r\n        }\r\n        // Extract losing cursors\r\n        var losingCursors = [];\r\n        for (var losingCursorIndex in loserCursorsMap) {\r\n            if (loserCursorsMap.hasOwnProperty(losingCursorIndex)) {\r\n                losingCursors.push(parseInt(losingCursorIndex, 10));\r\n            }\r\n        }\r\n        // Sort losing cursors descending\r\n        losingCursors.sort(function (a, b) {\r\n            return b - a;\r\n        });\r\n        // Remove losing cursors\r\n        for (var _i = 0, losingCursors_1 = losingCursors; _i < losingCursors_1.length; _i++) {\r\n            var losingCursor = losingCursors_1[_i];\r\n            selectionsAfter.splice(losingCursor, 1);\r\n        }\r\n        return selectionsAfter;\r\n    };\r\n    CommandExecutor._arrayIsEmpty = function (commands) {\r\n        for (var i = 0, len = commands.length; i < len; i++) {\r\n            if (commands[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    CommandExecutor._getEditOperations = function (ctx, commands) {\r\n        var operations = [];\r\n        var hadTrackedEditOperation = false;\r\n        for (var i = 0, len = commands.length; i < len; i++) {\r\n            var command = commands[i];\r\n            if (command) {\r\n                var r = this._getEditOperationsFromCommand(ctx, i, command);\r\n                operations = operations.concat(r.operations);\r\n                hadTrackedEditOperation = hadTrackedEditOperation || r.hadTrackedEditOperation;\r\n            }\r\n        }\r\n        return {\r\n            operations: operations,\r\n            hadTrackedEditOperation: hadTrackedEditOperation\r\n        };\r\n    };\r\n    CommandExecutor._getEditOperationsFromCommand = function (ctx, majorIdentifier, command) {\r\n        // This method acts as a transaction, if the command fails\r\n        // everything it has done is ignored\r\n        var operations = [];\r\n        var operationMinor = 0;\r\n        var addEditOperation = function (selection, text, forceMoveMarkers) {\r\n            if (forceMoveMarkers === void 0) { forceMoveMarkers = false; }\r\n            if (selection.isEmpty() && text === '') {\r\n                // This command wants to add a no-op => no thank you\r\n                return;\r\n            }\r\n            operations.push({\r\n                identifier: {\r\n                    major: majorIdentifier,\r\n                    minor: operationMinor++\r\n                },\r\n                range: selection,\r\n                text: text,\r\n                forceMoveMarkers: forceMoveMarkers,\r\n                isAutoWhitespaceEdit: command.insertsAutoWhitespace\r\n            });\r\n        };\r\n        var hadTrackedEditOperation = false;\r\n        var addTrackedEditOperation = function (selection, text, forceMoveMarkers) {\r\n            hadTrackedEditOperation = true;\r\n            addEditOperation(selection, text, forceMoveMarkers);\r\n        };\r\n        var trackSelection = function (selection, trackPreviousOnEmpty) {\r\n            var stickiness;\r\n            if (selection.isEmpty()) {\r\n                if (typeof trackPreviousOnEmpty === 'boolean') {\r\n                    if (trackPreviousOnEmpty) {\r\n                        stickiness = 2 /* GrowsOnlyWhenTypingBefore */;\r\n                    }\r\n                    else {\r\n                        stickiness = 3 /* GrowsOnlyWhenTypingAfter */;\r\n                    }\r\n                }\r\n                else {\r\n                    // Try to lock it with surrounding text\r\n                    var maxLineColumn = ctx.model.getLineMaxColumn(selection.startLineNumber);\r\n                    if (selection.startColumn === maxLineColumn) {\r\n                        stickiness = 2 /* GrowsOnlyWhenTypingBefore */;\r\n                    }\r\n                    else {\r\n                        stickiness = 3 /* GrowsOnlyWhenTypingAfter */;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                stickiness = 1 /* NeverGrowsWhenTypingAtEdges */;\r\n            }\r\n            var l = ctx.trackedRanges.length;\r\n            var id = ctx.model._setTrackedRange(null, selection, stickiness);\r\n            ctx.trackedRanges[l] = id;\r\n            ctx.trackedRangesDirection[l] = selection.getDirection();\r\n            return l.toString();\r\n        };\r\n        var editOperationBuilder = {\r\n            addEditOperation: addEditOperation,\r\n            addTrackedEditOperation: addTrackedEditOperation,\r\n            trackSelection: trackSelection\r\n        };\r\n        try {\r\n            command.getEditOperations(ctx.model, editOperationBuilder);\r\n        }\r\n        catch (e) {\r\n            // TODO@Alex use notification service if this should be user facing\r\n            // e.friendlyMessage = nls.localize('corrupt.commands', \"Unexpected exception while executing command.\");\r\n            onUnexpectedError(e);\r\n            return {\r\n                operations: [],\r\n                hadTrackedEditOperation: false\r\n            };\r\n        }\r\n        return {\r\n            operations: operations,\r\n            hadTrackedEditOperation: hadTrackedEditOperation\r\n        };\r\n    };\r\n    CommandExecutor._getLoserCursorMap = function (operations) {\r\n        // This is destructive on the array\r\n        operations = operations.slice(0);\r\n        // Sort operations with last one first\r\n        operations.sort(function (a, b) {\r\n            // Note the minus!\r\n            return -(Range.compareRangesUsingEnds(a.range, b.range));\r\n        });\r\n        // Operations can not overlap!\r\n        var loserCursorsMap = {};\r\n        for (var i = 1; i < operations.length; i++) {\r\n            var previousOp = operations[i - 1];\r\n            var currentOp = operations[i];\r\n            if (previousOp.range.getStartPosition().isBefore(currentOp.range.getEndPosition())) {\r\n                var loserMajor = void 0;\r\n                if (previousOp.identifier.major > currentOp.identifier.major) {\r\n                    // previousOp loses the battle\r\n                    loserMajor = previousOp.identifier.major;\r\n                }\r\n                else {\r\n                    loserMajor = currentOp.identifier.major;\r\n                }\r\n                loserCursorsMap[loserMajor.toString()] = true;\r\n                for (var j = 0; j < operations.length; j++) {\r\n                    if (operations[j].identifier.major === loserMajor) {\r\n                        operations.splice(j, 1);\r\n                        if (j < i) {\r\n                            i--;\r\n                        }\r\n                        j--;\r\n                    }\r\n                }\r\n                if (i > 0) {\r\n                    i--;\r\n                }\r\n            }\r\n        }\r\n        return loserCursorsMap;\r\n    };\r\n    return CommandExecutor;\r\n}());\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { onUnexpectedError } from '../../../base/common/errors.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { ReplaceCommand, ReplaceCommandWithOffsetCursorState, ReplaceCommandWithoutChangingPosition, ReplaceCommandThatPreservesSelection } from '../commands/replaceCommand.js';\r\nimport { ShiftCommand } from '../commands/shiftCommand.js';\r\nimport { SurroundSelectionCommand } from '../commands/surroundSelectionCommand.js';\r\nimport { CursorColumns, EditOperationResult, isQuote } from './cursorCommon.js';\r\nimport { getMapForWordSeparators } from './wordCharacterClassifier.js';\r\nimport { Range } from '../core/range.js';\r\nimport { Selection } from '../core/selection.js';\r\nimport { IndentAction } from '../modes/languageConfiguration.js';\r\nimport { LanguageConfigurationRegistry } from '../modes/languageConfigurationRegistry.js';\r\nvar TypeOperations = /** @class */ (function () {\r\n    function TypeOperations() {\r\n    }\r\n    TypeOperations.indent = function (config, model, selections) {\r\n        if (model === null || selections === null) {\r\n            return [];\r\n        }\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            commands[i] = new ShiftCommand(selections[i], {\r\n                isUnshift: false,\r\n                tabSize: config.tabSize,\r\n                indentSize: config.indentSize,\r\n                insertSpaces: config.insertSpaces,\r\n                useTabStops: config.useTabStops,\r\n                autoIndent: config.autoIndent\r\n            });\r\n        }\r\n        return commands;\r\n    };\r\n    TypeOperations.outdent = function (config, model, selections) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            commands[i] = new ShiftCommand(selections[i], {\r\n                isUnshift: true,\r\n                tabSize: config.tabSize,\r\n                indentSize: config.indentSize,\r\n                insertSpaces: config.insertSpaces,\r\n                useTabStops: config.useTabStops,\r\n                autoIndent: config.autoIndent\r\n            });\r\n        }\r\n        return commands;\r\n    };\r\n    TypeOperations.shiftIndent = function (config, indentation, count) {\r\n        count = count || 1;\r\n        return ShiftCommand.shiftIndent(indentation, indentation.length + count, config.tabSize, config.indentSize, config.insertSpaces);\r\n    };\r\n    TypeOperations.unshiftIndent = function (config, indentation, count) {\r\n        count = count || 1;\r\n        return ShiftCommand.unshiftIndent(indentation, indentation.length + count, config.tabSize, config.indentSize, config.insertSpaces);\r\n    };\r\n    TypeOperations._distributedPaste = function (config, model, selections, text) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            commands[i] = new ReplaceCommand(selections[i], text[i]);\r\n        }\r\n        return new EditOperationResult(0 /* Other */, commands, {\r\n            shouldPushStackElementBefore: true,\r\n            shouldPushStackElementAfter: true\r\n        });\r\n    };\r\n    TypeOperations._simplePaste = function (config, model, selections, text, pasteOnNewLine) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            var position = selection.getPosition();\r\n            if (pasteOnNewLine && !selection.isEmpty()) {\r\n                pasteOnNewLine = false;\r\n            }\r\n            if (pasteOnNewLine && text.indexOf('\\n') !== text.length - 1) {\r\n                pasteOnNewLine = false;\r\n            }\r\n            if (pasteOnNewLine) {\r\n                // Paste entire line at the beginning of line\r\n                var typeSelection = new Range(position.lineNumber, 1, position.lineNumber, 1);\r\n                commands[i] = new ReplaceCommandThatPreservesSelection(typeSelection, text, selection, true);\r\n            }\r\n            else {\r\n                commands[i] = new ReplaceCommand(selection, text);\r\n            }\r\n        }\r\n        return new EditOperationResult(0 /* Other */, commands, {\r\n            shouldPushStackElementBefore: true,\r\n            shouldPushStackElementAfter: true\r\n        });\r\n    };\r\n    TypeOperations._distributePasteToCursors = function (config, selections, text, pasteOnNewLine, multicursorText) {\r\n        if (pasteOnNewLine) {\r\n            return null;\r\n        }\r\n        if (selections.length === 1) {\r\n            return null;\r\n        }\r\n        if (multicursorText && multicursorText.length === selections.length) {\r\n            return multicursorText;\r\n        }\r\n        if (config.multiCursorPaste === 'spread') {\r\n            // Try to spread the pasted text in case the line count matches the cursor count\r\n            // Remove trailing \\n if present\r\n            if (text.charCodeAt(text.length - 1) === 10 /* LineFeed */) {\r\n                text = text.substr(0, text.length - 1);\r\n            }\r\n            // Remove trailing \\r if present\r\n            if (text.charCodeAt(text.length - 1) === 13 /* CarriageReturn */) {\r\n                text = text.substr(0, text.length - 1);\r\n            }\r\n            var lines = text.split(/\\r\\n|\\r|\\n/);\r\n            if (lines.length === selections.length) {\r\n                return lines;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    TypeOperations.paste = function (config, model, selections, text, pasteOnNewLine, multicursorText) {\r\n        var distributedPaste = this._distributePasteToCursors(config, selections, text, pasteOnNewLine, multicursorText);\r\n        if (distributedPaste) {\r\n            selections = selections.sort(Range.compareRangesUsingStarts);\r\n            return this._distributedPaste(config, model, selections, distributedPaste);\r\n        }\r\n        else {\r\n            return this._simplePaste(config, model, selections, text, pasteOnNewLine);\r\n        }\r\n    };\r\n    TypeOperations._goodIndentForLine = function (config, model, lineNumber) {\r\n        var action = null;\r\n        var indentation = '';\r\n        var expectedIndentAction = LanguageConfigurationRegistry.getInheritIndentForLine(config.autoIndent, model, lineNumber, false);\r\n        if (expectedIndentAction) {\r\n            action = expectedIndentAction.action;\r\n            indentation = expectedIndentAction.indentation;\r\n        }\r\n        else if (lineNumber > 1) {\r\n            var lastLineNumber = void 0;\r\n            for (lastLineNumber = lineNumber - 1; lastLineNumber >= 1; lastLineNumber--) {\r\n                var lineText = model.getLineContent(lastLineNumber);\r\n                var nonWhitespaceIdx = strings.lastNonWhitespaceIndex(lineText);\r\n                if (nonWhitespaceIdx >= 0) {\r\n                    break;\r\n                }\r\n            }\r\n            if (lastLineNumber < 1) {\r\n                // No previous line with content found\r\n                return null;\r\n            }\r\n            var maxColumn = model.getLineMaxColumn(lastLineNumber);\r\n            var expectedEnterAction = LanguageConfigurationRegistry.getEnterAction(config.autoIndent, model, new Range(lastLineNumber, maxColumn, lastLineNumber, maxColumn));\r\n            if (expectedEnterAction) {\r\n                indentation = expectedEnterAction.indentation + expectedEnterAction.appendText;\r\n            }\r\n        }\r\n        if (action) {\r\n            if (action === IndentAction.Indent) {\r\n                indentation = TypeOperations.shiftIndent(config, indentation);\r\n            }\r\n            if (action === IndentAction.Outdent) {\r\n                indentation = TypeOperations.unshiftIndent(config, indentation);\r\n            }\r\n            indentation = config.normalizeIndentation(indentation);\r\n        }\r\n        if (!indentation) {\r\n            return null;\r\n        }\r\n        return indentation;\r\n    };\r\n    TypeOperations._replaceJumpToNextIndent = function (config, model, selection, insertsAutoWhitespace) {\r\n        var typeText = '';\r\n        var position = selection.getStartPosition();\r\n        if (config.insertSpaces) {\r\n            var visibleColumnFromColumn = CursorColumns.visibleColumnFromColumn2(config, model, position);\r\n            var indentSize = config.indentSize;\r\n            var spacesCnt = indentSize - (visibleColumnFromColumn % indentSize);\r\n            for (var i = 0; i < spacesCnt; i++) {\r\n                typeText += ' ';\r\n            }\r\n        }\r\n        else {\r\n            typeText = '\\t';\r\n        }\r\n        return new ReplaceCommand(selection, typeText, insertsAutoWhitespace);\r\n    };\r\n    TypeOperations.tab = function (config, model, selections) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            if (selection.isEmpty()) {\r\n                var lineText = model.getLineContent(selection.startLineNumber);\r\n                if (/^\\s*$/.test(lineText) && model.isCheapToTokenize(selection.startLineNumber)) {\r\n                    var goodIndent = this._goodIndentForLine(config, model, selection.startLineNumber);\r\n                    goodIndent = goodIndent || '\\t';\r\n                    var possibleTypeText = config.normalizeIndentation(goodIndent);\r\n                    if (!strings.startsWith(lineText, possibleTypeText)) {\r\n                        commands[i] = new ReplaceCommand(new Range(selection.startLineNumber, 1, selection.startLineNumber, lineText.length + 1), possibleTypeText, true);\r\n                        continue;\r\n                    }\r\n                }\r\n                commands[i] = this._replaceJumpToNextIndent(config, model, selection, true);\r\n            }\r\n            else {\r\n                if (selection.startLineNumber === selection.endLineNumber) {\r\n                    var lineMaxColumn = model.getLineMaxColumn(selection.startLineNumber);\r\n                    if (selection.startColumn !== 1 || selection.endColumn !== lineMaxColumn) {\r\n                        // This is a single line selection that is not the entire line\r\n                        commands[i] = this._replaceJumpToNextIndent(config, model, selection, false);\r\n                        continue;\r\n                    }\r\n                }\r\n                commands[i] = new ShiftCommand(selection, {\r\n                    isUnshift: false,\r\n                    tabSize: config.tabSize,\r\n                    indentSize: config.indentSize,\r\n                    insertSpaces: config.insertSpaces,\r\n                    useTabStops: config.useTabStops,\r\n                    autoIndent: config.autoIndent\r\n                });\r\n            }\r\n        }\r\n        return commands;\r\n    };\r\n    TypeOperations.replacePreviousChar = function (prevEditOperationType, config, model, selections, txt, replaceCharCnt) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            if (!selection.isEmpty()) {\r\n                // looks like https://github.com/Microsoft/vscode/issues/2773\r\n                // where a cursor operation occurred before a canceled composition\r\n                // => ignore composition\r\n                commands[i] = null;\r\n                continue;\r\n            }\r\n            var pos = selection.getPosition();\r\n            var startColumn = Math.max(1, pos.column - replaceCharCnt);\r\n            var range = new Range(pos.lineNumber, startColumn, pos.lineNumber, pos.column);\r\n            commands[i] = new ReplaceCommand(range, txt);\r\n        }\r\n        return new EditOperationResult(1 /* Typing */, commands, {\r\n            shouldPushStackElementBefore: (prevEditOperationType !== 1 /* Typing */),\r\n            shouldPushStackElementAfter: false\r\n        });\r\n    };\r\n    TypeOperations._typeCommand = function (range, text, keepPosition) {\r\n        if (keepPosition) {\r\n            return new ReplaceCommandWithoutChangingPosition(range, text, true);\r\n        }\r\n        else {\r\n            return new ReplaceCommand(range, text, true);\r\n        }\r\n    };\r\n    TypeOperations._enter = function (config, model, keepPosition, range) {\r\n        if (config.autoIndent === 0 /* None */) {\r\n            return TypeOperations._typeCommand(range, '\\n', keepPosition);\r\n        }\r\n        if (!model.isCheapToTokenize(range.getStartPosition().lineNumber) || config.autoIndent === 1 /* Keep */) {\r\n            var lineText_1 = model.getLineContent(range.startLineNumber);\r\n            var indentation_1 = strings.getLeadingWhitespace(lineText_1).substring(0, range.startColumn - 1);\r\n            return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(indentation_1), keepPosition);\r\n        }\r\n        var r = LanguageConfigurationRegistry.getEnterAction(config.autoIndent, model, range);\r\n        if (r) {\r\n            if (r.indentAction === IndentAction.None) {\r\n                // Nothing special\r\n                return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(r.indentation + r.appendText), keepPosition);\r\n            }\r\n            else if (r.indentAction === IndentAction.Indent) {\r\n                // Indent once\r\n                return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(r.indentation + r.appendText), keepPosition);\r\n            }\r\n            else if (r.indentAction === IndentAction.IndentOutdent) {\r\n                // Ultra special\r\n                var normalIndent = config.normalizeIndentation(r.indentation);\r\n                var increasedIndent = config.normalizeIndentation(r.indentation + r.appendText);\r\n                var typeText = '\\n' + increasedIndent + '\\n' + normalIndent;\r\n                if (keepPosition) {\r\n                    return new ReplaceCommandWithoutChangingPosition(range, typeText, true);\r\n                }\r\n                else {\r\n                    return new ReplaceCommandWithOffsetCursorState(range, typeText, -1, increasedIndent.length - normalIndent.length, true);\r\n                }\r\n            }\r\n            else if (r.indentAction === IndentAction.Outdent) {\r\n                var actualIndentation = TypeOperations.unshiftIndent(config, r.indentation);\r\n                return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(actualIndentation + r.appendText), keepPosition);\r\n            }\r\n        }\r\n        var lineText = model.getLineContent(range.startLineNumber);\r\n        var indentation = strings.getLeadingWhitespace(lineText).substring(0, range.startColumn - 1);\r\n        if (config.autoIndent >= 4 /* Full */) {\r\n            var ir = LanguageConfigurationRegistry.getIndentForEnter(config.autoIndent, model, range, {\r\n                unshiftIndent: function (indent) {\r\n                    return TypeOperations.unshiftIndent(config, indent);\r\n                },\r\n                shiftIndent: function (indent) {\r\n                    return TypeOperations.shiftIndent(config, indent);\r\n                },\r\n                normalizeIndentation: function (indent) {\r\n                    return config.normalizeIndentation(indent);\r\n                }\r\n            });\r\n            if (ir) {\r\n                var oldEndViewColumn = CursorColumns.visibleColumnFromColumn2(config, model, range.getEndPosition());\r\n                var oldEndColumn = range.endColumn;\r\n                var beforeText = '\\n';\r\n                if (indentation !== config.normalizeIndentation(ir.beforeEnter)) {\r\n                    beforeText = config.normalizeIndentation(ir.beforeEnter) + lineText.substring(indentation.length, range.startColumn - 1) + '\\n';\r\n                    range = new Range(range.startLineNumber, 1, range.endLineNumber, range.endColumn);\r\n                }\r\n                var newLineContent = model.getLineContent(range.endLineNumber);\r\n                var firstNonWhitespace = strings.firstNonWhitespaceIndex(newLineContent);\r\n                if (firstNonWhitespace >= 0) {\r\n                    range = range.setEndPosition(range.endLineNumber, Math.max(range.endColumn, firstNonWhitespace + 1));\r\n                }\r\n                else {\r\n                    range = range.setEndPosition(range.endLineNumber, model.getLineMaxColumn(range.endLineNumber));\r\n                }\r\n                if (keepPosition) {\r\n                    return new ReplaceCommandWithoutChangingPosition(range, beforeText + config.normalizeIndentation(ir.afterEnter), true);\r\n                }\r\n                else {\r\n                    var offset = 0;\r\n                    if (oldEndColumn <= firstNonWhitespace + 1) {\r\n                        if (!config.insertSpaces) {\r\n                            oldEndViewColumn = Math.ceil(oldEndViewColumn / config.indentSize);\r\n                        }\r\n                        offset = Math.min(oldEndViewColumn + 1 - config.normalizeIndentation(ir.afterEnter).length - 1, 0);\r\n                    }\r\n                    return new ReplaceCommandWithOffsetCursorState(range, beforeText + config.normalizeIndentation(ir.afterEnter), 0, offset, true);\r\n                }\r\n            }\r\n        }\r\n        return TypeOperations._typeCommand(range, '\\n' + config.normalizeIndentation(indentation), keepPosition);\r\n    };\r\n    TypeOperations._isAutoIndentType = function (config, model, selections) {\r\n        if (config.autoIndent < 4 /* Full */) {\r\n            return false;\r\n        }\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            if (!model.isCheapToTokenize(selections[i].getEndPosition().lineNumber)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    TypeOperations._runAutoIndentType = function (config, model, range, ch) {\r\n        var currentIndentation = LanguageConfigurationRegistry.getIndentationAtPosition(model, range.startLineNumber, range.startColumn);\r\n        var actualIndentation = LanguageConfigurationRegistry.getIndentActionForType(config.autoIndent, model, range, ch, {\r\n            shiftIndent: function (indentation) {\r\n                return TypeOperations.shiftIndent(config, indentation);\r\n            },\r\n            unshiftIndent: function (indentation) {\r\n                return TypeOperations.unshiftIndent(config, indentation);\r\n            },\r\n        });\r\n        if (actualIndentation === null) {\r\n            return null;\r\n        }\r\n        if (actualIndentation !== config.normalizeIndentation(currentIndentation)) {\r\n            var firstNonWhitespace = model.getLineFirstNonWhitespaceColumn(range.startLineNumber);\r\n            if (firstNonWhitespace === 0) {\r\n                return TypeOperations._typeCommand(new Range(range.startLineNumber, 0, range.endLineNumber, range.endColumn), config.normalizeIndentation(actualIndentation) + ch, false);\r\n            }\r\n            else {\r\n                return TypeOperations._typeCommand(new Range(range.startLineNumber, 0, range.endLineNumber, range.endColumn), config.normalizeIndentation(actualIndentation) +\r\n                    model.getLineContent(range.startLineNumber).substring(firstNonWhitespace - 1, range.startColumn - 1) + ch, false);\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    TypeOperations._isAutoClosingOvertype = function (config, model, selections, autoClosedCharacters, ch) {\r\n        if (config.autoClosingOvertype === 'never') {\r\n            return false;\r\n        }\r\n        if (!config.autoClosingPairsClose2.has(ch)) {\r\n            return false;\r\n        }\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            if (!selection.isEmpty()) {\r\n                return false;\r\n            }\r\n            var position = selection.getPosition();\r\n            var lineText = model.getLineContent(position.lineNumber);\r\n            var afterCharacter = lineText.charAt(position.column - 1);\r\n            if (afterCharacter !== ch) {\r\n                return false;\r\n            }\r\n            // Do not over-type quotes after a backslash\r\n            var chIsQuote = isQuote(ch);\r\n            var beforeCharacter = position.column > 2 ? lineText.charCodeAt(position.column - 2) : 0 /* Null */;\r\n            if (beforeCharacter === 92 /* Backslash */ && chIsQuote) {\r\n                return false;\r\n            }\r\n            // Must over-type a closing character typed by the editor\r\n            if (config.autoClosingOvertype === 'auto') {\r\n                var found = false;\r\n                for (var j = 0, lenJ = autoClosedCharacters.length; j < lenJ; j++) {\r\n                    var autoClosedCharacter = autoClosedCharacters[j];\r\n                    if (position.lineNumber === autoClosedCharacter.startLineNumber && position.column === autoClosedCharacter.startColumn) {\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!found) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    TypeOperations._runAutoClosingOvertype = function (prevEditOperationType, config, model, selections, ch) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            var position = selection.getPosition();\r\n            var typeSelection = new Range(position.lineNumber, position.column, position.lineNumber, position.column + 1);\r\n            commands[i] = new ReplaceCommand(typeSelection, ch);\r\n        }\r\n        return new EditOperationResult(1 /* Typing */, commands, {\r\n            shouldPushStackElementBefore: (prevEditOperationType !== 1 /* Typing */),\r\n            shouldPushStackElementAfter: false\r\n        });\r\n    };\r\n    TypeOperations._autoClosingPairIsSymmetric = function (autoClosingPair) {\r\n        var open = autoClosingPair.open, close = autoClosingPair.close;\r\n        return (open.indexOf(close) >= 0 || close.indexOf(open) >= 0);\r\n    };\r\n    TypeOperations._isBeforeClosingBrace = function (config, autoClosingPair, characterAfter) {\r\n        var otherAutoClosingPairs = config.autoClosingPairsClose2.get(characterAfter);\r\n        if (!otherAutoClosingPairs) {\r\n            return false;\r\n        }\r\n        var thisBraceIsSymmetric = TypeOperations._autoClosingPairIsSymmetric(autoClosingPair);\r\n        for (var _i = 0, otherAutoClosingPairs_1 = otherAutoClosingPairs; _i < otherAutoClosingPairs_1.length; _i++) {\r\n            var otherAutoClosingPair = otherAutoClosingPairs_1[_i];\r\n            var otherBraceIsSymmetric = TypeOperations._autoClosingPairIsSymmetric(otherAutoClosingPair);\r\n            if (!thisBraceIsSymmetric && otherBraceIsSymmetric) {\r\n                continue;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    TypeOperations._findAutoClosingPairOpen = function (config, model, positions, ch) {\r\n        var autoClosingPairCandidates = config.autoClosingPairsOpen2.get(ch);\r\n        if (!autoClosingPairCandidates) {\r\n            return null;\r\n        }\r\n        // Determine which auto-closing pair it is\r\n        var autoClosingPair = null;\r\n        for (var _i = 0, autoClosingPairCandidates_1 = autoClosingPairCandidates; _i < autoClosingPairCandidates_1.length; _i++) {\r\n            var autoClosingPairCandidate = autoClosingPairCandidates_1[_i];\r\n            if (autoClosingPair === null || autoClosingPairCandidate.open.length > autoClosingPair.open.length) {\r\n                var candidateIsMatch = true;\r\n                for (var _a = 0, positions_1 = positions; _a < positions_1.length; _a++) {\r\n                    var position = positions_1[_a];\r\n                    var relevantText = model.getValueInRange(new Range(position.lineNumber, position.column - autoClosingPairCandidate.open.length + 1, position.lineNumber, position.column));\r\n                    if (relevantText + ch !== autoClosingPairCandidate.open) {\r\n                        candidateIsMatch = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (candidateIsMatch) {\r\n                    autoClosingPair = autoClosingPairCandidate;\r\n                }\r\n            }\r\n        }\r\n        return autoClosingPair;\r\n    };\r\n    TypeOperations._isAutoClosingOpenCharType = function (config, model, selections, ch, insertOpenCharacter) {\r\n        var chIsQuote = isQuote(ch);\r\n        var autoCloseConfig = chIsQuote ? config.autoClosingQuotes : config.autoClosingBrackets;\r\n        if (autoCloseConfig === 'never') {\r\n            return null;\r\n        }\r\n        var autoClosingPair = this._findAutoClosingPairOpen(config, model, selections.map(function (s) { return s.getPosition(); }), ch);\r\n        if (!autoClosingPair) {\r\n            return null;\r\n        }\r\n        var shouldAutoCloseBefore = chIsQuote ? config.shouldAutoCloseBefore.quote : config.shouldAutoCloseBefore.bracket;\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            if (!selection.isEmpty()) {\r\n                return null;\r\n            }\r\n            var position = selection.getPosition();\r\n            var lineText = model.getLineContent(position.lineNumber);\r\n            // Only consider auto closing the pair if a space follows or if another autoclosed pair follows\r\n            if (lineText.length > position.column - 1) {\r\n                var characterAfter = lineText.charAt(position.column - 1);\r\n                var isBeforeCloseBrace = TypeOperations._isBeforeClosingBrace(config, autoClosingPair, characterAfter);\r\n                if (!isBeforeCloseBrace && !shouldAutoCloseBefore(characterAfter)) {\r\n                    return null;\r\n                }\r\n            }\r\n            if (!model.isCheapToTokenize(position.lineNumber)) {\r\n                // Do not force tokenization\r\n                return null;\r\n            }\r\n            // Do not auto-close ' or \" after a word character\r\n            if (autoClosingPair.open.length === 1 && chIsQuote && autoCloseConfig !== 'always') {\r\n                var wordSeparators = getMapForWordSeparators(config.wordSeparators);\r\n                if (insertOpenCharacter && position.column > 1 && wordSeparators.get(lineText.charCodeAt(position.column - 2)) === 0 /* Regular */) {\r\n                    return null;\r\n                }\r\n                if (!insertOpenCharacter && position.column > 2 && wordSeparators.get(lineText.charCodeAt(position.column - 3)) === 0 /* Regular */) {\r\n                    return null;\r\n                }\r\n            }\r\n            model.forceTokenization(position.lineNumber);\r\n            var lineTokens = model.getLineTokens(position.lineNumber);\r\n            var shouldAutoClosePair = false;\r\n            try {\r\n                shouldAutoClosePair = LanguageConfigurationRegistry.shouldAutoClosePair(autoClosingPair, lineTokens, insertOpenCharacter ? position.column : position.column - 1);\r\n            }\r\n            catch (e) {\r\n                onUnexpectedError(e);\r\n            }\r\n            if (!shouldAutoClosePair) {\r\n                return null;\r\n            }\r\n        }\r\n        return autoClosingPair;\r\n    };\r\n    TypeOperations._runAutoClosingOpenCharType = function (prevEditOperationType, config, model, selections, ch, insertOpenCharacter, autoClosingPair) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            commands[i] = new TypeWithAutoClosingCommand(selection, ch, insertOpenCharacter, autoClosingPair.close);\r\n        }\r\n        return new EditOperationResult(1 /* Typing */, commands, {\r\n            shouldPushStackElementBefore: true,\r\n            shouldPushStackElementAfter: false\r\n        });\r\n    };\r\n    TypeOperations._shouldSurroundChar = function (config, ch) {\r\n        if (isQuote(ch)) {\r\n            return (config.autoSurround === 'quotes' || config.autoSurround === 'languageDefined');\r\n        }\r\n        else {\r\n            // Character is a bracket\r\n            return (config.autoSurround === 'brackets' || config.autoSurround === 'languageDefined');\r\n        }\r\n    };\r\n    TypeOperations._isSurroundSelectionType = function (config, model, selections, ch) {\r\n        if (!TypeOperations._shouldSurroundChar(config, ch) || !config.surroundingPairs.hasOwnProperty(ch)) {\r\n            return false;\r\n        }\r\n        var isTypingAQuoteCharacter = isQuote(ch);\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            if (selection.isEmpty()) {\r\n                return false;\r\n            }\r\n            var selectionContainsOnlyWhitespace = true;\r\n            for (var lineNumber = selection.startLineNumber; lineNumber <= selection.endLineNumber; lineNumber++) {\r\n                var lineText = model.getLineContent(lineNumber);\r\n                var startIndex = (lineNumber === selection.startLineNumber ? selection.startColumn - 1 : 0);\r\n                var endIndex = (lineNumber === selection.endLineNumber ? selection.endColumn - 1 : lineText.length);\r\n                var selectedText = lineText.substring(startIndex, endIndex);\r\n                if (/[^ \\t]/.test(selectedText)) {\r\n                    // this selected text contains something other than whitespace\r\n                    selectionContainsOnlyWhitespace = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (selectionContainsOnlyWhitespace) {\r\n                return false;\r\n            }\r\n            if (isTypingAQuoteCharacter && selection.startLineNumber === selection.endLineNumber && selection.startColumn + 1 === selection.endColumn) {\r\n                var selectionText = model.getValueInRange(selection);\r\n                if (isQuote(selectionText)) {\r\n                    // Typing a quote character on top of another quote character\r\n                    // => disable surround selection type\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    TypeOperations._runSurroundSelectionType = function (prevEditOperationType, config, model, selections, ch) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            var closeCharacter = config.surroundingPairs[ch];\r\n            commands[i] = new SurroundSelectionCommand(selection, ch, closeCharacter);\r\n        }\r\n        return new EditOperationResult(0 /* Other */, commands, {\r\n            shouldPushStackElementBefore: true,\r\n            shouldPushStackElementAfter: true\r\n        });\r\n    };\r\n    TypeOperations._isTypeInterceptorElectricChar = function (config, model, selections) {\r\n        if (selections.length === 1 && model.isCheapToTokenize(selections[0].getEndPosition().lineNumber)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    TypeOperations._typeInterceptorElectricChar = function (prevEditOperationType, config, model, selection, ch) {\r\n        if (!config.electricChars.hasOwnProperty(ch) || !selection.isEmpty()) {\r\n            return null;\r\n        }\r\n        var position = selection.getPosition();\r\n        model.forceTokenization(position.lineNumber);\r\n        var lineTokens = model.getLineTokens(position.lineNumber);\r\n        var electricAction;\r\n        try {\r\n            electricAction = LanguageConfigurationRegistry.onElectricCharacter(ch, lineTokens, position.column);\r\n        }\r\n        catch (e) {\r\n            onUnexpectedError(e);\r\n            return null;\r\n        }\r\n        if (!electricAction) {\r\n            return null;\r\n        }\r\n        if (electricAction.matchOpenBracket) {\r\n            var endColumn = (lineTokens.getLineContent() + ch).lastIndexOf(electricAction.matchOpenBracket) + 1;\r\n            var match = model.findMatchingBracketUp(electricAction.matchOpenBracket, {\r\n                lineNumber: position.lineNumber,\r\n                column: endColumn\r\n            });\r\n            if (match) {\r\n                if (match.startLineNumber === position.lineNumber) {\r\n                    // matched something on the same line => no change in indentation\r\n                    return null;\r\n                }\r\n                var matchLine = model.getLineContent(match.startLineNumber);\r\n                var matchLineIndentation = strings.getLeadingWhitespace(matchLine);\r\n                var newIndentation = config.normalizeIndentation(matchLineIndentation);\r\n                var lineText = model.getLineContent(position.lineNumber);\r\n                var lineFirstNonBlankColumn = model.getLineFirstNonWhitespaceColumn(position.lineNumber) || position.column;\r\n                var prefix = lineText.substring(lineFirstNonBlankColumn - 1, position.column - 1);\r\n                var typeText = newIndentation + prefix + ch;\r\n                var typeSelection = new Range(position.lineNumber, 1, position.lineNumber, position.column);\r\n                var command = new ReplaceCommand(typeSelection, typeText);\r\n                return new EditOperationResult(1 /* Typing */, [command], {\r\n                    shouldPushStackElementBefore: false,\r\n                    shouldPushStackElementAfter: true\r\n                });\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * This is very similar with typing, but the character is already in the text buffer!\r\n     */\r\n    TypeOperations.compositionEndWithInterceptors = function (prevEditOperationType, config, model, selectionsWhenCompositionStarted, selections, autoClosedCharacters) {\r\n        if (!selectionsWhenCompositionStarted || Selection.selectionsArrEqual(selectionsWhenCompositionStarted, selections)) {\r\n            // no content was typed\r\n            return null;\r\n        }\r\n        var ch = null;\r\n        // extract last typed character\r\n        for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {\r\n            var selection = selections_1[_i];\r\n            if (!selection.isEmpty()) {\r\n                return null;\r\n            }\r\n            var position = selection.getPosition();\r\n            var currentChar = model.getValueInRange(new Range(position.lineNumber, position.column - 1, position.lineNumber, position.column));\r\n            if (ch === null) {\r\n                ch = currentChar;\r\n            }\r\n            else if (ch !== currentChar) {\r\n                return null;\r\n            }\r\n        }\r\n        if (!ch) {\r\n            return null;\r\n        }\r\n        if (this._isAutoClosingOvertype(config, model, selections, autoClosedCharacters, ch)) {\r\n            // Unfortunately, the close character is at this point \"doubled\", so we need to delete it...\r\n            var commands = selections.map(function (s) { return new ReplaceCommand(new Range(s.positionLineNumber, s.positionColumn, s.positionLineNumber, s.positionColumn + 1), '', false); });\r\n            return new EditOperationResult(1 /* Typing */, commands, {\r\n                shouldPushStackElementBefore: true,\r\n                shouldPushStackElementAfter: false\r\n            });\r\n        }\r\n        var autoClosingPairOpenCharType = this._isAutoClosingOpenCharType(config, model, selections, ch, false);\r\n        if (autoClosingPairOpenCharType) {\r\n            return this._runAutoClosingOpenCharType(prevEditOperationType, config, model, selections, ch, false, autoClosingPairOpenCharType);\r\n        }\r\n        return null;\r\n    };\r\n    TypeOperations.typeWithInterceptors = function (prevEditOperationType, config, model, selections, autoClosedCharacters, ch) {\r\n        if (ch === '\\n') {\r\n            var commands_1 = [];\r\n            for (var i = 0, len = selections.length; i < len; i++) {\r\n                commands_1[i] = TypeOperations._enter(config, model, false, selections[i]);\r\n            }\r\n            return new EditOperationResult(1 /* Typing */, commands_1, {\r\n                shouldPushStackElementBefore: true,\r\n                shouldPushStackElementAfter: false,\r\n            });\r\n        }\r\n        if (this._isAutoIndentType(config, model, selections)) {\r\n            var commands_2 = [];\r\n            var autoIndentFails = false;\r\n            for (var i = 0, len = selections.length; i < len; i++) {\r\n                commands_2[i] = this._runAutoIndentType(config, model, selections[i], ch);\r\n                if (!commands_2[i]) {\r\n                    autoIndentFails = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!autoIndentFails) {\r\n                return new EditOperationResult(1 /* Typing */, commands_2, {\r\n                    shouldPushStackElementBefore: true,\r\n                    shouldPushStackElementAfter: false,\r\n                });\r\n            }\r\n        }\r\n        if (this._isAutoClosingOvertype(config, model, selections, autoClosedCharacters, ch)) {\r\n            return this._runAutoClosingOvertype(prevEditOperationType, config, model, selections, ch);\r\n        }\r\n        var autoClosingPairOpenCharType = this._isAutoClosingOpenCharType(config, model, selections, ch, true);\r\n        if (autoClosingPairOpenCharType) {\r\n            return this._runAutoClosingOpenCharType(prevEditOperationType, config, model, selections, ch, true, autoClosingPairOpenCharType);\r\n        }\r\n        if (this._isSurroundSelectionType(config, model, selections, ch)) {\r\n            return this._runSurroundSelectionType(prevEditOperationType, config, model, selections, ch);\r\n        }\r\n        // Electric characters make sense only when dealing with a single cursor,\r\n        // as multiple cursors typing brackets for example would interfer with bracket matching\r\n        if (this._isTypeInterceptorElectricChar(config, model, selections)) {\r\n            var r = this._typeInterceptorElectricChar(prevEditOperationType, config, model, selections[0], ch);\r\n            if (r) {\r\n                return r;\r\n            }\r\n        }\r\n        // A simple character type\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            commands[i] = new ReplaceCommand(selections[i], ch);\r\n        }\r\n        var shouldPushStackElementBefore = (prevEditOperationType !== 1 /* Typing */);\r\n        if (ch === ' ') {\r\n            shouldPushStackElementBefore = true;\r\n        }\r\n        return new EditOperationResult(1 /* Typing */, commands, {\r\n            shouldPushStackElementBefore: shouldPushStackElementBefore,\r\n            shouldPushStackElementAfter: false\r\n        });\r\n    };\r\n    TypeOperations.typeWithoutInterceptors = function (prevEditOperationType, config, model, selections, str) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            commands[i] = new ReplaceCommand(selections[i], str);\r\n        }\r\n        return new EditOperationResult(1 /* Typing */, commands, {\r\n            shouldPushStackElementBefore: (prevEditOperationType !== 1 /* Typing */),\r\n            shouldPushStackElementAfter: false\r\n        });\r\n    };\r\n    TypeOperations.lineInsertBefore = function (config, model, selections) {\r\n        if (model === null || selections === null) {\r\n            return [];\r\n        }\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var lineNumber = selections[i].positionLineNumber;\r\n            if (lineNumber === 1) {\r\n                commands[i] = new ReplaceCommandWithoutChangingPosition(new Range(1, 1, 1, 1), '\\n');\r\n            }\r\n            else {\r\n                lineNumber--;\r\n                var column = model.getLineMaxColumn(lineNumber);\r\n                commands[i] = this._enter(config, model, false, new Range(lineNumber, column, lineNumber, column));\r\n            }\r\n        }\r\n        return commands;\r\n    };\r\n    TypeOperations.lineInsertAfter = function (config, model, selections) {\r\n        if (model === null || selections === null) {\r\n            return [];\r\n        }\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var lineNumber = selections[i].positionLineNumber;\r\n            var column = model.getLineMaxColumn(lineNumber);\r\n            commands[i] = this._enter(config, model, false, new Range(lineNumber, column, lineNumber, column));\r\n        }\r\n        return commands;\r\n    };\r\n    TypeOperations.lineBreakInsert = function (config, model, selections) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            commands[i] = this._enter(config, model, true, selections[i]);\r\n        }\r\n        return commands;\r\n    };\r\n    return TypeOperations;\r\n}());\r\nexport { TypeOperations };\r\nvar TypeWithAutoClosingCommand = /** @class */ (function (_super) {\r\n    __extends(TypeWithAutoClosingCommand, _super);\r\n    function TypeWithAutoClosingCommand(selection, openCharacter, insertOpenCharacter, closeCharacter) {\r\n        var _this = _super.call(this, selection, (insertOpenCharacter ? openCharacter : '') + closeCharacter, 0, -closeCharacter.length) || this;\r\n        _this._openCharacter = openCharacter;\r\n        _this._closeCharacter = closeCharacter;\r\n        _this.closeCharacterRange = null;\r\n        _this.enclosingRange = null;\r\n        return _this;\r\n    }\r\n    TypeWithAutoClosingCommand.prototype.computeCursorState = function (model, helper) {\r\n        var inverseEditOperations = helper.getInverseEditOperations();\r\n        var range = inverseEditOperations[0].range;\r\n        this.closeCharacterRange = new Range(range.startLineNumber, range.endColumn - this._closeCharacter.length, range.endLineNumber, range.endColumn);\r\n        this.enclosingRange = new Range(range.startLineNumber, range.endColumn - this._openCharacter.length - this._closeCharacter.length, range.endLineNumber, range.endColumn);\r\n        return _super.prototype.computeCursorState.call(this, model, helper);\r\n    };\r\n    return TypeWithAutoClosingCommand;\r\n}(ReplaceCommandWithOffsetCursorState));\r\nexport { TypeWithAutoClosingCommand };\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { onUnexpectedError } from '../../../base/common/errors.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nimport { Selection } from '../core/selection.js';\r\nimport { TextModel } from '../model/textModel.js';\r\nimport { LanguageConfigurationRegistry } from '../modes/languageConfigurationRegistry.js';\r\nvar autoCloseAlways = function () { return true; };\r\nvar autoCloseNever = function () { return false; };\r\nvar autoCloseBeforeWhitespace = function (chr) { return (chr === ' ' || chr === '\\t'); };\r\nfunction appendEntry(target, key, value) {\r\n    if (target.has(key)) {\r\n        target.get(key).push(value);\r\n    }\r\n    else {\r\n        target.set(key, [value]);\r\n    }\r\n}\r\nvar CursorConfiguration = /** @class */ (function () {\r\n    function CursorConfiguration(languageIdentifier, modelOptions, configuration) {\r\n        this._languageIdentifier = languageIdentifier;\r\n        var options = configuration.options;\r\n        var layoutInfo = options.get(107 /* layoutInfo */);\r\n        this.readOnly = options.get(68 /* readOnly */);\r\n        this.tabSize = modelOptions.tabSize;\r\n        this.indentSize = modelOptions.indentSize;\r\n        this.insertSpaces = modelOptions.insertSpaces;\r\n        this.lineHeight = options.get(49 /* lineHeight */);\r\n        this.pageSize = Math.max(1, Math.floor(layoutInfo.height / this.lineHeight) - 2);\r\n        this.useTabStops = options.get(95 /* useTabStops */);\r\n        this.wordSeparators = options.get(96 /* wordSeparators */);\r\n        this.emptySelectionClipboard = options.get(25 /* emptySelectionClipboard */);\r\n        this.copyWithSyntaxHighlighting = options.get(15 /* copyWithSyntaxHighlighting */);\r\n        this.multiCursorMergeOverlapping = options.get(58 /* multiCursorMergeOverlapping */);\r\n        this.multiCursorPaste = options.get(60 /* multiCursorPaste */);\r\n        this.autoClosingBrackets = options.get(5 /* autoClosingBrackets */);\r\n        this.autoClosingQuotes = options.get(7 /* autoClosingQuotes */);\r\n        this.autoClosingOvertype = options.get(6 /* autoClosingOvertype */);\r\n        this.autoSurround = options.get(10 /* autoSurround */);\r\n        this.autoIndent = options.get(8 /* autoIndent */);\r\n        this.autoClosingPairsOpen2 = new Map();\r\n        this.autoClosingPairsClose2 = new Map();\r\n        this.surroundingPairs = {};\r\n        this._electricChars = null;\r\n        this.shouldAutoCloseBefore = {\r\n            quote: CursorConfiguration._getShouldAutoClose(languageIdentifier, this.autoClosingQuotes),\r\n            bracket: CursorConfiguration._getShouldAutoClose(languageIdentifier, this.autoClosingBrackets)\r\n        };\r\n        var autoClosingPairs = CursorConfiguration._getAutoClosingPairs(languageIdentifier);\r\n        if (autoClosingPairs) {\r\n            for (var _i = 0, autoClosingPairs_1 = autoClosingPairs; _i < autoClosingPairs_1.length; _i++) {\r\n                var pair = autoClosingPairs_1[_i];\r\n                appendEntry(this.autoClosingPairsOpen2, pair.open.charAt(pair.open.length - 1), pair);\r\n                if (pair.close.length === 1) {\r\n                    appendEntry(this.autoClosingPairsClose2, pair.close, pair);\r\n                }\r\n            }\r\n        }\r\n        var surroundingPairs = CursorConfiguration._getSurroundingPairs(languageIdentifier);\r\n        if (surroundingPairs) {\r\n            for (var _a = 0, surroundingPairs_1 = surroundingPairs; _a < surroundingPairs_1.length; _a++) {\r\n                var pair = surroundingPairs_1[_a];\r\n                this.surroundingPairs[pair.open] = pair.close;\r\n            }\r\n        }\r\n    }\r\n    CursorConfiguration.shouldRecreate = function (e) {\r\n        return (e.hasChanged(107 /* layoutInfo */)\r\n            || e.hasChanged(96 /* wordSeparators */)\r\n            || e.hasChanged(25 /* emptySelectionClipboard */)\r\n            || e.hasChanged(58 /* multiCursorMergeOverlapping */)\r\n            || e.hasChanged(60 /* multiCursorPaste */)\r\n            || e.hasChanged(5 /* autoClosingBrackets */)\r\n            || e.hasChanged(7 /* autoClosingQuotes */)\r\n            || e.hasChanged(6 /* autoClosingOvertype */)\r\n            || e.hasChanged(10 /* autoSurround */)\r\n            || e.hasChanged(95 /* useTabStops */)\r\n            || e.hasChanged(49 /* lineHeight */)\r\n            || e.hasChanged(68 /* readOnly */));\r\n    };\r\n    Object.defineProperty(CursorConfiguration.prototype, \"electricChars\", {\r\n        get: function () {\r\n            if (!this._electricChars) {\r\n                this._electricChars = {};\r\n                var electricChars = CursorConfiguration._getElectricCharacters(this._languageIdentifier);\r\n                if (electricChars) {\r\n                    for (var _i = 0, electricChars_1 = electricChars; _i < electricChars_1.length; _i++) {\r\n                        var char = electricChars_1[_i];\r\n                        this._electricChars[char] = true;\r\n                    }\r\n                }\r\n            }\r\n            return this._electricChars;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    CursorConfiguration.prototype.normalizeIndentation = function (str) {\r\n        return TextModel.normalizeIndentation(str, this.indentSize, this.insertSpaces);\r\n    };\r\n    CursorConfiguration._getElectricCharacters = function (languageIdentifier) {\r\n        try {\r\n            return LanguageConfigurationRegistry.getElectricCharacters(languageIdentifier.id);\r\n        }\r\n        catch (e) {\r\n            onUnexpectedError(e);\r\n            return null;\r\n        }\r\n    };\r\n    CursorConfiguration._getAutoClosingPairs = function (languageIdentifier) {\r\n        try {\r\n            return LanguageConfigurationRegistry.getAutoClosingPairs(languageIdentifier.id);\r\n        }\r\n        catch (e) {\r\n            onUnexpectedError(e);\r\n            return null;\r\n        }\r\n    };\r\n    CursorConfiguration._getShouldAutoClose = function (languageIdentifier, autoCloseConfig) {\r\n        switch (autoCloseConfig) {\r\n            case 'beforeWhitespace':\r\n                return autoCloseBeforeWhitespace;\r\n            case 'languageDefined':\r\n                return CursorConfiguration._getLanguageDefinedShouldAutoClose(languageIdentifier);\r\n            case 'always':\r\n                return autoCloseAlways;\r\n            case 'never':\r\n                return autoCloseNever;\r\n        }\r\n    };\r\n    CursorConfiguration._getLanguageDefinedShouldAutoClose = function (languageIdentifier) {\r\n        try {\r\n            var autoCloseBeforeSet_1 = LanguageConfigurationRegistry.getAutoCloseBeforeSet(languageIdentifier.id);\r\n            return function (c) { return autoCloseBeforeSet_1.indexOf(c) !== -1; };\r\n        }\r\n        catch (e) {\r\n            onUnexpectedError(e);\r\n            return autoCloseNever;\r\n        }\r\n    };\r\n    CursorConfiguration._getSurroundingPairs = function (languageIdentifier) {\r\n        try {\r\n            return LanguageConfigurationRegistry.getSurroundingPairs(languageIdentifier.id);\r\n        }\r\n        catch (e) {\r\n            onUnexpectedError(e);\r\n            return null;\r\n        }\r\n    };\r\n    return CursorConfiguration;\r\n}());\r\nexport { CursorConfiguration };\r\n/**\r\n * Represents the cursor state on either the model or on the view model.\r\n */\r\nvar SingleCursorState = /** @class */ (function () {\r\n    function SingleCursorState(selectionStart, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns) {\r\n        this.selectionStart = selectionStart;\r\n        this.selectionStartLeftoverVisibleColumns = selectionStartLeftoverVisibleColumns;\r\n        this.position = position;\r\n        this.leftoverVisibleColumns = leftoverVisibleColumns;\r\n        this.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\r\n    }\r\n    SingleCursorState.prototype.equals = function (other) {\r\n        return (this.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns\r\n            && this.leftoverVisibleColumns === other.leftoverVisibleColumns\r\n            && this.position.equals(other.position)\r\n            && this.selectionStart.equalsRange(other.selectionStart));\r\n    };\r\n    SingleCursorState.prototype.hasSelection = function () {\r\n        return (!this.selection.isEmpty() || !this.selectionStart.isEmpty());\r\n    };\r\n    SingleCursorState.prototype.move = function (inSelectionMode, lineNumber, column, leftoverVisibleColumns) {\r\n        if (inSelectionMode) {\r\n            // move just position\r\n            return new SingleCursorState(this.selectionStart, this.selectionStartLeftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\r\n        }\r\n        else {\r\n            // move everything\r\n            return new SingleCursorState(new Range(lineNumber, column, lineNumber, column), leftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\r\n        }\r\n    };\r\n    SingleCursorState._computeSelection = function (selectionStart, position) {\r\n        var startLineNumber, startColumn, endLineNumber, endColumn;\r\n        if (selectionStart.isEmpty()) {\r\n            startLineNumber = selectionStart.startLineNumber;\r\n            startColumn = selectionStart.startColumn;\r\n            endLineNumber = position.lineNumber;\r\n            endColumn = position.column;\r\n        }\r\n        else {\r\n            if (position.isBeforeOrEqual(selectionStart.getStartPosition())) {\r\n                startLineNumber = selectionStart.endLineNumber;\r\n                startColumn = selectionStart.endColumn;\r\n                endLineNumber = position.lineNumber;\r\n                endColumn = position.column;\r\n            }\r\n            else {\r\n                startLineNumber = selectionStart.startLineNumber;\r\n                startColumn = selectionStart.startColumn;\r\n                endLineNumber = position.lineNumber;\r\n                endColumn = position.column;\r\n            }\r\n        }\r\n        return new Selection(startLineNumber, startColumn, endLineNumber, endColumn);\r\n    };\r\n    return SingleCursorState;\r\n}());\r\nexport { SingleCursorState };\r\nvar CursorContext = /** @class */ (function () {\r\n    function CursorContext(configuration, model, viewModel) {\r\n        this.model = model;\r\n        this.viewModel = viewModel;\r\n        this.config = new CursorConfiguration(this.model.getLanguageIdentifier(), this.model.getOptions(), configuration);\r\n    }\r\n    CursorContext.prototype.validateViewPosition = function (viewPosition, modelPosition) {\r\n        return this.viewModel.coordinatesConverter.validateViewPosition(viewPosition, modelPosition);\r\n    };\r\n    CursorContext.prototype.validateViewRange = function (viewRange, expectedModelRange) {\r\n        return this.viewModel.coordinatesConverter.validateViewRange(viewRange, expectedModelRange);\r\n    };\r\n    CursorContext.prototype.convertViewRangeToModelRange = function (viewRange) {\r\n        return this.viewModel.coordinatesConverter.convertViewRangeToModelRange(viewRange);\r\n    };\r\n    CursorContext.prototype.convertViewPositionToModelPosition = function (lineNumber, column) {\r\n        return this.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber, column));\r\n    };\r\n    CursorContext.prototype.convertModelPositionToViewPosition = function (modelPosition) {\r\n        return this.viewModel.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\r\n    };\r\n    CursorContext.prototype.convertModelRangeToViewRange = function (modelRange) {\r\n        return this.viewModel.coordinatesConverter.convertModelRangeToViewRange(modelRange);\r\n    };\r\n    CursorContext.prototype.getCurrentScrollTop = function () {\r\n        return this.viewModel.viewLayout.getCurrentScrollTop();\r\n    };\r\n    CursorContext.prototype.getCompletelyVisibleViewRange = function () {\r\n        return this.viewModel.getCompletelyVisibleViewRange();\r\n    };\r\n    CursorContext.prototype.getCompletelyVisibleModelRange = function () {\r\n        var viewRange = this.viewModel.getCompletelyVisibleViewRange();\r\n        return this.viewModel.coordinatesConverter.convertViewRangeToModelRange(viewRange);\r\n    };\r\n    CursorContext.prototype.getCompletelyVisibleViewRangeAtScrollTop = function (scrollTop) {\r\n        return this.viewModel.getCompletelyVisibleViewRangeAtScrollTop(scrollTop);\r\n    };\r\n    CursorContext.prototype.getVerticalOffsetForViewLine = function (viewLineNumber) {\r\n        return this.viewModel.viewLayout.getVerticalOffsetForLineNumber(viewLineNumber);\r\n    };\r\n    return CursorContext;\r\n}());\r\nexport { CursorContext };\r\nvar PartialModelCursorState = /** @class */ (function () {\r\n    function PartialModelCursorState(modelState) {\r\n        this.modelState = modelState;\r\n        this.viewState = null;\r\n    }\r\n    return PartialModelCursorState;\r\n}());\r\nexport { PartialModelCursorState };\r\nvar PartialViewCursorState = /** @class */ (function () {\r\n    function PartialViewCursorState(viewState) {\r\n        this.modelState = null;\r\n        this.viewState = viewState;\r\n    }\r\n    return PartialViewCursorState;\r\n}());\r\nexport { PartialViewCursorState };\r\nvar CursorState = /** @class */ (function () {\r\n    function CursorState(modelState, viewState) {\r\n        this.modelState = modelState;\r\n        this.viewState = viewState;\r\n    }\r\n    CursorState.fromModelState = function (modelState) {\r\n        return new PartialModelCursorState(modelState);\r\n    };\r\n    CursorState.fromViewState = function (viewState) {\r\n        return new PartialViewCursorState(viewState);\r\n    };\r\n    CursorState.fromModelSelection = function (modelSelection) {\r\n        var selectionStartLineNumber = modelSelection.selectionStartLineNumber;\r\n        var selectionStartColumn = modelSelection.selectionStartColumn;\r\n        var positionLineNumber = modelSelection.positionLineNumber;\r\n        var positionColumn = modelSelection.positionColumn;\r\n        var modelState = new SingleCursorState(new Range(selectionStartLineNumber, selectionStartColumn, selectionStartLineNumber, selectionStartColumn), 0, new Position(positionLineNumber, positionColumn), 0);\r\n        return CursorState.fromModelState(modelState);\r\n    };\r\n    CursorState.fromModelSelections = function (modelSelections) {\r\n        var states = [];\r\n        for (var i = 0, len = modelSelections.length; i < len; i++) {\r\n            states[i] = this.fromModelSelection(modelSelections[i]);\r\n        }\r\n        return states;\r\n    };\r\n    CursorState.prototype.equals = function (other) {\r\n        return (this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState));\r\n    };\r\n    return CursorState;\r\n}());\r\nexport { CursorState };\r\nvar EditOperationResult = /** @class */ (function () {\r\n    function EditOperationResult(type, commands, opts) {\r\n        this.type = type;\r\n        this.commands = commands;\r\n        this.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\r\n        this.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\r\n    }\r\n    return EditOperationResult;\r\n}());\r\nexport { EditOperationResult };\r\n/**\r\n * Common operations that work and make sense both on the model and on the view model.\r\n */\r\nvar CursorColumns = /** @class */ (function () {\r\n    function CursorColumns() {\r\n    }\r\n    CursorColumns.visibleColumnFromColumn = function (lineContent, column, tabSize) {\r\n        var lineContentLength = lineContent.length;\r\n        var endOffset = column - 1 < lineContentLength ? column - 1 : lineContentLength;\r\n        var result = 0;\r\n        var i = 0;\r\n        while (i < endOffset) {\r\n            var codePoint = strings.getNextCodePoint(lineContent, endOffset, i);\r\n            i += (codePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\r\n            if (codePoint === 9 /* Tab */) {\r\n                result = CursorColumns.nextRenderTabStop(result, tabSize);\r\n            }\r\n            else {\r\n                var graphemeBreakType = strings.getGraphemeBreakType(codePoint);\r\n                while (i < endOffset) {\r\n                    var nextCodePoint = strings.getNextCodePoint(lineContent, endOffset, i);\r\n                    var nextGraphemeBreakType = strings.getGraphemeBreakType(nextCodePoint);\r\n                    if (strings.breakBetweenGraphemeBreakType(graphemeBreakType, nextGraphemeBreakType)) {\r\n                        break;\r\n                    }\r\n                    i += (nextCodePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\r\n                    graphemeBreakType = nextGraphemeBreakType;\r\n                }\r\n                if (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\r\n                    result = result + 2;\r\n                }\r\n                else {\r\n                    result = result + 1;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    CursorColumns.visibleColumnFromColumn2 = function (config, model, position) {\r\n        return this.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, config.tabSize);\r\n    };\r\n    CursorColumns.columnFromVisibleColumn = function (lineContent, visibleColumn, tabSize) {\r\n        if (visibleColumn <= 0) {\r\n            return 1;\r\n        }\r\n        var lineLength = lineContent.length;\r\n        var beforeVisibleColumn = 0;\r\n        var beforeColumn = 1;\r\n        var i = 0;\r\n        while (i < lineLength) {\r\n            var codePoint = strings.getNextCodePoint(lineContent, lineLength, i);\r\n            i += (codePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\r\n            var afterVisibleColumn = void 0;\r\n            if (codePoint === 9 /* Tab */) {\r\n                afterVisibleColumn = CursorColumns.nextRenderTabStop(beforeVisibleColumn, tabSize);\r\n            }\r\n            else {\r\n                var graphemeBreakType = strings.getGraphemeBreakType(codePoint);\r\n                while (i < lineLength) {\r\n                    var nextCodePoint = strings.getNextCodePoint(lineContent, lineLength, i);\r\n                    var nextGraphemeBreakType = strings.getGraphemeBreakType(nextCodePoint);\r\n                    if (strings.breakBetweenGraphemeBreakType(graphemeBreakType, nextGraphemeBreakType)) {\r\n                        break;\r\n                    }\r\n                    i += (nextCodePoint >= 65536 /* UNICODE_SUPPLEMENTARY_PLANE_BEGIN */ ? 2 : 1);\r\n                    graphemeBreakType = nextGraphemeBreakType;\r\n                }\r\n                if (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\r\n                    afterVisibleColumn = beforeVisibleColumn + 2;\r\n                }\r\n                else {\r\n                    afterVisibleColumn = beforeVisibleColumn + 1;\r\n                }\r\n            }\r\n            var afterColumn = i + 1;\r\n            if (afterVisibleColumn >= visibleColumn) {\r\n                var beforeDelta = visibleColumn - beforeVisibleColumn;\r\n                var afterDelta = afterVisibleColumn - visibleColumn;\r\n                if (afterDelta < beforeDelta) {\r\n                    return afterColumn;\r\n                }\r\n                else {\r\n                    return beforeColumn;\r\n                }\r\n            }\r\n            beforeVisibleColumn = afterVisibleColumn;\r\n            beforeColumn = afterColumn;\r\n        }\r\n        // walked the entire string\r\n        return lineLength + 1;\r\n    };\r\n    CursorColumns.columnFromVisibleColumn2 = function (config, model, lineNumber, visibleColumn) {\r\n        var result = this.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, config.tabSize);\r\n        var minColumn = model.getLineMinColumn(lineNumber);\r\n        if (result < minColumn) {\r\n            return minColumn;\r\n        }\r\n        var maxColumn = model.getLineMaxColumn(lineNumber);\r\n        if (result > maxColumn) {\r\n            return maxColumn;\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n     */\r\n    CursorColumns.nextRenderTabStop = function (visibleColumn, tabSize) {\r\n        return visibleColumn + tabSize - visibleColumn % tabSize;\r\n    };\r\n    /**\r\n     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n     */\r\n    CursorColumns.nextIndentTabStop = function (visibleColumn, indentSize) {\r\n        return visibleColumn + indentSize - visibleColumn % indentSize;\r\n    };\r\n    /**\r\n     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n     */\r\n    CursorColumns.prevRenderTabStop = function (column, tabSize) {\r\n        return column - 1 - (column - 1) % tabSize;\r\n    };\r\n    /**\r\n     * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\r\n     */\r\n    CursorColumns.prevIndentTabStop = function (column, indentSize) {\r\n        return column - 1 - (column - 1) % indentSize;\r\n    };\r\n    return CursorColumns;\r\n}());\r\nexport { CursorColumns };\r\nexport function isQuote(ch) {\r\n    return (ch === '\\'' || ch === '\"' || ch === '`');\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { toUint8 } from '../../../base/common/uint.js';\r\n/**\r\n * A fast character classifier that uses a compact array for ASCII values.\r\n */\r\nvar CharacterClassifier = /** @class */ (function () {\r\n    function CharacterClassifier(_defaultValue) {\r\n        var defaultValue = toUint8(_defaultValue);\r\n        this._defaultValue = defaultValue;\r\n        this._asciiMap = CharacterClassifier._createAsciiMap(defaultValue);\r\n        this._map = new Map();\r\n    }\r\n    CharacterClassifier._createAsciiMap = function (defaultValue) {\r\n        var asciiMap = new Uint8Array(256);\r\n        for (var i = 0; i < 256; i++) {\r\n            asciiMap[i] = defaultValue;\r\n        }\r\n        return asciiMap;\r\n    };\r\n    CharacterClassifier.prototype.set = function (charCode, _value) {\r\n        var value = toUint8(_value);\r\n        if (charCode >= 0 && charCode < 256) {\r\n            this._asciiMap[charCode] = value;\r\n        }\r\n        else {\r\n            this._map.set(charCode, value);\r\n        }\r\n    };\r\n    CharacterClassifier.prototype.get = function (charCode) {\r\n        if (charCode >= 0 && charCode < 256) {\r\n            return this._asciiMap[charCode];\r\n        }\r\n        else {\r\n            return (this._map.get(charCode) || this._defaultValue);\r\n        }\r\n    };\r\n    return CharacterClassifier;\r\n}());\r\nexport { CharacterClassifier };\r\nvar CharacterSet = /** @class */ (function () {\r\n    function CharacterSet() {\r\n        this._actual = new CharacterClassifier(0 /* False */);\r\n    }\r\n    CharacterSet.prototype.add = function (charCode) {\r\n        this._actual.set(charCode, 1 /* True */);\r\n    };\r\n    CharacterSet.prototype.has = function (charCode) {\r\n        return (this._actual.get(charCode) === 1 /* True */);\r\n    };\r\n    return CharacterSet;\r\n}());\r\nexport { CharacterSet };\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n/**\r\n * A very VM friendly rgba datastructure.\r\n * Please don't touch unless you take a look at the IR.\r\n */\r\nvar RGBA8 = /** @class */ (function () {\r\n    function RGBA8(r, g, b, a) {\r\n        this.r = RGBA8._clamp(r);\r\n        this.g = RGBA8._clamp(g);\r\n        this.b = RGBA8._clamp(b);\r\n        this.a = RGBA8._clamp(a);\r\n    }\r\n    RGBA8._clamp = function (c) {\r\n        if (c < 0) {\r\n            return 0;\r\n        }\r\n        if (c > 255) {\r\n            return 255;\r\n        }\r\n        return c | 0;\r\n    };\r\n    RGBA8.Empty = new RGBA8(0, 0, 0, 0);\r\n    return RGBA8;\r\n}());\r\nexport { RGBA8 };\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Position } from './position.js';\r\n/**\r\n * A range in the editor. (startLineNumber,startColumn) is <= (endLineNumber,endColumn)\r\n */\r\nvar Range = /** @class */ (function () {\r\n    function Range(startLineNumber, startColumn, endLineNumber, endColumn) {\r\n        if ((startLineNumber > endLineNumber) || (startLineNumber === endLineNumber && startColumn > endColumn)) {\r\n            this.startLineNumber = endLineNumber;\r\n            this.startColumn = endColumn;\r\n            this.endLineNumber = startLineNumber;\r\n            this.endColumn = startColumn;\r\n        }\r\n        else {\r\n            this.startLineNumber = startLineNumber;\r\n            this.startColumn = startColumn;\r\n            this.endLineNumber = endLineNumber;\r\n            this.endColumn = endColumn;\r\n        }\r\n    }\r\n    /**\r\n     * Test if this range is empty.\r\n     */\r\n    Range.prototype.isEmpty = function () {\r\n        return Range.isEmpty(this);\r\n    };\r\n    /**\r\n     * Test if `range` is empty.\r\n     */\r\n    Range.isEmpty = function (range) {\r\n        return (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn);\r\n    };\r\n    /**\r\n     * Test if position is in this range. If the position is at the edges, will return true.\r\n     */\r\n    Range.prototype.containsPosition = function (position) {\r\n        return Range.containsPosition(this, position);\r\n    };\r\n    /**\r\n     * Test if `position` is in `range`. If the position is at the edges, will return true.\r\n     */\r\n    Range.containsPosition = function (range, position) {\r\n        if (position.lineNumber < range.startLineNumber || position.lineNumber > range.endLineNumber) {\r\n            return false;\r\n        }\r\n        if (position.lineNumber === range.startLineNumber && position.column < range.startColumn) {\r\n            return false;\r\n        }\r\n        if (position.lineNumber === range.endLineNumber && position.column > range.endColumn) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Test if range is in this range. If the range is equal to this range, will return true.\r\n     */\r\n    Range.prototype.containsRange = function (range) {\r\n        return Range.containsRange(this, range);\r\n    };\r\n    /**\r\n     * Test if `otherRange` is in `range`. If the ranges are equal, will return true.\r\n     */\r\n    Range.containsRange = function (range, otherRange) {\r\n        if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\r\n            return false;\r\n        }\r\n        if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\r\n            return false;\r\n        }\r\n        if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn < range.startColumn) {\r\n            return false;\r\n        }\r\n        if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn > range.endColumn) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Test if `range` is strictly in this range. `range` must start after and end before this range for the result to be true.\r\n     */\r\n    Range.prototype.strictContainsRange = function (range) {\r\n        return Range.strictContainsRange(this, range);\r\n    };\r\n    /**\r\n     * Test if `otherRange` is strinctly in `range` (must start after, and end before). If the ranges are equal, will return false.\r\n     */\r\n    Range.strictContainsRange = function (range, otherRange) {\r\n        if (otherRange.startLineNumber < range.startLineNumber || otherRange.endLineNumber < range.startLineNumber) {\r\n            return false;\r\n        }\r\n        if (otherRange.startLineNumber > range.endLineNumber || otherRange.endLineNumber > range.endLineNumber) {\r\n            return false;\r\n        }\r\n        if (otherRange.startLineNumber === range.startLineNumber && otherRange.startColumn <= range.startColumn) {\r\n            return false;\r\n        }\r\n        if (otherRange.endLineNumber === range.endLineNumber && otherRange.endColumn >= range.endColumn) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * A reunion of the two ranges.\r\n     * The smallest position will be used as the start point, and the largest one as the end point.\r\n     */\r\n    Range.prototype.plusRange = function (range) {\r\n        return Range.plusRange(this, range);\r\n    };\r\n    /**\r\n     * A reunion of the two ranges.\r\n     * The smallest position will be used as the start point, and the largest one as the end point.\r\n     */\r\n    Range.plusRange = function (a, b) {\r\n        var startLineNumber;\r\n        var startColumn;\r\n        var endLineNumber;\r\n        var endColumn;\r\n        if (b.startLineNumber < a.startLineNumber) {\r\n            startLineNumber = b.startLineNumber;\r\n            startColumn = b.startColumn;\r\n        }\r\n        else if (b.startLineNumber === a.startLineNumber) {\r\n            startLineNumber = b.startLineNumber;\r\n            startColumn = Math.min(b.startColumn, a.startColumn);\r\n        }\r\n        else {\r\n            startLineNumber = a.startLineNumber;\r\n            startColumn = a.startColumn;\r\n        }\r\n        if (b.endLineNumber > a.endLineNumber) {\r\n            endLineNumber = b.endLineNumber;\r\n            endColumn = b.endColumn;\r\n        }\r\n        else if (b.endLineNumber === a.endLineNumber) {\r\n            endLineNumber = b.endLineNumber;\r\n            endColumn = Math.max(b.endColumn, a.endColumn);\r\n        }\r\n        else {\r\n            endLineNumber = a.endLineNumber;\r\n            endColumn = a.endColumn;\r\n        }\r\n        return new Range(startLineNumber, startColumn, endLineNumber, endColumn);\r\n    };\r\n    /**\r\n     * A intersection of the two ranges.\r\n     */\r\n    Range.prototype.intersectRanges = function (range) {\r\n        return Range.intersectRanges(this, range);\r\n    };\r\n    /**\r\n     * A intersection of the two ranges.\r\n     */\r\n    Range.intersectRanges = function (a, b) {\r\n        var resultStartLineNumber = a.startLineNumber;\r\n        var resultStartColumn = a.startColumn;\r\n        var resultEndLineNumber = a.endLineNumber;\r\n        var resultEndColumn = a.endColumn;\r\n        var otherStartLineNumber = b.startLineNumber;\r\n        var otherStartColumn = b.startColumn;\r\n        var otherEndLineNumber = b.endLineNumber;\r\n        var otherEndColumn = b.endColumn;\r\n        if (resultStartLineNumber < otherStartLineNumber) {\r\n            resultStartLineNumber = otherStartLineNumber;\r\n            resultStartColumn = otherStartColumn;\r\n        }\r\n        else if (resultStartLineNumber === otherStartLineNumber) {\r\n            resultStartColumn = Math.max(resultStartColumn, otherStartColumn);\r\n        }\r\n        if (resultEndLineNumber > otherEndLineNumber) {\r\n            resultEndLineNumber = otherEndLineNumber;\r\n            resultEndColumn = otherEndColumn;\r\n        }\r\n        else if (resultEndLineNumber === otherEndLineNumber) {\r\n            resultEndColumn = Math.min(resultEndColumn, otherEndColumn);\r\n        }\r\n        // Check if selection is now empty\r\n        if (resultStartLineNumber > resultEndLineNumber) {\r\n            return null;\r\n        }\r\n        if (resultStartLineNumber === resultEndLineNumber && resultStartColumn > resultEndColumn) {\r\n            return null;\r\n        }\r\n        return new Range(resultStartLineNumber, resultStartColumn, resultEndLineNumber, resultEndColumn);\r\n    };\r\n    /**\r\n     * Test if this range equals other.\r\n     */\r\n    Range.prototype.equalsRange = function (other) {\r\n        return Range.equalsRange(this, other);\r\n    };\r\n    /**\r\n     * Test if range `a` equals `b`.\r\n     */\r\n    Range.equalsRange = function (a, b) {\r\n        return (!!a &&\r\n            !!b &&\r\n            a.startLineNumber === b.startLineNumber &&\r\n            a.startColumn === b.startColumn &&\r\n            a.endLineNumber === b.endLineNumber &&\r\n            a.endColumn === b.endColumn);\r\n    };\r\n    /**\r\n     * Return the end position (which will be after or equal to the start position)\r\n     */\r\n    Range.prototype.getEndPosition = function () {\r\n        return new Position(this.endLineNumber, this.endColumn);\r\n    };\r\n    /**\r\n     * Return the start position (which will be before or equal to the end position)\r\n     */\r\n    Range.prototype.getStartPosition = function () {\r\n        return new Position(this.startLineNumber, this.startColumn);\r\n    };\r\n    /**\r\n     * Transform to a user presentable string representation.\r\n     */\r\n    Range.prototype.toString = function () {\r\n        return '[' + this.startLineNumber + ',' + this.startColumn + ' -> ' + this.endLineNumber + ',' + this.endColumn + ']';\r\n    };\r\n    /**\r\n     * Create a new range using this range's start position, and using endLineNumber and endColumn as the end position.\r\n     */\r\n    Range.prototype.setEndPosition = function (endLineNumber, endColumn) {\r\n        return new Range(this.startLineNumber, this.startColumn, endLineNumber, endColumn);\r\n    };\r\n    /**\r\n     * Create a new range using this range's end position, and using startLineNumber and startColumn as the start position.\r\n     */\r\n    Range.prototype.setStartPosition = function (startLineNumber, startColumn) {\r\n        return new Range(startLineNumber, startColumn, this.endLineNumber, this.endColumn);\r\n    };\r\n    /**\r\n     * Create a new empty range using this range's start position.\r\n     */\r\n    Range.prototype.collapseToStart = function () {\r\n        return Range.collapseToStart(this);\r\n    };\r\n    /**\r\n     * Create a new empty range using this range's start position.\r\n     */\r\n    Range.collapseToStart = function (range) {\r\n        return new Range(range.startLineNumber, range.startColumn, range.startLineNumber, range.startColumn);\r\n    };\r\n    // ---\r\n    Range.fromPositions = function (start, end) {\r\n        if (end === void 0) { end = start; }\r\n        return new Range(start.lineNumber, start.column, end.lineNumber, end.column);\r\n    };\r\n    Range.lift = function (range) {\r\n        if (!range) {\r\n            return null;\r\n        }\r\n        return new Range(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\r\n    };\r\n    /**\r\n     * Test if `obj` is an `IRange`.\r\n     */\r\n    Range.isIRange = function (obj) {\r\n        return (obj\r\n            && (typeof obj.startLineNumber === 'number')\r\n            && (typeof obj.startColumn === 'number')\r\n            && (typeof obj.endLineNumber === 'number')\r\n            && (typeof obj.endColumn === 'number'));\r\n    };\r\n    /**\r\n     * Test if the two ranges are touching in any way.\r\n     */\r\n    Range.areIntersectingOrTouching = function (a, b) {\r\n        // Check if `a` is before `b`\r\n        if (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn < b.startColumn)) {\r\n            return false;\r\n        }\r\n        // Check if `b` is before `a`\r\n        if (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn < a.startColumn)) {\r\n            return false;\r\n        }\r\n        // These ranges must intersect\r\n        return true;\r\n    };\r\n    /**\r\n     * Test if the two ranges are intersecting. If the ranges are touching it returns true.\r\n     */\r\n    Range.areIntersecting = function (a, b) {\r\n        // Check if `a` is before `b`\r\n        if (a.endLineNumber < b.startLineNumber || (a.endLineNumber === b.startLineNumber && a.endColumn <= b.startColumn)) {\r\n            return false;\r\n        }\r\n        // Check if `b` is before `a`\r\n        if (b.endLineNumber < a.startLineNumber || (b.endLineNumber === a.startLineNumber && b.endColumn <= a.startColumn)) {\r\n            return false;\r\n        }\r\n        // These ranges must intersect\r\n        return true;\r\n    };\r\n    /**\r\n     * A function that compares ranges, useful for sorting ranges\r\n     * It will first compare ranges on the startPosition and then on the endPosition\r\n     */\r\n    Range.compareRangesUsingStarts = function (a, b) {\r\n        if (a && b) {\r\n            var aStartLineNumber = a.startLineNumber | 0;\r\n            var bStartLineNumber = b.startLineNumber | 0;\r\n            if (aStartLineNumber === bStartLineNumber) {\r\n                var aStartColumn = a.startColumn | 0;\r\n                var bStartColumn = b.startColumn | 0;\r\n                if (aStartColumn === bStartColumn) {\r\n                    var aEndLineNumber = a.endLineNumber | 0;\r\n                    var bEndLineNumber = b.endLineNumber | 0;\r\n                    if (aEndLineNumber === bEndLineNumber) {\r\n                        var aEndColumn = a.endColumn | 0;\r\n                        var bEndColumn = b.endColumn | 0;\r\n                        return aEndColumn - bEndColumn;\r\n                    }\r\n                    return aEndLineNumber - bEndLineNumber;\r\n                }\r\n                return aStartColumn - bStartColumn;\r\n            }\r\n            return aStartLineNumber - bStartLineNumber;\r\n        }\r\n        var aExists = (a ? 1 : 0);\r\n        var bExists = (b ? 1 : 0);\r\n        return aExists - bExists;\r\n    };\r\n    /**\r\n     * A function that compares ranges, useful for sorting ranges\r\n     * It will first compare ranges on the endPosition and then on the startPosition\r\n     */\r\n    Range.compareRangesUsingEnds = function (a, b) {\r\n        if (a.endLineNumber === b.endLineNumber) {\r\n            if (a.endColumn === b.endColumn) {\r\n                if (a.startLineNumber === b.startLineNumber) {\r\n                    return a.startColumn - b.startColumn;\r\n                }\r\n                return a.startLineNumber - b.startLineNumber;\r\n            }\r\n            return a.endColumn - b.endColumn;\r\n        }\r\n        return a.endLineNumber - b.endLineNumber;\r\n    };\r\n    /**\r\n     * Test if the range spans multiple lines.\r\n     */\r\n    Range.spansMultipleLines = function (range) {\r\n        return range.endLineNumber > range.startLineNumber;\r\n    };\r\n    return Range;\r\n}());\r\nexport { Range };\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n/**\r\n * A position in the editor.\r\n */\r\nvar Position = /** @class */ (function () {\r\n    function Position(lineNumber, column) {\r\n        this.lineNumber = lineNumber;\r\n        this.column = column;\r\n    }\r\n    /**\r\n     * Create a new position from this position.\r\n     *\r\n     * @param newLineNumber new line number\r\n     * @param newColumn new column\r\n     */\r\n    Position.prototype.with = function (newLineNumber, newColumn) {\r\n        if (newLineNumber === void 0) { newLineNumber = this.lineNumber; }\r\n        if (newColumn === void 0) { newColumn = this.column; }\r\n        if (newLineNumber === this.lineNumber && newColumn === this.column) {\r\n            return this;\r\n        }\r\n        else {\r\n            return new Position(newLineNumber, newColumn);\r\n        }\r\n    };\r\n    /**\r\n     * Derive a new position from this position.\r\n     *\r\n     * @param deltaLineNumber line number delta\r\n     * @param deltaColumn column delta\r\n     */\r\n    Position.prototype.delta = function (deltaLineNumber, deltaColumn) {\r\n        if (deltaLineNumber === void 0) { deltaLineNumber = 0; }\r\n        if (deltaColumn === void 0) { deltaColumn = 0; }\r\n        return this.with(this.lineNumber + deltaLineNumber, this.column + deltaColumn);\r\n    };\r\n    /**\r\n     * Test if this position equals other position\r\n     */\r\n    Position.prototype.equals = function (other) {\r\n        return Position.equals(this, other);\r\n    };\r\n    /**\r\n     * Test if position `a` equals position `b`\r\n     */\r\n    Position.equals = function (a, b) {\r\n        if (!a && !b) {\r\n            return true;\r\n        }\r\n        return (!!a &&\r\n            !!b &&\r\n            a.lineNumber === b.lineNumber &&\r\n            a.column === b.column);\r\n    };\r\n    /**\r\n     * Test if this position is before other position.\r\n     * If the two positions are equal, the result will be false.\r\n     */\r\n    Position.prototype.isBefore = function (other) {\r\n        return Position.isBefore(this, other);\r\n    };\r\n    /**\r\n     * Test if position `a` is before position `b`.\r\n     * If the two positions are equal, the result will be false.\r\n     */\r\n    Position.isBefore = function (a, b) {\r\n        if (a.lineNumber < b.lineNumber) {\r\n            return true;\r\n        }\r\n        if (b.lineNumber < a.lineNumber) {\r\n            return false;\r\n        }\r\n        return a.column < b.column;\r\n    };\r\n    /**\r\n     * Test if this position is before other position.\r\n     * If the two positions are equal, the result will be true.\r\n     */\r\n    Position.prototype.isBeforeOrEqual = function (other) {\r\n        return Position.isBeforeOrEqual(this, other);\r\n    };\r\n    /**\r\n     * Test if position `a` is before position `b`.\r\n     * If the two positions are equal, the result will be true.\r\n     */\r\n    Position.isBeforeOrEqual = function (a, b) {\r\n        if (a.lineNumber < b.lineNumber) {\r\n            return true;\r\n        }\r\n        if (b.lineNumber < a.lineNumber) {\r\n            return false;\r\n        }\r\n        return a.column <= b.column;\r\n    };\r\n    /**\r\n     * A function that compares positions, useful for sorting\r\n     */\r\n    Position.compare = function (a, b) {\r\n        var aLineNumber = a.lineNumber | 0;\r\n        var bLineNumber = b.lineNumber | 0;\r\n        if (aLineNumber === bLineNumber) {\r\n            var aColumn = a.column | 0;\r\n            var bColumn = b.column | 0;\r\n            return aColumn - bColumn;\r\n        }\r\n        return aLineNumber - bLineNumber;\r\n    };\r\n    /**\r\n     * Clone this position.\r\n     */\r\n    Position.prototype.clone = function () {\r\n        return new Position(this.lineNumber, this.column);\r\n    };\r\n    /**\r\n     * Convert to a human-readable representation.\r\n     */\r\n    Position.prototype.toString = function () {\r\n        return '(' + this.lineNumber + ',' + this.column + ')';\r\n    };\r\n    // ---\r\n    /**\r\n     * Create a `Position` from an `IPosition`.\r\n     */\r\n    Position.lift = function (pos) {\r\n        return new Position(pos.lineNumber, pos.column);\r\n    };\r\n    /**\r\n     * Test if `obj` is an `IPosition`.\r\n     */\r\n    Position.isIPosition = function (obj) {\r\n        return (obj\r\n            && (typeof obj.lineNumber === 'number')\r\n            && (typeof obj.column === 'number'));\r\n    };\r\n    return Position;\r\n}());\r\nexport { Position };\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as types from '../../../base/common/types.js';\r\nimport { CursorState, SingleCursorState } from './cursorCommon.js';\r\nimport { MoveOperations } from './cursorMoveOperations.js';\r\nimport { WordOperations } from './cursorWordOperations.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nvar CursorMoveCommands = /** @class */ (function () {\r\n    function CursorMoveCommands() {\r\n    }\r\n    CursorMoveCommands.addCursorDown = function (context, cursors, useLogicalLine) {\r\n        var result = [], resultLen = 0;\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\r\n            if (useLogicalLine) {\r\n                result[resultLen++] = CursorState.fromModelState(MoveOperations.translateDown(context.config, context.model, cursor.modelState));\r\n            }\r\n            else {\r\n                result[resultLen++] = CursorState.fromViewState(MoveOperations.translateDown(context.config, context.viewModel, cursor.viewState));\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands.addCursorUp = function (context, cursors, useLogicalLine) {\r\n        var result = [], resultLen = 0;\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\r\n            if (useLogicalLine) {\r\n                result[resultLen++] = CursorState.fromModelState(MoveOperations.translateUp(context.config, context.model, cursor.modelState));\r\n            }\r\n            else {\r\n                result[resultLen++] = CursorState.fromViewState(MoveOperations.translateUp(context.config, context.viewModel, cursor.viewState));\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands.moveToBeginningOfLine = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[i] = this._moveToLineStart(context, cursor, inSelectionMode);\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveToLineStart = function (context, cursor, inSelectionMode) {\r\n        var currentViewStateColumn = cursor.viewState.position.column;\r\n        var currentModelStateColumn = cursor.modelState.position.column;\r\n        var isFirstLineOfWrappedLine = currentViewStateColumn === currentModelStateColumn;\r\n        var currentViewStatelineNumber = cursor.viewState.position.lineNumber;\r\n        var firstNonBlankColumn = context.viewModel.getLineFirstNonWhitespaceColumn(currentViewStatelineNumber);\r\n        var isBeginningOfViewLine = currentViewStateColumn === firstNonBlankColumn;\r\n        if (!isFirstLineOfWrappedLine && !isBeginningOfViewLine) {\r\n            return this._moveToLineStartByView(context, cursor, inSelectionMode);\r\n        }\r\n        else {\r\n            return this._moveToLineStartByModel(context, cursor, inSelectionMode);\r\n        }\r\n    };\r\n    CursorMoveCommands._moveToLineStartByView = function (context, cursor, inSelectionMode) {\r\n        return CursorState.fromViewState(MoveOperations.moveToBeginningOfLine(context.config, context.viewModel, cursor.viewState, inSelectionMode));\r\n    };\r\n    CursorMoveCommands._moveToLineStartByModel = function (context, cursor, inSelectionMode) {\r\n        return CursorState.fromModelState(MoveOperations.moveToBeginningOfLine(context.config, context.model, cursor.modelState, inSelectionMode));\r\n    };\r\n    CursorMoveCommands.moveToEndOfLine = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[i] = this._moveToLineEnd(context, cursor, inSelectionMode);\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveToLineEnd = function (context, cursor, inSelectionMode) {\r\n        var viewStatePosition = cursor.viewState.position;\r\n        var viewModelMaxColumn = context.viewModel.getLineMaxColumn(viewStatePosition.lineNumber);\r\n        var isEndOfViewLine = viewStatePosition.column === viewModelMaxColumn;\r\n        var modelStatePosition = cursor.modelState.position;\r\n        var modelMaxColumn = context.model.getLineMaxColumn(modelStatePosition.lineNumber);\r\n        var isEndLineOfWrappedLine = viewModelMaxColumn - viewStatePosition.column === modelMaxColumn - modelStatePosition.column;\r\n        if (isEndOfViewLine || isEndLineOfWrappedLine) {\r\n            return this._moveToLineEndByModel(context, cursor, inSelectionMode);\r\n        }\r\n        else {\r\n            return this._moveToLineEndByView(context, cursor, inSelectionMode);\r\n        }\r\n    };\r\n    CursorMoveCommands._moveToLineEndByView = function (context, cursor, inSelectionMode) {\r\n        return CursorState.fromViewState(MoveOperations.moveToEndOfLine(context.config, context.viewModel, cursor.viewState, inSelectionMode));\r\n    };\r\n    CursorMoveCommands._moveToLineEndByModel = function (context, cursor, inSelectionMode) {\r\n        return CursorState.fromModelState(MoveOperations.moveToEndOfLine(context.config, context.model, cursor.modelState, inSelectionMode));\r\n    };\r\n    CursorMoveCommands.expandLineSelection = function (context, cursors) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var startLineNumber = cursor.modelState.selection.startLineNumber;\r\n            var lineCount = context.model.getLineCount();\r\n            var endLineNumber = cursor.modelState.selection.endLineNumber;\r\n            var endColumn = void 0;\r\n            if (endLineNumber === lineCount) {\r\n                endColumn = context.model.getLineMaxColumn(lineCount);\r\n            }\r\n            else {\r\n                endLineNumber++;\r\n                endColumn = 1;\r\n            }\r\n            result[i] = CursorState.fromModelState(new SingleCursorState(new Range(startLineNumber, 1, startLineNumber, 1), 0, new Position(endLineNumber, endColumn), 0));\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands.moveToBeginningOfBuffer = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[i] = CursorState.fromModelState(MoveOperations.moveToBeginningOfBuffer(context.config, context.model, cursor.modelState, inSelectionMode));\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands.moveToEndOfBuffer = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[i] = CursorState.fromModelState(MoveOperations.moveToEndOfBuffer(context.config, context.model, cursor.modelState, inSelectionMode));\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands.selectAll = function (context, cursor) {\r\n        var lineCount = context.model.getLineCount();\r\n        var maxColumn = context.model.getLineMaxColumn(lineCount);\r\n        return CursorState.fromModelState(new SingleCursorState(new Range(1, 1, 1, 1), 0, new Position(lineCount, maxColumn), 0));\r\n    };\r\n    CursorMoveCommands.line = function (context, cursor, inSelectionMode, _position, _viewPosition) {\r\n        var position = context.model.validatePosition(_position);\r\n        var viewPosition = (_viewPosition\r\n            ? context.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position)\r\n            : context.convertModelPositionToViewPosition(position));\r\n        if (!inSelectionMode || !cursor.modelState.hasSelection()) {\r\n            // Entering line selection for the first time\r\n            var lineCount = context.model.getLineCount();\r\n            var selectToLineNumber = position.lineNumber + 1;\r\n            var selectToColumn = 1;\r\n            if (selectToLineNumber > lineCount) {\r\n                selectToLineNumber = lineCount;\r\n                selectToColumn = context.model.getLineMaxColumn(selectToLineNumber);\r\n            }\r\n            return CursorState.fromModelState(new SingleCursorState(new Range(position.lineNumber, 1, selectToLineNumber, selectToColumn), 0, new Position(selectToLineNumber, selectToColumn), 0));\r\n        }\r\n        // Continuing line selection\r\n        var enteringLineNumber = cursor.modelState.selectionStart.getStartPosition().lineNumber;\r\n        if (position.lineNumber < enteringLineNumber) {\r\n            return CursorState.fromViewState(cursor.viewState.move(cursor.modelState.hasSelection(), viewPosition.lineNumber, 1, 0));\r\n        }\r\n        else if (position.lineNumber > enteringLineNumber) {\r\n            var lineCount = context.viewModel.getLineCount();\r\n            var selectToViewLineNumber = viewPosition.lineNumber + 1;\r\n            var selectToViewColumn = 1;\r\n            if (selectToViewLineNumber > lineCount) {\r\n                selectToViewLineNumber = lineCount;\r\n                selectToViewColumn = context.viewModel.getLineMaxColumn(selectToViewLineNumber);\r\n            }\r\n            return CursorState.fromViewState(cursor.viewState.move(cursor.modelState.hasSelection(), selectToViewLineNumber, selectToViewColumn, 0));\r\n        }\r\n        else {\r\n            var endPositionOfSelectionStart = cursor.modelState.selectionStart.getEndPosition();\r\n            return CursorState.fromModelState(cursor.modelState.move(cursor.modelState.hasSelection(), endPositionOfSelectionStart.lineNumber, endPositionOfSelectionStart.column, 0));\r\n        }\r\n    };\r\n    CursorMoveCommands.word = function (context, cursor, inSelectionMode, _position) {\r\n        var position = context.model.validatePosition(_position);\r\n        return CursorState.fromModelState(WordOperations.word(context.config, context.model, cursor.modelState, inSelectionMode, position));\r\n    };\r\n    CursorMoveCommands.cancelSelection = function (context, cursor) {\r\n        if (!cursor.modelState.hasSelection()) {\r\n            return new CursorState(cursor.modelState, cursor.viewState);\r\n        }\r\n        var lineNumber = cursor.viewState.position.lineNumber;\r\n        var column = cursor.viewState.position.column;\r\n        return CursorState.fromViewState(new SingleCursorState(new Range(lineNumber, column, lineNumber, column), 0, new Position(lineNumber, column), 0));\r\n    };\r\n    CursorMoveCommands.moveTo = function (context, cursor, inSelectionMode, _position, _viewPosition) {\r\n        var position = context.model.validatePosition(_position);\r\n        var viewPosition = (_viewPosition\r\n            ? context.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position)\r\n            : context.convertModelPositionToViewPosition(position));\r\n        return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, viewPosition.lineNumber, viewPosition.column, 0));\r\n    };\r\n    CursorMoveCommands.move = function (context, cursors, args) {\r\n        var inSelectionMode = args.select;\r\n        var value = args.value;\r\n        switch (args.direction) {\r\n            case 0 /* Left */: {\r\n                if (args.unit === 4 /* HalfLine */) {\r\n                    // Move left by half the current line length\r\n                    return this._moveHalfLineLeft(context, cursors, inSelectionMode);\r\n                }\r\n                else {\r\n                    // Move left by `moveParams.value` columns\r\n                    return this._moveLeft(context, cursors, inSelectionMode, value);\r\n                }\r\n            }\r\n            case 1 /* Right */: {\r\n                if (args.unit === 4 /* HalfLine */) {\r\n                    // Move right by half the current line length\r\n                    return this._moveHalfLineRight(context, cursors, inSelectionMode);\r\n                }\r\n                else {\r\n                    // Move right by `moveParams.value` columns\r\n                    return this._moveRight(context, cursors, inSelectionMode, value);\r\n                }\r\n            }\r\n            case 2 /* Up */: {\r\n                if (args.unit === 2 /* WrappedLine */) {\r\n                    // Move up by view lines\r\n                    return this._moveUpByViewLines(context, cursors, inSelectionMode, value);\r\n                }\r\n                else {\r\n                    // Move up by model lines\r\n                    return this._moveUpByModelLines(context, cursors, inSelectionMode, value);\r\n                }\r\n            }\r\n            case 3 /* Down */: {\r\n                if (args.unit === 2 /* WrappedLine */) {\r\n                    // Move down by view lines\r\n                    return this._moveDownByViewLines(context, cursors, inSelectionMode, value);\r\n                }\r\n                else {\r\n                    // Move down by model lines\r\n                    return this._moveDownByModelLines(context, cursors, inSelectionMode, value);\r\n                }\r\n            }\r\n            case 4 /* WrappedLineStart */: {\r\n                // Move to the beginning of the current view line\r\n                return this._moveToViewMinColumn(context, cursors, inSelectionMode);\r\n            }\r\n            case 5 /* WrappedLineFirstNonWhitespaceCharacter */: {\r\n                // Move to the first non-whitespace column of the current view line\r\n                return this._moveToViewFirstNonWhitespaceColumn(context, cursors, inSelectionMode);\r\n            }\r\n            case 6 /* WrappedLineColumnCenter */: {\r\n                // Move to the \"center\" of the current view line\r\n                return this._moveToViewCenterColumn(context, cursors, inSelectionMode);\r\n            }\r\n            case 7 /* WrappedLineEnd */: {\r\n                // Move to the end of the current view line\r\n                return this._moveToViewMaxColumn(context, cursors, inSelectionMode);\r\n            }\r\n            case 8 /* WrappedLineLastNonWhitespaceCharacter */: {\r\n                // Move to the last non-whitespace column of the current view line\r\n                return this._moveToViewLastNonWhitespaceColumn(context, cursors, inSelectionMode);\r\n            }\r\n            case 9 /* ViewPortTop */: {\r\n                // Move to the nth line start in the viewport (from the top)\r\n                var cursor = cursors[0];\r\n                var visibleModelRange = context.getCompletelyVisibleModelRange();\r\n                var modelLineNumber = this._firstLineNumberInRange(context.model, visibleModelRange, value);\r\n                var modelColumn = context.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\r\n                return [this._moveToModelPosition(context, cursor, inSelectionMode, modelLineNumber, modelColumn)];\r\n            }\r\n            case 11 /* ViewPortBottom */: {\r\n                // Move to the nth line start in the viewport (from the bottom)\r\n                var cursor = cursors[0];\r\n                var visibleModelRange = context.getCompletelyVisibleModelRange();\r\n                var modelLineNumber = this._lastLineNumberInRange(context.model, visibleModelRange, value);\r\n                var modelColumn = context.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\r\n                return [this._moveToModelPosition(context, cursor, inSelectionMode, modelLineNumber, modelColumn)];\r\n            }\r\n            case 10 /* ViewPortCenter */: {\r\n                // Move to the line start in the viewport center\r\n                var cursor = cursors[0];\r\n                var visibleModelRange = context.getCompletelyVisibleModelRange();\r\n                var modelLineNumber = Math.round((visibleModelRange.startLineNumber + visibleModelRange.endLineNumber) / 2);\r\n                var modelColumn = context.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\r\n                return [this._moveToModelPosition(context, cursor, inSelectionMode, modelLineNumber, modelColumn)];\r\n            }\r\n            case 12 /* ViewPortIfOutside */: {\r\n                // Move to a position inside the viewport\r\n                var visibleViewRange = context.getCompletelyVisibleViewRange();\r\n                var result = [];\r\n                for (var i = 0, len = cursors.length; i < len; i++) {\r\n                    var cursor = cursors[i];\r\n                    result[i] = this.findPositionInViewportIfOutside(context, cursor, visibleViewRange, inSelectionMode);\r\n                }\r\n                return result;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    CursorMoveCommands.findPositionInViewportIfOutside = function (context, cursor, visibleViewRange, inSelectionMode) {\r\n        var viewLineNumber = cursor.viewState.position.lineNumber;\r\n        if (visibleViewRange.startLineNumber <= viewLineNumber && viewLineNumber <= visibleViewRange.endLineNumber - 1) {\r\n            // Nothing to do, cursor is in viewport\r\n            return new CursorState(cursor.modelState, cursor.viewState);\r\n        }\r\n        else {\r\n            if (viewLineNumber > visibleViewRange.endLineNumber - 1) {\r\n                viewLineNumber = visibleViewRange.endLineNumber - 1;\r\n            }\r\n            if (viewLineNumber < visibleViewRange.startLineNumber) {\r\n                viewLineNumber = visibleViewRange.startLineNumber;\r\n            }\r\n            var viewColumn = context.viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\r\n            return this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\r\n        }\r\n    };\r\n    /**\r\n     * Find the nth line start included in the range (from the start).\r\n     */\r\n    CursorMoveCommands._firstLineNumberInRange = function (model, range, count) {\r\n        var startLineNumber = range.startLineNumber;\r\n        if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\r\n            // Move on to the second line if the first line start is not included in the range\r\n            startLineNumber++;\r\n        }\r\n        return Math.min(range.endLineNumber, startLineNumber + count - 1);\r\n    };\r\n    /**\r\n     * Find the nth line start included in the range (from the end).\r\n     */\r\n    CursorMoveCommands._lastLineNumberInRange = function (model, range, count) {\r\n        var startLineNumber = range.startLineNumber;\r\n        if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\r\n            // Move on to the second line if the first line start is not included in the range\r\n            startLineNumber++;\r\n        }\r\n        return Math.max(startLineNumber, range.endLineNumber - count + 1);\r\n    };\r\n    CursorMoveCommands._moveLeft = function (context, cursors, inSelectionMode, noOfColumns) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var newViewState = MoveOperations.moveLeft(context.config, context.viewModel, cursor.viewState, inSelectionMode, noOfColumns);\r\n            if (noOfColumns === 1 && newViewState.position.lineNumber !== cursor.viewState.position.lineNumber) {\r\n                // moved over to the previous view line\r\n                var newViewModelPosition = context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(newViewState.position);\r\n                if (newViewModelPosition.lineNumber === cursor.modelState.position.lineNumber) {\r\n                    // stayed on the same model line => pass wrapping point where 2 view positions map to a single model position\r\n                    newViewState = MoveOperations.moveLeft(context.config, context.viewModel, newViewState, inSelectionMode, 1);\r\n                }\r\n            }\r\n            result[i] = CursorState.fromViewState(newViewState);\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveHalfLineLeft = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var viewLineNumber = cursor.viewState.position.lineNumber;\r\n            var halfLine = Math.round(context.viewModel.getLineContent(viewLineNumber).length / 2);\r\n            result[i] = CursorState.fromViewState(MoveOperations.moveLeft(context.config, context.viewModel, cursor.viewState, inSelectionMode, halfLine));\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveRight = function (context, cursors, inSelectionMode, noOfColumns) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var newViewState = MoveOperations.moveRight(context.config, context.viewModel, cursor.viewState, inSelectionMode, noOfColumns);\r\n            if (noOfColumns === 1 && newViewState.position.lineNumber !== cursor.viewState.position.lineNumber) {\r\n                // moved over to the next view line\r\n                var newViewModelPosition = context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(newViewState.position);\r\n                if (newViewModelPosition.lineNumber === cursor.modelState.position.lineNumber) {\r\n                    // stayed on the same model line => pass wrapping point where 2 view positions map to a single model position\r\n                    newViewState = MoveOperations.moveRight(context.config, context.viewModel, newViewState, inSelectionMode, 1);\r\n                }\r\n            }\r\n            result[i] = CursorState.fromViewState(newViewState);\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveHalfLineRight = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var viewLineNumber = cursor.viewState.position.lineNumber;\r\n            var halfLine = Math.round(context.viewModel.getLineContent(viewLineNumber).length / 2);\r\n            result[i] = CursorState.fromViewState(MoveOperations.moveRight(context.config, context.viewModel, cursor.viewState, inSelectionMode, halfLine));\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveDownByViewLines = function (context, cursors, inSelectionMode, linesCount) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[i] = CursorState.fromViewState(MoveOperations.moveDown(context.config, context.viewModel, cursor.viewState, inSelectionMode, linesCount));\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveDownByModelLines = function (context, cursors, inSelectionMode, linesCount) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[i] = CursorState.fromModelState(MoveOperations.moveDown(context.config, context.model, cursor.modelState, inSelectionMode, linesCount));\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveUpByViewLines = function (context, cursors, inSelectionMode, linesCount) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[i] = CursorState.fromViewState(MoveOperations.moveUp(context.config, context.viewModel, cursor.viewState, inSelectionMode, linesCount));\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveUpByModelLines = function (context, cursors, inSelectionMode, linesCount) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            result[i] = CursorState.fromModelState(MoveOperations.moveUp(context.config, context.model, cursor.modelState, inSelectionMode, linesCount));\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveToViewPosition = function (context, cursor, inSelectionMode, toViewLineNumber, toViewColumn) {\r\n        return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, toViewLineNumber, toViewColumn, 0));\r\n    };\r\n    CursorMoveCommands._moveToModelPosition = function (context, cursor, inSelectionMode, toModelLineNumber, toModelColumn) {\r\n        return CursorState.fromModelState(cursor.modelState.move(inSelectionMode, toModelLineNumber, toModelColumn, 0));\r\n    };\r\n    CursorMoveCommands._moveToViewMinColumn = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var viewLineNumber = cursor.viewState.position.lineNumber;\r\n            var viewColumn = context.viewModel.getLineMinColumn(viewLineNumber);\r\n            result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveToViewFirstNonWhitespaceColumn = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var viewLineNumber = cursor.viewState.position.lineNumber;\r\n            var viewColumn = context.viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\r\n            result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveToViewCenterColumn = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var viewLineNumber = cursor.viewState.position.lineNumber;\r\n            var viewColumn = Math.round((context.viewModel.getLineMaxColumn(viewLineNumber) + context.viewModel.getLineMinColumn(viewLineNumber)) / 2);\r\n            result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveToViewMaxColumn = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var viewLineNumber = cursor.viewState.position.lineNumber;\r\n            var viewColumn = context.viewModel.getLineMaxColumn(viewLineNumber);\r\n            result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\r\n        }\r\n        return result;\r\n    };\r\n    CursorMoveCommands._moveToViewLastNonWhitespaceColumn = function (context, cursors, inSelectionMode) {\r\n        var result = [];\r\n        for (var i = 0, len = cursors.length; i < len; i++) {\r\n            var cursor = cursors[i];\r\n            var viewLineNumber = cursor.viewState.position.lineNumber;\r\n            var viewColumn = context.viewModel.getLineLastNonWhitespaceColumn(viewLineNumber);\r\n            result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\r\n        }\r\n        return result;\r\n    };\r\n    return CursorMoveCommands;\r\n}());\r\nexport { CursorMoveCommands };\r\nexport var CursorMove;\r\n(function (CursorMove) {\r\n    var isCursorMoveArgs = function (arg) {\r\n        if (!types.isObject(arg)) {\r\n            return false;\r\n        }\r\n        var cursorMoveArg = arg;\r\n        if (!types.isString(cursorMoveArg.to)) {\r\n            return false;\r\n        }\r\n        if (!types.isUndefined(cursorMoveArg.select) && !types.isBoolean(cursorMoveArg.select)) {\r\n            return false;\r\n        }\r\n        if (!types.isUndefined(cursorMoveArg.by) && !types.isString(cursorMoveArg.by)) {\r\n            return false;\r\n        }\r\n        if (!types.isUndefined(cursorMoveArg.value) && !types.isNumber(cursorMoveArg.value)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    };\r\n    CursorMove.description = {\r\n        description: 'Move cursor to a logical position in the view',\r\n        args: [\r\n            {\r\n                name: 'Cursor move argument object',\r\n                description: \"Property-value pairs that can be passed through this argument:\\n\\t\\t\\t\\t\\t* 'to': A mandatory logical position value providing where to move the cursor.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'left', 'right', 'up', 'down'\\n\\t\\t\\t\\t\\t\\t'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter'\\n\\t\\t\\t\\t\\t\\t'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter'\\n\\t\\t\\t\\t\\t\\t'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'by': Unit to move. Default is computed based on 'to' value.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'line', 'wrappedLine', 'character', 'halfLine'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'value': Number of units to move. Default is '1'.\\n\\t\\t\\t\\t\\t* 'select': If 'true' makes the selection. Default is 'false'.\\n\\t\\t\\t\\t\",\r\n                constraint: isCursorMoveArgs,\r\n                schema: {\r\n                    'type': 'object',\r\n                    'required': ['to'],\r\n                    'properties': {\r\n                        'to': {\r\n                            'type': 'string',\r\n                            'enum': ['left', 'right', 'up', 'down', 'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter', 'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter', 'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside']\r\n                        },\r\n                        'by': {\r\n                            'type': 'string',\r\n                            'enum': ['line', 'wrappedLine', 'character', 'halfLine']\r\n                        },\r\n                        'value': {\r\n                            'type': 'number',\r\n                            'default': 1\r\n                        },\r\n                        'select': {\r\n                            'type': 'boolean',\r\n                            'default': false\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    };\r\n    /**\r\n     * Positions in the view for cursor move command.\r\n     */\r\n    CursorMove.RawDirection = {\r\n        Left: 'left',\r\n        Right: 'right',\r\n        Up: 'up',\r\n        Down: 'down',\r\n        WrappedLineStart: 'wrappedLineStart',\r\n        WrappedLineFirstNonWhitespaceCharacter: 'wrappedLineFirstNonWhitespaceCharacter',\r\n        WrappedLineColumnCenter: 'wrappedLineColumnCenter',\r\n        WrappedLineEnd: 'wrappedLineEnd',\r\n        WrappedLineLastNonWhitespaceCharacter: 'wrappedLineLastNonWhitespaceCharacter',\r\n        ViewPortTop: 'viewPortTop',\r\n        ViewPortCenter: 'viewPortCenter',\r\n        ViewPortBottom: 'viewPortBottom',\r\n        ViewPortIfOutside: 'viewPortIfOutside'\r\n    };\r\n    /**\r\n     * Units for Cursor move 'by' argument\r\n     */\r\n    CursorMove.RawUnit = {\r\n        Line: 'line',\r\n        WrappedLine: 'wrappedLine',\r\n        Character: 'character',\r\n        HalfLine: 'halfLine'\r\n    };\r\n    function parse(args) {\r\n        if (!args.to) {\r\n            // illegal arguments\r\n            return null;\r\n        }\r\n        var direction;\r\n        switch (args.to) {\r\n            case CursorMove.RawDirection.Left:\r\n                direction = 0 /* Left */;\r\n                break;\r\n            case CursorMove.RawDirection.Right:\r\n                direction = 1 /* Right */;\r\n                break;\r\n            case CursorMove.RawDirection.Up:\r\n                direction = 2 /* Up */;\r\n                break;\r\n            case CursorMove.RawDirection.Down:\r\n                direction = 3 /* Down */;\r\n                break;\r\n            case CursorMove.RawDirection.WrappedLineStart:\r\n                direction = 4 /* WrappedLineStart */;\r\n                break;\r\n            case CursorMove.RawDirection.WrappedLineFirstNonWhitespaceCharacter:\r\n                direction = 5 /* WrappedLineFirstNonWhitespaceCharacter */;\r\n                break;\r\n            case CursorMove.RawDirection.WrappedLineColumnCenter:\r\n                direction = 6 /* WrappedLineColumnCenter */;\r\n                break;\r\n            case CursorMove.RawDirection.WrappedLineEnd:\r\n                direction = 7 /* WrappedLineEnd */;\r\n                break;\r\n            case CursorMove.RawDirection.WrappedLineLastNonWhitespaceCharacter:\r\n                direction = 8 /* WrappedLineLastNonWhitespaceCharacter */;\r\n                break;\r\n            case CursorMove.RawDirection.ViewPortTop:\r\n                direction = 9 /* ViewPortTop */;\r\n                break;\r\n            case CursorMove.RawDirection.ViewPortBottom:\r\n                direction = 11 /* ViewPortBottom */;\r\n                break;\r\n            case CursorMove.RawDirection.ViewPortCenter:\r\n                direction = 10 /* ViewPortCenter */;\r\n                break;\r\n            case CursorMove.RawDirection.ViewPortIfOutside:\r\n                direction = 12 /* ViewPortIfOutside */;\r\n                break;\r\n            default:\r\n                // illegal arguments\r\n                return null;\r\n        }\r\n        var unit = 0 /* None */;\r\n        switch (args.by) {\r\n            case CursorMove.RawUnit.Line:\r\n                unit = 1 /* Line */;\r\n                break;\r\n            case CursorMove.RawUnit.WrappedLine:\r\n                unit = 2 /* WrappedLine */;\r\n                break;\r\n            case CursorMove.RawUnit.Character:\r\n                unit = 3 /* Character */;\r\n                break;\r\n            case CursorMove.RawUnit.HalfLine:\r\n                unit = 4 /* HalfLine */;\r\n                break;\r\n        }\r\n        return {\r\n            direction: direction,\r\n            unit: unit,\r\n            select: (!!args.select),\r\n            value: (args.value || 1)\r\n        };\r\n    }\r\n    CursorMove.parse = parse;\r\n})(CursorMove || (CursorMove = {}));\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { ReplaceCommand } from '../commands/replaceCommand.js';\r\nimport { CursorColumns, EditOperationResult, isQuote } from './cursorCommon.js';\r\nimport { MoveOperations } from './cursorMoveOperations.js';\r\nimport { Range } from '../core/range.js';\r\nvar DeleteOperations = /** @class */ (function () {\r\n    function DeleteOperations() {\r\n    }\r\n    DeleteOperations.deleteRight = function (prevEditOperationType, config, model, selections) {\r\n        var commands = [];\r\n        var shouldPushStackElementBefore = (prevEditOperationType !== 3 /* DeletingRight */);\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            var deleteSelection = selection;\r\n            if (deleteSelection.isEmpty()) {\r\n                var position = selection.getPosition();\r\n                var rightOfPosition = MoveOperations.right(config, model, position.lineNumber, position.column);\r\n                deleteSelection = new Range(rightOfPosition.lineNumber, rightOfPosition.column, position.lineNumber, position.column);\r\n            }\r\n            if (deleteSelection.isEmpty()) {\r\n                // Probably at end of file => ignore\r\n                commands[i] = null;\r\n                continue;\r\n            }\r\n            if (deleteSelection.startLineNumber !== deleteSelection.endLineNumber) {\r\n                shouldPushStackElementBefore = true;\r\n            }\r\n            commands[i] = new ReplaceCommand(deleteSelection, '');\r\n        }\r\n        return [shouldPushStackElementBefore, commands];\r\n    };\r\n    DeleteOperations._isAutoClosingPairDelete = function (config, model, selections) {\r\n        if (config.autoClosingBrackets === 'never' && config.autoClosingQuotes === 'never') {\r\n            return false;\r\n        }\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            var position = selection.getPosition();\r\n            if (!selection.isEmpty()) {\r\n                return false;\r\n            }\r\n            var lineText = model.getLineContent(position.lineNumber);\r\n            var character = lineText[position.column - 2];\r\n            var autoClosingPairCandidates = config.autoClosingPairsOpen2.get(character);\r\n            if (!autoClosingPairCandidates) {\r\n                return false;\r\n            }\r\n            if (isQuote(character)) {\r\n                if (config.autoClosingQuotes === 'never') {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                if (config.autoClosingBrackets === 'never') {\r\n                    return false;\r\n                }\r\n            }\r\n            var afterCharacter = lineText[position.column - 1];\r\n            var foundAutoClosingPair = false;\r\n            for (var _i = 0, autoClosingPairCandidates_1 = autoClosingPairCandidates; _i < autoClosingPairCandidates_1.length; _i++) {\r\n                var autoClosingPairCandidate = autoClosingPairCandidates_1[_i];\r\n                if (autoClosingPairCandidate.open === character && autoClosingPairCandidate.close === afterCharacter) {\r\n                    foundAutoClosingPair = true;\r\n                }\r\n            }\r\n            if (!foundAutoClosingPair) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    DeleteOperations._runAutoClosingPairDelete = function (config, model, selections) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var position = selections[i].getPosition();\r\n            var deleteSelection = new Range(position.lineNumber, position.column - 1, position.lineNumber, position.column + 1);\r\n            commands[i] = new ReplaceCommand(deleteSelection, '');\r\n        }\r\n        return [true, commands];\r\n    };\r\n    DeleteOperations.deleteLeft = function (prevEditOperationType, config, model, selections) {\r\n        if (this._isAutoClosingPairDelete(config, model, selections)) {\r\n            return this._runAutoClosingPairDelete(config, model, selections);\r\n        }\r\n        var commands = [];\r\n        var shouldPushStackElementBefore = (prevEditOperationType !== 2 /* DeletingLeft */);\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            var deleteSelection = selection;\r\n            if (deleteSelection.isEmpty()) {\r\n                var position = selection.getPosition();\r\n                if (config.useTabStops && position.column > 1) {\r\n                    var lineContent = model.getLineContent(position.lineNumber);\r\n                    var firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\r\n                    var lastIndentationColumn = (firstNonWhitespaceIndex === -1\r\n                        ? /* entire string is whitespace */ lineContent.length + 1\r\n                        : firstNonWhitespaceIndex + 1);\r\n                    if (position.column <= lastIndentationColumn) {\r\n                        var fromVisibleColumn = CursorColumns.visibleColumnFromColumn2(config, model, position);\r\n                        var toVisibleColumn = CursorColumns.prevIndentTabStop(fromVisibleColumn, config.indentSize);\r\n                        var toColumn = CursorColumns.columnFromVisibleColumn2(config, model, position.lineNumber, toVisibleColumn);\r\n                        deleteSelection = new Range(position.lineNumber, toColumn, position.lineNumber, position.column);\r\n                    }\r\n                    else {\r\n                        deleteSelection = new Range(position.lineNumber, position.column - 1, position.lineNumber, position.column);\r\n                    }\r\n                }\r\n                else {\r\n                    var leftOfPosition = MoveOperations.left(config, model, position.lineNumber, position.column);\r\n                    deleteSelection = new Range(leftOfPosition.lineNumber, leftOfPosition.column, position.lineNumber, position.column);\r\n                }\r\n            }\r\n            if (deleteSelection.isEmpty()) {\r\n                // Probably at beginning of file => ignore\r\n                commands[i] = null;\r\n                continue;\r\n            }\r\n            if (deleteSelection.startLineNumber !== deleteSelection.endLineNumber) {\r\n                shouldPushStackElementBefore = true;\r\n            }\r\n            commands[i] = new ReplaceCommand(deleteSelection, '');\r\n        }\r\n        return [shouldPushStackElementBefore, commands];\r\n    };\r\n    DeleteOperations.cut = function (config, model, selections) {\r\n        var commands = [];\r\n        for (var i = 0, len = selections.length; i < len; i++) {\r\n            var selection = selections[i];\r\n            if (selection.isEmpty()) {\r\n                if (config.emptySelectionClipboard) {\r\n                    // This is a full line cut\r\n                    var position = selection.getPosition();\r\n                    var startLineNumber = void 0, startColumn = void 0, endLineNumber = void 0, endColumn = void 0;\r\n                    if (position.lineNumber < model.getLineCount()) {\r\n                        // Cutting a line in the middle of the model\r\n                        startLineNumber = position.lineNumber;\r\n                        startColumn = 1;\r\n                        endLineNumber = position.lineNumber + 1;\r\n                        endColumn = 1;\r\n                    }\r\n                    else if (position.lineNumber > 1) {\r\n                        // Cutting the last line & there are more than 1 lines in the model\r\n                        startLineNumber = position.lineNumber - 1;\r\n                        startColumn = model.getLineMaxColumn(position.lineNumber - 1);\r\n                        endLineNumber = position.lineNumber;\r\n                        endColumn = model.getLineMaxColumn(position.lineNumber);\r\n                    }\r\n                    else {\r\n                        // Cutting the single line that the model contains\r\n                        startLineNumber = position.lineNumber;\r\n                        startColumn = 1;\r\n                        endLineNumber = position.lineNumber;\r\n                        endColumn = model.getLineMaxColumn(position.lineNumber);\r\n                    }\r\n                    var deleteSelection = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\r\n                    if (!deleteSelection.isEmpty()) {\r\n                        commands[i] = new ReplaceCommand(deleteSelection, '');\r\n                    }\r\n                    else {\r\n                        commands[i] = null;\r\n                    }\r\n                }\r\n                else {\r\n                    // Cannot cut empty selection\r\n                    commands[i] = null;\r\n                }\r\n            }\r\n            else {\r\n                commands[i] = new ReplaceCommand(selection, '');\r\n            }\r\n        }\r\n        return new EditOperationResult(0 /* Other */, commands, {\r\n            shouldPushStackElementBefore: true,\r\n            shouldPushStackElementAfter: true\r\n        });\r\n    };\r\n    return DeleteOperations;\r\n}());\r\nexport { DeleteOperations };\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Range } from './range.js';\r\nvar EditOperation = /** @class */ (function () {\r\n    function EditOperation() {\r\n    }\r\n    EditOperation.insert = function (position, text) {\r\n        return {\r\n            range: new Range(position.lineNumber, position.column, position.lineNumber, position.column),\r\n            text: text,\r\n            forceMoveMarkers: true\r\n        };\r\n    };\r\n    EditOperation.delete = function (range) {\r\n        return {\r\n            range: range,\r\n            text: null\r\n        };\r\n    };\r\n    EditOperation.replace = function (range, text) {\r\n        return {\r\n            range: range,\r\n            text: text\r\n        };\r\n    };\r\n    EditOperation.replaceMove = function (range, text) {\r\n        return {\r\n            range: range,\r\n            text: text,\r\n            forceMoveMarkers: true\r\n        };\r\n    };\r\n    return EditOperation;\r\n}());\r\nexport { EditOperation };\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { SingleCursorState } from './cursorCommon.js';\r\nimport { getMapForWordSeparators } from './wordCharacterClassifier.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nvar WordOperations = /** @class */ (function () {\r\n    function WordOperations() {\r\n    }\r\n    WordOperations._createWord = function (lineContent, wordType, nextCharClass, start, end) {\r\n        // console.log('WORD ==> ' + start + ' => ' + end + ':::: <<<' + lineContent.substring(start, end) + '>>>');\r\n        return { start: start, end: end, wordType: wordType, nextCharClass: nextCharClass };\r\n    };\r\n    WordOperations._findPreviousWordOnLine = function (wordSeparators, model, position) {\r\n        var lineContent = model.getLineContent(position.lineNumber);\r\n        return this._doFindPreviousWordOnLine(lineContent, wordSeparators, position);\r\n    };\r\n    WordOperations._doFindPreviousWordOnLine = function (lineContent, wordSeparators, position) {\r\n        var wordType = 0 /* None */;\r\n        for (var chIndex = position.column - 2; chIndex >= 0; chIndex--) {\r\n            var chCode = lineContent.charCodeAt(chIndex);\r\n            var chClass = wordSeparators.get(chCode);\r\n            if (chClass === 0 /* Regular */) {\r\n                if (wordType === 2 /* Separator */) {\r\n                    return this._createWord(lineContent, wordType, chClass, chIndex + 1, this._findEndOfWord(lineContent, wordSeparators, wordType, chIndex + 1));\r\n                }\r\n                wordType = 1 /* Regular */;\r\n            }\r\n            else if (chClass === 2 /* WordSeparator */) {\r\n                if (wordType === 1 /* Regular */) {\r\n                    return this._createWord(lineContent, wordType, chClass, chIndex + 1, this._findEndOfWord(lineContent, wordSeparators, wordType, chIndex + 1));\r\n                }\r\n                wordType = 2 /* Separator */;\r\n            }\r\n            else if (chClass === 1 /* Whitespace */) {\r\n                if (wordType !== 0 /* None */) {\r\n                    return this._createWord(lineContent, wordType, chClass, chIndex + 1, this._findEndOfWord(lineContent, wordSeparators, wordType, chIndex + 1));\r\n                }\r\n            }\r\n        }\r\n        if (wordType !== 0 /* None */) {\r\n            return this._createWord(lineContent, wordType, 1 /* Whitespace */, 0, this._findEndOfWord(lineContent, wordSeparators, wordType, 0));\r\n        }\r\n        return null;\r\n    };\r\n    WordOperations._findEndOfWord = function (lineContent, wordSeparators, wordType, startIndex) {\r\n        var len = lineContent.length;\r\n        for (var chIndex = startIndex; chIndex < len; chIndex++) {\r\n            var chCode = lineContent.charCodeAt(chIndex);\r\n            var chClass = wordSeparators.get(chCode);\r\n            if (chClass === 1 /* Whitespace */) {\r\n                return chIndex;\r\n            }\r\n            if (wordType === 1 /* Regular */ && chClass === 2 /* WordSeparator */) {\r\n                return chIndex;\r\n            }\r\n            if (wordType === 2 /* Separator */ && chClass === 0 /* Regular */) {\r\n                return chIndex;\r\n            }\r\n        }\r\n        return len;\r\n    };\r\n    WordOperations._findNextWordOnLine = function (wordSeparators, model, position) {\r\n        var lineContent = model.getLineContent(position.lineNumber);\r\n        return this._doFindNextWordOnLine(lineContent, wordSeparators, position);\r\n    };\r\n    WordOperations._doFindNextWordOnLine = function (lineContent, wordSeparators, position) {\r\n        var wordType = 0 /* None */;\r\n        var len = lineContent.length;\r\n        for (var chIndex = position.column - 1; chIndex < len; chIndex++) {\r\n            var chCode = lineContent.charCodeAt(chIndex);\r\n            var chClass = wordSeparators.get(chCode);\r\n            if (chClass === 0 /* Regular */) {\r\n                if (wordType === 2 /* Separator */) {\r\n                    return this._createWord(lineContent, wordType, chClass, this._findStartOfWord(lineContent, wordSeparators, wordType, chIndex - 1), chIndex);\r\n                }\r\n                wordType = 1 /* Regular */;\r\n            }\r\n            else if (chClass === 2 /* WordSeparator */) {\r\n                if (wordType === 1 /* Regular */) {\r\n                    return this._createWord(lineContent, wordType, chClass, this._findStartOfWord(lineContent, wordSeparators, wordType, chIndex - 1), chIndex);\r\n                }\r\n                wordType = 2 /* Separator */;\r\n            }\r\n            else if (chClass === 1 /* Whitespace */) {\r\n                if (wordType !== 0 /* None */) {\r\n                    return this._createWord(lineContent, wordType, chClass, this._findStartOfWord(lineContent, wordSeparators, wordType, chIndex - 1), chIndex);\r\n                }\r\n            }\r\n        }\r\n        if (wordType !== 0 /* None */) {\r\n            return this._createWord(lineContent, wordType, 1 /* Whitespace */, this._findStartOfWord(lineContent, wordSeparators, wordType, len - 1), len);\r\n        }\r\n        return null;\r\n    };\r\n    WordOperations._findStartOfWord = function (lineContent, wordSeparators, wordType, startIndex) {\r\n        for (var chIndex = startIndex; chIndex >= 0; chIndex--) {\r\n            var chCode = lineContent.charCodeAt(chIndex);\r\n            var chClass = wordSeparators.get(chCode);\r\n            if (chClass === 1 /* Whitespace */) {\r\n                return chIndex + 1;\r\n            }\r\n            if (wordType === 1 /* Regular */ && chClass === 2 /* WordSeparator */) {\r\n                return chIndex + 1;\r\n            }\r\n            if (wordType === 2 /* Separator */ && chClass === 0 /* Regular */) {\r\n                return chIndex + 1;\r\n            }\r\n        }\r\n        return 0;\r\n    };\r\n    WordOperations.moveWordLeft = function (wordSeparators, model, position, wordNavigationType) {\r\n        var lineNumber = position.lineNumber;\r\n        var column = position.column;\r\n        var movedToPreviousLine = false;\r\n        if (column === 1) {\r\n            if (lineNumber > 1) {\r\n                movedToPreviousLine = true;\r\n                lineNumber = lineNumber - 1;\r\n                column = model.getLineMaxColumn(lineNumber);\r\n            }\r\n        }\r\n        var prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, column));\r\n        if (wordNavigationType === 0 /* WordStart */) {\r\n            if (prevWordOnLine && !movedToPreviousLine) {\r\n                // Special case for Visual Studio compatibility:\r\n                // when starting in the trim whitespace at the end of a line,\r\n                // go to the end of the last word\r\n                var lastWhitespaceColumn = model.getLineLastNonWhitespaceColumn(lineNumber);\r\n                if (lastWhitespaceColumn < column) {\r\n                    return new Position(lineNumber, prevWordOnLine.end + 1);\r\n                }\r\n            }\r\n            return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.start + 1 : 1);\r\n        }\r\n        if (wordNavigationType === 1 /* WordStartFast */) {\r\n            if (prevWordOnLine\r\n                && prevWordOnLine.wordType === 2 /* Separator */\r\n                && prevWordOnLine.end - prevWordOnLine.start === 1\r\n                && prevWordOnLine.nextCharClass === 0 /* Regular */) {\r\n                // Skip over a word made up of one single separator and followed by a regular character\r\n                prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\r\n            }\r\n            return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.start + 1 : 1);\r\n        }\r\n        if (wordNavigationType === 3 /* WordAccessibility */) {\r\n            while (prevWordOnLine\r\n                && prevWordOnLine.wordType === 2 /* Separator */) {\r\n                // Skip over words made up of only separators\r\n                prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\r\n            }\r\n            return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.start + 1 : 1);\r\n        }\r\n        // We are stopping at the ending of words\r\n        if (prevWordOnLine && column <= prevWordOnLine.end + 1) {\r\n            prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\r\n        }\r\n        return new Position(lineNumber, prevWordOnLine ? prevWordOnLine.end + 1 : 1);\r\n    };\r\n    WordOperations._moveWordPartLeft = function (model, position) {\r\n        var lineNumber = position.lineNumber;\r\n        var maxColumn = model.getLineMaxColumn(lineNumber);\r\n        if (position.column === 1) {\r\n            return (lineNumber > 1 ? new Position(lineNumber - 1, model.getLineMaxColumn(lineNumber - 1)) : position);\r\n        }\r\n        var lineContent = model.getLineContent(lineNumber);\r\n        for (var column = position.column - 1; column > 1; column--) {\r\n            var left = lineContent.charCodeAt(column - 2);\r\n            var right = lineContent.charCodeAt(column - 1);\r\n            if (left !== 95 /* Underline */ && right === 95 /* Underline */) {\r\n                // snake_case_variables\r\n                return new Position(lineNumber, column);\r\n            }\r\n            if (strings.isLowerAsciiLetter(left) && strings.isUpperAsciiLetter(right)) {\r\n                // camelCaseVariables\r\n                return new Position(lineNumber, column);\r\n            }\r\n            if (strings.isUpperAsciiLetter(left) && strings.isUpperAsciiLetter(right)) {\r\n                // thisIsACamelCaseWithOneLetterWords\r\n                if (column + 1 < maxColumn) {\r\n                    var rightRight = lineContent.charCodeAt(column);\r\n                    if (strings.isLowerAsciiLetter(rightRight)) {\r\n                        return new Position(lineNumber, column);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return new Position(lineNumber, 1);\r\n    };\r\n    WordOperations.moveWordRight = function (wordSeparators, model, position, wordNavigationType) {\r\n        var lineNumber = position.lineNumber;\r\n        var column = position.column;\r\n        var movedDown = false;\r\n        if (column === model.getLineMaxColumn(lineNumber)) {\r\n            if (lineNumber < model.getLineCount()) {\r\n                movedDown = true;\r\n                lineNumber = lineNumber + 1;\r\n                column = 1;\r\n            }\r\n        }\r\n        var nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, column));\r\n        if (wordNavigationType === 2 /* WordEnd */) {\r\n            if (nextWordOnLine && nextWordOnLine.wordType === 2 /* Separator */) {\r\n                if (nextWordOnLine.end - nextWordOnLine.start === 1 && nextWordOnLine.nextCharClass === 0 /* Regular */) {\r\n                    // Skip over a word made up of one single separator and followed by a regular character\r\n                    nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\r\n                }\r\n            }\r\n            if (nextWordOnLine) {\r\n                column = nextWordOnLine.end + 1;\r\n            }\r\n            else {\r\n                column = model.getLineMaxColumn(lineNumber);\r\n            }\r\n        }\r\n        else if (wordNavigationType === 3 /* WordAccessibility */) {\r\n            if (movedDown) {\r\n                // If we move to the next line, pretend that the cursor is right before the first character.\r\n                // This is needed when the first word starts right at the first character - and in order not to miss it,\r\n                // we need to start before.\r\n                column = 0;\r\n            }\r\n            while (nextWordOnLine\r\n                && (nextWordOnLine.wordType === 2 /* Separator */\r\n                    || nextWordOnLine.start + 1 <= column)) {\r\n                // Skip over a word made up of one single separator\r\n                // Also skip over word if it begins before current cursor position to ascertain we're moving forward at least 1 character.\r\n                nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\r\n            }\r\n            if (nextWordOnLine) {\r\n                column = nextWordOnLine.start + 1;\r\n            }\r\n            else {\r\n                column = model.getLineMaxColumn(lineNumber);\r\n            }\r\n        }\r\n        else {\r\n            if (nextWordOnLine && !movedDown && column >= nextWordOnLine.start + 1) {\r\n                nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\r\n            }\r\n            if (nextWordOnLine) {\r\n                column = nextWordOnLine.start + 1;\r\n            }\r\n            else {\r\n                column = model.getLineMaxColumn(lineNumber);\r\n            }\r\n        }\r\n        return new Position(lineNumber, column);\r\n    };\r\n    WordOperations._moveWordPartRight = function (model, position) {\r\n        var lineNumber = position.lineNumber;\r\n        var maxColumn = model.getLineMaxColumn(lineNumber);\r\n        if (position.column === maxColumn) {\r\n            return (lineNumber < model.getLineCount() ? new Position(lineNumber + 1, 1) : position);\r\n        }\r\n        var lineContent = model.getLineContent(lineNumber);\r\n        for (var column = position.column + 1; column < maxColumn; column++) {\r\n            var left = lineContent.charCodeAt(column - 2);\r\n            var right = lineContent.charCodeAt(column - 1);\r\n            if (left === 95 /* Underline */ && right !== 95 /* Underline */) {\r\n                // snake_case_variables\r\n                return new Position(lineNumber, column);\r\n            }\r\n            if (strings.isLowerAsciiLetter(left) && strings.isUpperAsciiLetter(right)) {\r\n                // camelCaseVariables\r\n                return new Position(lineNumber, column);\r\n            }\r\n            if (strings.isUpperAsciiLetter(left) && strings.isUpperAsciiLetter(right)) {\r\n                // thisIsACamelCaseWithOneLetterWords\r\n                if (column + 1 < maxColumn) {\r\n                    var rightRight = lineContent.charCodeAt(column);\r\n                    if (strings.isLowerAsciiLetter(rightRight)) {\r\n                        return new Position(lineNumber, column);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return new Position(lineNumber, maxColumn);\r\n    };\r\n    WordOperations._deleteWordLeftWhitespace = function (model, position) {\r\n        var lineContent = model.getLineContent(position.lineNumber);\r\n        var startIndex = position.column - 2;\r\n        var lastNonWhitespace = strings.lastNonWhitespaceIndex(lineContent, startIndex);\r\n        if (lastNonWhitespace + 1 < startIndex) {\r\n            return new Range(position.lineNumber, lastNonWhitespace + 2, position.lineNumber, position.column);\r\n        }\r\n        return null;\r\n    };\r\n    WordOperations.deleteWordLeft = function (wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType) {\r\n        if (!selection.isEmpty()) {\r\n            return selection;\r\n        }\r\n        var position = new Position(selection.positionLineNumber, selection.positionColumn);\r\n        var lineNumber = position.lineNumber;\r\n        var column = position.column;\r\n        if (lineNumber === 1 && column === 1) {\r\n            // Ignore deleting at beginning of file\r\n            return null;\r\n        }\r\n        if (whitespaceHeuristics) {\r\n            var r = this._deleteWordLeftWhitespace(model, position);\r\n            if (r) {\r\n                return r;\r\n            }\r\n        }\r\n        var prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, position);\r\n        if (wordNavigationType === 0 /* WordStart */) {\r\n            if (prevWordOnLine) {\r\n                column = prevWordOnLine.start + 1;\r\n            }\r\n            else {\r\n                if (column > 1) {\r\n                    column = 1;\r\n                }\r\n                else {\r\n                    lineNumber--;\r\n                    column = model.getLineMaxColumn(lineNumber);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (prevWordOnLine && column <= prevWordOnLine.end + 1) {\r\n                prevWordOnLine = WordOperations._findPreviousWordOnLine(wordSeparators, model, new Position(lineNumber, prevWordOnLine.start + 1));\r\n            }\r\n            if (prevWordOnLine) {\r\n                column = prevWordOnLine.end + 1;\r\n            }\r\n            else {\r\n                if (column > 1) {\r\n                    column = 1;\r\n                }\r\n                else {\r\n                    lineNumber--;\r\n                    column = model.getLineMaxColumn(lineNumber);\r\n                }\r\n            }\r\n        }\r\n        return new Range(lineNumber, column, position.lineNumber, position.column);\r\n    };\r\n    WordOperations._deleteWordPartLeft = function (model, selection) {\r\n        if (!selection.isEmpty()) {\r\n            return selection;\r\n        }\r\n        var pos = selection.getPosition();\r\n        var toPosition = WordOperations._moveWordPartLeft(model, pos);\r\n        return new Range(pos.lineNumber, pos.column, toPosition.lineNumber, toPosition.column);\r\n    };\r\n    WordOperations._findFirstNonWhitespaceChar = function (str, startIndex) {\r\n        var len = str.length;\r\n        for (var chIndex = startIndex; chIndex < len; chIndex++) {\r\n            var ch = str.charAt(chIndex);\r\n            if (ch !== ' ' && ch !== '\\t') {\r\n                return chIndex;\r\n            }\r\n        }\r\n        return len;\r\n    };\r\n    WordOperations._deleteWordRightWhitespace = function (model, position) {\r\n        var lineContent = model.getLineContent(position.lineNumber);\r\n        var startIndex = position.column - 1;\r\n        var firstNonWhitespace = this._findFirstNonWhitespaceChar(lineContent, startIndex);\r\n        if (startIndex + 1 < firstNonWhitespace) {\r\n            // bingo\r\n            return new Range(position.lineNumber, position.column, position.lineNumber, firstNonWhitespace + 1);\r\n        }\r\n        return null;\r\n    };\r\n    WordOperations.deleteWordRight = function (wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType) {\r\n        if (!selection.isEmpty()) {\r\n            return selection;\r\n        }\r\n        var position = new Position(selection.positionLineNumber, selection.positionColumn);\r\n        var lineNumber = position.lineNumber;\r\n        var column = position.column;\r\n        var lineCount = model.getLineCount();\r\n        var maxColumn = model.getLineMaxColumn(lineNumber);\r\n        if (lineNumber === lineCount && column === maxColumn) {\r\n            // Ignore deleting at end of file\r\n            return null;\r\n        }\r\n        if (whitespaceHeuristics) {\r\n            var r = this._deleteWordRightWhitespace(model, position);\r\n            if (r) {\r\n                return r;\r\n            }\r\n        }\r\n        var nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, position);\r\n        if (wordNavigationType === 2 /* WordEnd */) {\r\n            if (nextWordOnLine) {\r\n                column = nextWordOnLine.end + 1;\r\n            }\r\n            else {\r\n                if (column < maxColumn || lineNumber === lineCount) {\r\n                    column = maxColumn;\r\n                }\r\n                else {\r\n                    lineNumber++;\r\n                    nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, 1));\r\n                    if (nextWordOnLine) {\r\n                        column = nextWordOnLine.start + 1;\r\n                    }\r\n                    else {\r\n                        column = model.getLineMaxColumn(lineNumber);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (nextWordOnLine && column >= nextWordOnLine.start + 1) {\r\n                nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, nextWordOnLine.end + 1));\r\n            }\r\n            if (nextWordOnLine) {\r\n                column = nextWordOnLine.start + 1;\r\n            }\r\n            else {\r\n                if (column < maxColumn || lineNumber === lineCount) {\r\n                    column = maxColumn;\r\n                }\r\n                else {\r\n                    lineNumber++;\r\n                    nextWordOnLine = WordOperations._findNextWordOnLine(wordSeparators, model, new Position(lineNumber, 1));\r\n                    if (nextWordOnLine) {\r\n                        column = nextWordOnLine.start + 1;\r\n                    }\r\n                    else {\r\n                        column = model.getLineMaxColumn(lineNumber);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return new Range(lineNumber, column, position.lineNumber, position.column);\r\n    };\r\n    WordOperations._deleteWordPartRight = function (model, selection) {\r\n        if (!selection.isEmpty()) {\r\n            return selection;\r\n        }\r\n        var pos = selection.getPosition();\r\n        var toPosition = WordOperations._moveWordPartRight(model, pos);\r\n        return new Range(pos.lineNumber, pos.column, toPosition.lineNumber, toPosition.column);\r\n    };\r\n    WordOperations.word = function (config, model, cursor, inSelectionMode, position) {\r\n        var wordSeparators = getMapForWordSeparators(config.wordSeparators);\r\n        var prevWord = WordOperations._findPreviousWordOnLine(wordSeparators, model, position);\r\n        var nextWord = WordOperations._findNextWordOnLine(wordSeparators, model, position);\r\n        if (!inSelectionMode) {\r\n            // Entering word selection for the first time\r\n            var startColumn_1;\r\n            var endColumn_1;\r\n            if (prevWord && prevWord.wordType === 1 /* Regular */ && prevWord.start <= position.column - 1 && position.column - 1 <= prevWord.end) {\r\n                // isTouchingPrevWord\r\n                startColumn_1 = prevWord.start + 1;\r\n                endColumn_1 = prevWord.end + 1;\r\n            }\r\n            else if (nextWord && nextWord.wordType === 1 /* Regular */ && nextWord.start <= position.column - 1 && position.column - 1 <= nextWord.end) {\r\n                // isTouchingNextWord\r\n                startColumn_1 = nextWord.start + 1;\r\n                endColumn_1 = nextWord.end + 1;\r\n            }\r\n            else {\r\n                if (prevWord) {\r\n                    startColumn_1 = prevWord.end + 1;\r\n                }\r\n                else {\r\n                    startColumn_1 = 1;\r\n                }\r\n                if (nextWord) {\r\n                    endColumn_1 = nextWord.start + 1;\r\n                }\r\n                else {\r\n                    endColumn_1 = model.getLineMaxColumn(position.lineNumber);\r\n                }\r\n            }\r\n            return new SingleCursorState(new Range(position.lineNumber, startColumn_1, position.lineNumber, endColumn_1), 0, new Position(position.lineNumber, endColumn_1), 0);\r\n        }\r\n        var startColumn;\r\n        var endColumn;\r\n        if (prevWord && prevWord.wordType === 1 /* Regular */ && prevWord.start < position.column - 1 && position.column - 1 < prevWord.end) {\r\n            // isInsidePrevWord\r\n            startColumn = prevWord.start + 1;\r\n            endColumn = prevWord.end + 1;\r\n        }\r\n        else if (nextWord && nextWord.wordType === 1 /* Regular */ && nextWord.start < position.column - 1 && position.column - 1 < nextWord.end) {\r\n            // isInsideNextWord\r\n            startColumn = nextWord.start + 1;\r\n            endColumn = nextWord.end + 1;\r\n        }\r\n        else {\r\n            startColumn = position.column;\r\n            endColumn = position.column;\r\n        }\r\n        var lineNumber = position.lineNumber;\r\n        var column;\r\n        if (cursor.selectionStart.containsPosition(position)) {\r\n            column = cursor.selectionStart.endColumn;\r\n        }\r\n        else if (position.isBeforeOrEqual(cursor.selectionStart.getStartPosition())) {\r\n            column = startColumn;\r\n            var possiblePosition = new Position(lineNumber, column);\r\n            if (cursor.selectionStart.containsPosition(possiblePosition)) {\r\n                column = cursor.selectionStart.endColumn;\r\n            }\r\n        }\r\n        else {\r\n            column = endColumn;\r\n            var possiblePosition = new Position(lineNumber, column);\r\n            if (cursor.selectionStart.containsPosition(possiblePosition)) {\r\n                column = cursor.selectionStart.startColumn;\r\n            }\r\n        }\r\n        return cursor.move(true, lineNumber, column, 0);\r\n    };\r\n    return WordOperations;\r\n}());\r\nexport { WordOperations };\r\nvar WordPartOperations = /** @class */ (function (_super) {\r\n    __extends(WordPartOperations, _super);\r\n    function WordPartOperations() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    WordPartOperations.deleteWordPartLeft = function (wordSeparators, model, selection, whitespaceHeuristics) {\r\n        var candidates = enforceDefined([\r\n            WordOperations.deleteWordLeft(wordSeparators, model, selection, whitespaceHeuristics, 0 /* WordStart */),\r\n            WordOperations.deleteWordLeft(wordSeparators, model, selection, whitespaceHeuristics, 2 /* WordEnd */),\r\n            WordOperations._deleteWordPartLeft(model, selection)\r\n        ]);\r\n        candidates.sort(Range.compareRangesUsingEnds);\r\n        return candidates[2];\r\n    };\r\n    WordPartOperations.deleteWordPartRight = function (wordSeparators, model, selection, whitespaceHeuristics) {\r\n        var candidates = enforceDefined([\r\n            WordOperations.deleteWordRight(wordSeparators, model, selection, whitespaceHeuristics, 0 /* WordStart */),\r\n            WordOperations.deleteWordRight(wordSeparators, model, selection, whitespaceHeuristics, 2 /* WordEnd */),\r\n            WordOperations._deleteWordPartRight(model, selection)\r\n        ]);\r\n        candidates.sort(Range.compareRangesUsingStarts);\r\n        return candidates[0];\r\n    };\r\n    WordPartOperations.moveWordPartLeft = function (wordSeparators, model, position) {\r\n        var candidates = enforceDefined([\r\n            WordOperations.moveWordLeft(wordSeparators, model, position, 0 /* WordStart */),\r\n            WordOperations.moveWordLeft(wordSeparators, model, position, 2 /* WordEnd */),\r\n            WordOperations._moveWordPartLeft(model, position)\r\n        ]);\r\n        candidates.sort(Position.compare);\r\n        return candidates[2];\r\n    };\r\n    WordPartOperations.moveWordPartRight = function (wordSeparators, model, position) {\r\n        var candidates = enforceDefined([\r\n            WordOperations.moveWordRight(wordSeparators, model, position, 0 /* WordStart */),\r\n            WordOperations.moveWordRight(wordSeparators, model, position, 2 /* WordEnd */),\r\n            WordOperations._moveWordPartRight(model, position)\r\n        ]);\r\n        candidates.sort(Position.compare);\r\n        return candidates[0];\r\n    };\r\n    return WordPartOperations;\r\n}(WordOperations));\r\nexport { WordPartOperations };\r\nfunction enforceDefined(arr) {\r\n    return arr.filter(function (el) { return Boolean(el); });\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { TokenMetadata } from '../modes.js';\r\nvar LineTokens = /** @class */ (function () {\r\n    function LineTokens(tokens, text) {\r\n        this._tokens = tokens;\r\n        this._tokensCount = (this._tokens.length >>> 1);\r\n        this._text = text;\r\n    }\r\n    LineTokens.prototype.equals = function (other) {\r\n        if (other instanceof LineTokens) {\r\n            return this.slicedEquals(other, 0, this._tokensCount);\r\n        }\r\n        return false;\r\n    };\r\n    LineTokens.prototype.slicedEquals = function (other, sliceFromTokenIndex, sliceTokenCount) {\r\n        if (this._text !== other._text) {\r\n            return false;\r\n        }\r\n        if (this._tokensCount !== other._tokensCount) {\r\n            return false;\r\n        }\r\n        var from = (sliceFromTokenIndex << 1);\r\n        var to = from + (sliceTokenCount << 1);\r\n        for (var i = from; i < to; i++) {\r\n            if (this._tokens[i] !== other._tokens[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    LineTokens.prototype.getLineContent = function () {\r\n        return this._text;\r\n    };\r\n    LineTokens.prototype.getCount = function () {\r\n        return this._tokensCount;\r\n    };\r\n    LineTokens.prototype.getStartOffset = function (tokenIndex) {\r\n        if (tokenIndex > 0) {\r\n            return this._tokens[(tokenIndex - 1) << 1];\r\n        }\r\n        return 0;\r\n    };\r\n    LineTokens.prototype.getMetadata = function (tokenIndex) {\r\n        var metadata = this._tokens[(tokenIndex << 1) + 1];\r\n        return metadata;\r\n    };\r\n    LineTokens.prototype.getLanguageId = function (tokenIndex) {\r\n        var metadata = this._tokens[(tokenIndex << 1) + 1];\r\n        return TokenMetadata.getLanguageId(metadata);\r\n    };\r\n    LineTokens.prototype.getStandardTokenType = function (tokenIndex) {\r\n        var metadata = this._tokens[(tokenIndex << 1) + 1];\r\n        return TokenMetadata.getTokenType(metadata);\r\n    };\r\n    LineTokens.prototype.getForeground = function (tokenIndex) {\r\n        var metadata = this._tokens[(tokenIndex << 1) + 1];\r\n        return TokenMetadata.getForeground(metadata);\r\n    };\r\n    LineTokens.prototype.getClassName = function (tokenIndex) {\r\n        var metadata = this._tokens[(tokenIndex << 1) + 1];\r\n        return TokenMetadata.getClassNameFromMetadata(metadata);\r\n    };\r\n    LineTokens.prototype.getInlineStyle = function (tokenIndex, colorMap) {\r\n        var metadata = this._tokens[(tokenIndex << 1) + 1];\r\n        return TokenMetadata.getInlineStyleFromMetadata(metadata, colorMap);\r\n    };\r\n    LineTokens.prototype.getEndOffset = function (tokenIndex) {\r\n        return this._tokens[tokenIndex << 1];\r\n    };\r\n    /**\r\n     * Find the token containing offset `offset`.\r\n     * @param offset The search offset\r\n     * @return The index of the token containing the offset.\r\n     */\r\n    LineTokens.prototype.findTokenIndexAtOffset = function (offset) {\r\n        return LineTokens.findIndexInTokensArray(this._tokens, offset);\r\n    };\r\n    LineTokens.prototype.inflate = function () {\r\n        return this;\r\n    };\r\n    LineTokens.prototype.sliceAndInflate = function (startOffset, endOffset, deltaOffset) {\r\n        return new SlicedLineTokens(this, startOffset, endOffset, deltaOffset);\r\n    };\r\n    LineTokens.convertToEndOffset = function (tokens, lineTextLength) {\r\n        var tokenCount = (tokens.length >>> 1);\r\n        var lastTokenIndex = tokenCount - 1;\r\n        for (var tokenIndex = 0; tokenIndex < lastTokenIndex; tokenIndex++) {\r\n            tokens[tokenIndex << 1] = tokens[(tokenIndex + 1) << 1];\r\n        }\r\n        tokens[lastTokenIndex << 1] = lineTextLength;\r\n    };\r\n    LineTokens.findIndexInTokensArray = function (tokens, desiredIndex) {\r\n        if (tokens.length <= 2) {\r\n            return 0;\r\n        }\r\n        var low = 0;\r\n        var high = (tokens.length >>> 1) - 1;\r\n        while (low < high) {\r\n            var mid = low + Math.floor((high - low) / 2);\r\n            var endOffset = tokens[(mid << 1)];\r\n            if (endOffset === desiredIndex) {\r\n                return mid + 1;\r\n            }\r\n            else if (endOffset < desiredIndex) {\r\n                low = mid + 1;\r\n            }\r\n            else if (endOffset > desiredIndex) {\r\n                high = mid;\r\n            }\r\n        }\r\n        return low;\r\n    };\r\n    return LineTokens;\r\n}());\r\nexport { LineTokens };\r\nvar SlicedLineTokens = /** @class */ (function () {\r\n    function SlicedLineTokens(source, startOffset, endOffset, deltaOffset) {\r\n        this._source = source;\r\n        this._startOffset = startOffset;\r\n        this._endOffset = endOffset;\r\n        this._deltaOffset = deltaOffset;\r\n        this._firstTokenIndex = source.findTokenIndexAtOffset(startOffset);\r\n        this._tokensCount = 0;\r\n        for (var i = this._firstTokenIndex, len = source.getCount(); i < len; i++) {\r\n            var tokenStartOffset = source.getStartOffset(i);\r\n            if (tokenStartOffset >= endOffset) {\r\n                break;\r\n            }\r\n            this._tokensCount++;\r\n        }\r\n    }\r\n    SlicedLineTokens.prototype.equals = function (other) {\r\n        if (other instanceof SlicedLineTokens) {\r\n            return (this._startOffset === other._startOffset\r\n                && this._endOffset === other._endOffset\r\n                && this._deltaOffset === other._deltaOffset\r\n                && this._source.slicedEquals(other._source, this._firstTokenIndex, this._tokensCount));\r\n        }\r\n        return false;\r\n    };\r\n    SlicedLineTokens.prototype.getCount = function () {\r\n        return this._tokensCount;\r\n    };\r\n    SlicedLineTokens.prototype.getForeground = function (tokenIndex) {\r\n        return this._source.getForeground(this._firstTokenIndex + tokenIndex);\r\n    };\r\n    SlicedLineTokens.prototype.getEndOffset = function (tokenIndex) {\r\n        var tokenEndOffset = this._source.getEndOffset(this._firstTokenIndex + tokenIndex);\r\n        return Math.min(this._endOffset, tokenEndOffset) - this._startOffset + this._deltaOffset;\r\n    };\r\n    SlicedLineTokens.prototype.getClassName = function (tokenIndex) {\r\n        return this._source.getClassName(this._firstTokenIndex + tokenIndex);\r\n    };\r\n    SlicedLineTokens.prototype.getInlineStyle = function (tokenIndex, colorMap) {\r\n        return this._source.getInlineStyle(this._firstTokenIndex + tokenIndex, colorMap);\r\n    };\r\n    SlicedLineTokens.prototype.findTokenIndexAtOffset = function (offset) {\r\n        return this._source.findTokenIndexAtOffset(offset + this._startOffset - this._deltaOffset) - this._firstTokenIndex;\r\n    };\r\n    return SlicedLineTokens;\r\n}());\r\nexport { SlicedLineTokens };\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { CharacterClassifier } from '../core/characterClassifier.js';\r\nvar WordCharacterClassifier = /** @class */ (function (_super) {\r\n    __extends(WordCharacterClassifier, _super);\r\n    function WordCharacterClassifier(wordSeparators) {\r\n        var _this = _super.call(this, 0 /* Regular */) || this;\r\n        for (var i = 0, len = wordSeparators.length; i < len; i++) {\r\n            _this.set(wordSeparators.charCodeAt(i), 2 /* WordSeparator */);\r\n        }\r\n        _this.set(32 /* Space */, 1 /* Whitespace */);\r\n        _this.set(9 /* Tab */, 1 /* Whitespace */);\r\n        return _this;\r\n    }\r\n    return WordCharacterClassifier;\r\n}(CharacterClassifier));\r\nexport { WordCharacterClassifier };\r\nfunction once(computeFn) {\r\n    var cache = {}; // TODO@Alex unbounded cache\r\n    return function (input) {\r\n        if (!cache.hasOwnProperty(input)) {\r\n            cache[input] = computeFn(input);\r\n        }\r\n        return cache[input];\r\n    };\r\n}\r\nexport var getMapForWordSeparators = once(function (input) { return new WordCharacterClassifier(input); });\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { CursorColumns, SingleCursorState } from './cursorCommon.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nvar CursorPosition = /** @class */ (function () {\r\n    function CursorPosition(lineNumber, column, leftoverVisibleColumns) {\r\n        this.lineNumber = lineNumber;\r\n        this.column = column;\r\n        this.leftoverVisibleColumns = leftoverVisibleColumns;\r\n    }\r\n    return CursorPosition;\r\n}());\r\nexport { CursorPosition };\r\nvar MoveOperations = /** @class */ (function () {\r\n    function MoveOperations() {\r\n    }\r\n    MoveOperations.leftPosition = function (model, lineNumber, column) {\r\n        if (column > model.getLineMinColumn(lineNumber)) {\r\n            column = column - strings.prevCharLength(model.getLineContent(lineNumber), column - 1);\r\n        }\r\n        else if (lineNumber > 1) {\r\n            lineNumber = lineNumber - 1;\r\n            column = model.getLineMaxColumn(lineNumber);\r\n        }\r\n        return new Position(lineNumber, column);\r\n    };\r\n    MoveOperations.left = function (config, model, lineNumber, column) {\r\n        var pos = MoveOperations.leftPosition(model, lineNumber, column);\r\n        return new CursorPosition(pos.lineNumber, pos.column, 0);\r\n    };\r\n    MoveOperations.moveLeft = function (config, model, cursor, inSelectionMode, noOfColumns) {\r\n        var lineNumber, column;\r\n        if (cursor.hasSelection() && !inSelectionMode) {\r\n            // If we are in selection mode, move left without selection cancels selection and puts cursor at the beginning of the selection\r\n            lineNumber = cursor.selection.startLineNumber;\r\n            column = cursor.selection.startColumn;\r\n        }\r\n        else {\r\n            var r = MoveOperations.left(config, model, cursor.position.lineNumber, cursor.position.column - (noOfColumns - 1));\r\n            lineNumber = r.lineNumber;\r\n            column = r.column;\r\n        }\r\n        return cursor.move(inSelectionMode, lineNumber, column, 0);\r\n    };\r\n    MoveOperations.rightPosition = function (model, lineNumber, column) {\r\n        if (column < model.getLineMaxColumn(lineNumber)) {\r\n            column = column + strings.nextCharLength(model.getLineContent(lineNumber), column - 1);\r\n        }\r\n        else if (lineNumber < model.getLineCount()) {\r\n            lineNumber = lineNumber + 1;\r\n            column = model.getLineMinColumn(lineNumber);\r\n        }\r\n        return new Position(lineNumber, column);\r\n    };\r\n    MoveOperations.right = function (config, model, lineNumber, column) {\r\n        var pos = MoveOperations.rightPosition(model, lineNumber, column);\r\n        return new CursorPosition(pos.lineNumber, pos.column, 0);\r\n    };\r\n    MoveOperations.moveRight = function (config, model, cursor, inSelectionMode, noOfColumns) {\r\n        var lineNumber, column;\r\n        if (cursor.hasSelection() && !inSelectionMode) {\r\n            // If we are in selection mode, move right without selection cancels selection and puts cursor at the end of the selection\r\n            lineNumber = cursor.selection.endLineNumber;\r\n            column = cursor.selection.endColumn;\r\n        }\r\n        else {\r\n            var r = MoveOperations.right(config, model, cursor.position.lineNumber, cursor.position.column + (noOfColumns - 1));\r\n            lineNumber = r.lineNumber;\r\n            column = r.column;\r\n        }\r\n        return cursor.move(inSelectionMode, lineNumber, column, 0);\r\n    };\r\n    MoveOperations.down = function (config, model, lineNumber, column, leftoverVisibleColumns, count, allowMoveOnLastLine) {\r\n        var currentVisibleColumn = CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\r\n        lineNumber = lineNumber + count;\r\n        var lineCount = model.getLineCount();\r\n        if (lineNumber > lineCount) {\r\n            lineNumber = lineCount;\r\n            if (allowMoveOnLastLine) {\r\n                column = model.getLineMaxColumn(lineNumber);\r\n            }\r\n            else {\r\n                column = Math.min(model.getLineMaxColumn(lineNumber), column);\r\n            }\r\n        }\r\n        else {\r\n            column = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, currentVisibleColumn);\r\n        }\r\n        leftoverVisibleColumns = currentVisibleColumn - CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\r\n        return new CursorPosition(lineNumber, column, leftoverVisibleColumns);\r\n    };\r\n    MoveOperations.moveDown = function (config, model, cursor, inSelectionMode, linesCount) {\r\n        var lineNumber, column;\r\n        if (cursor.hasSelection() && !inSelectionMode) {\r\n            // If we are in selection mode, move down acts relative to the end of selection\r\n            lineNumber = cursor.selection.endLineNumber;\r\n            column = cursor.selection.endColumn;\r\n        }\r\n        else {\r\n            lineNumber = cursor.position.lineNumber;\r\n            column = cursor.position.column;\r\n        }\r\n        var r = MoveOperations.down(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\r\n        return cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\r\n    };\r\n    MoveOperations.translateDown = function (config, model, cursor) {\r\n        var selection = cursor.selection;\r\n        var selectionStart = MoveOperations.down(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\r\n        var position = MoveOperations.down(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\r\n        return new SingleCursorState(new Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column), selectionStart.leftoverVisibleColumns, new Position(position.lineNumber, position.column), position.leftoverVisibleColumns);\r\n    };\r\n    MoveOperations.up = function (config, model, lineNumber, column, leftoverVisibleColumns, count, allowMoveOnFirstLine) {\r\n        var currentVisibleColumn = CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\r\n        lineNumber = lineNumber - count;\r\n        if (lineNumber < 1) {\r\n            lineNumber = 1;\r\n            if (allowMoveOnFirstLine) {\r\n                column = model.getLineMinColumn(lineNumber);\r\n            }\r\n            else {\r\n                column = Math.min(model.getLineMaxColumn(lineNumber), column);\r\n            }\r\n        }\r\n        else {\r\n            column = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, currentVisibleColumn);\r\n        }\r\n        leftoverVisibleColumns = currentVisibleColumn - CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\r\n        return new CursorPosition(lineNumber, column, leftoverVisibleColumns);\r\n    };\r\n    MoveOperations.moveUp = function (config, model, cursor, inSelectionMode, linesCount) {\r\n        var lineNumber, column;\r\n        if (cursor.hasSelection() && !inSelectionMode) {\r\n            // If we are in selection mode, move up acts relative to the beginning of selection\r\n            lineNumber = cursor.selection.startLineNumber;\r\n            column = cursor.selection.startColumn;\r\n        }\r\n        else {\r\n            lineNumber = cursor.position.lineNumber;\r\n            column = cursor.position.column;\r\n        }\r\n        var r = MoveOperations.up(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\r\n        return cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\r\n    };\r\n    MoveOperations.translateUp = function (config, model, cursor) {\r\n        var selection = cursor.selection;\r\n        var selectionStart = MoveOperations.up(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\r\n        var position = MoveOperations.up(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\r\n        return new SingleCursorState(new Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column), selectionStart.leftoverVisibleColumns, new Position(position.lineNumber, position.column), position.leftoverVisibleColumns);\r\n    };\r\n    MoveOperations.moveToBeginningOfLine = function (config, model, cursor, inSelectionMode) {\r\n        var lineNumber = cursor.position.lineNumber;\r\n        var minColumn = model.getLineMinColumn(lineNumber);\r\n        var firstNonBlankColumn = model.getLineFirstNonWhitespaceColumn(lineNumber) || minColumn;\r\n        var column;\r\n        var relevantColumnNumber = cursor.position.column;\r\n        if (relevantColumnNumber === firstNonBlankColumn) {\r\n            column = minColumn;\r\n        }\r\n        else {\r\n            column = firstNonBlankColumn;\r\n        }\r\n        return cursor.move(inSelectionMode, lineNumber, column, 0);\r\n    };\r\n    MoveOperations.moveToEndOfLine = function (config, model, cursor, inSelectionMode) {\r\n        var lineNumber = cursor.position.lineNumber;\r\n        var maxColumn = model.getLineMaxColumn(lineNumber);\r\n        return cursor.move(inSelectionMode, lineNumber, maxColumn, 0);\r\n    };\r\n    MoveOperations.moveToBeginningOfBuffer = function (config, model, cursor, inSelectionMode) {\r\n        return cursor.move(inSelectionMode, 1, 1, 0);\r\n    };\r\n    MoveOperations.moveToEndOfBuffer = function (config, model, cursor, inSelectionMode) {\r\n        var lastLineNumber = model.getLineCount();\r\n        var lastColumn = model.getLineMaxColumn(lastLineNumber);\r\n        return cursor.move(inSelectionMode, lastLineNumber, lastColumn, 0);\r\n    };\r\n    return MoveOperations;\r\n}());\r\nexport { MoveOperations };\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { CursorColumns, SingleCursorState } from './cursorCommon.js';\r\nimport { Position } from '../core/position.js';\r\nimport { Range } from '../core/range.js';\r\nvar ColumnSelection = /** @class */ (function () {\r\n    function ColumnSelection() {\r\n    }\r\n    ColumnSelection.columnSelect = function (config, model, fromLineNumber, fromVisibleColumn, toLineNumber, toVisibleColumn) {\r\n        var lineCount = Math.abs(toLineNumber - fromLineNumber) + 1;\r\n        var reversed = (fromLineNumber > toLineNumber);\r\n        var isRTL = (fromVisibleColumn > toVisibleColumn);\r\n        var isLTR = (fromVisibleColumn < toVisibleColumn);\r\n        var result = [];\r\n        // console.log(`fromVisibleColumn: ${fromVisibleColumn}, toVisibleColumn: ${toVisibleColumn}`);\r\n        for (var i = 0; i < lineCount; i++) {\r\n            var lineNumber = fromLineNumber + (reversed ? -i : i);\r\n            var startColumn = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, fromVisibleColumn);\r\n            var endColumn = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, toVisibleColumn);\r\n            var visibleStartColumn = CursorColumns.visibleColumnFromColumn2(config, model, new Position(lineNumber, startColumn));\r\n            var visibleEndColumn = CursorColumns.visibleColumnFromColumn2(config, model, new Position(lineNumber, endColumn));\r\n            // console.log(`lineNumber: ${lineNumber}: visibleStartColumn: ${visibleStartColumn}, visibleEndColumn: ${visibleEndColumn}`);\r\n            if (isLTR) {\r\n                if (visibleStartColumn > toVisibleColumn) {\r\n                    continue;\r\n                }\r\n                if (visibleEndColumn < fromVisibleColumn) {\r\n                    continue;\r\n                }\r\n            }\r\n            if (isRTL) {\r\n                if (visibleEndColumn > fromVisibleColumn) {\r\n                    continue;\r\n                }\r\n                if (visibleStartColumn < toVisibleColumn) {\r\n                    continue;\r\n                }\r\n            }\r\n            result.push(new SingleCursorState(new Range(lineNumber, startColumn, lineNumber, startColumn), 0, new Position(lineNumber, endColumn), 0));\r\n        }\r\n        if (result.length === 0) {\r\n            // We are after all the lines, so add cursor at the end of each line\r\n            for (var i = 0; i < lineCount; i++) {\r\n                var lineNumber = fromLineNumber + (reversed ? -i : i);\r\n                var maxColumn = model.getLineMaxColumn(lineNumber);\r\n                result.push(new SingleCursorState(new Range(lineNumber, maxColumn, lineNumber, maxColumn), 0, new Position(lineNumber, maxColumn), 0));\r\n            }\r\n        }\r\n        return {\r\n            viewStates: result,\r\n            reversed: reversed,\r\n            fromLineNumber: fromLineNumber,\r\n            fromVisualColumn: fromVisibleColumn,\r\n            toLineNumber: toLineNumber,\r\n            toVisualColumn: toVisibleColumn\r\n        };\r\n    };\r\n    ColumnSelection.columnSelectLeft = function (config, model, prevColumnSelectData) {\r\n        var toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\r\n        if (toViewVisualColumn > 1) {\r\n            toViewVisualColumn--;\r\n        }\r\n        return ColumnSelection.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\r\n    };\r\n    ColumnSelection.columnSelectRight = function (config, model, prevColumnSelectData) {\r\n        var maxVisualViewColumn = 0;\r\n        var minViewLineNumber = Math.min(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\r\n        var maxViewLineNumber = Math.max(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\r\n        for (var lineNumber = minViewLineNumber; lineNumber <= maxViewLineNumber; lineNumber++) {\r\n            var lineMaxViewColumn = model.getLineMaxColumn(lineNumber);\r\n            var lineMaxVisualViewColumn = CursorColumns.visibleColumnFromColumn2(config, model, new Position(lineNumber, lineMaxViewColumn));\r\n            maxVisualViewColumn = Math.max(maxVisualViewColumn, lineMaxVisualViewColumn);\r\n        }\r\n        var toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\r\n        if (toViewVisualColumn < maxVisualViewColumn) {\r\n            toViewVisualColumn++;\r\n        }\r\n        return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\r\n    };\r\n    ColumnSelection.columnSelectUp = function (config, model, prevColumnSelectData, isPaged) {\r\n        var linesCount = isPaged ? config.pageSize : 1;\r\n        var toViewLineNumber = Math.max(1, prevColumnSelectData.toViewLineNumber - linesCount);\r\n        return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\r\n    };\r\n    ColumnSelection.columnSelectDown = function (config, model, prevColumnSelectData, isPaged) {\r\n        var linesCount = isPaged ? config.pageSize : 1;\r\n        var toViewLineNumber = Math.min(model.getLineCount(), prevColumnSelectData.toViewLineNumber + linesCount);\r\n        return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\r\n    };\r\n    return ColumnSelection;\r\n}());\r\nexport { ColumnSelection };\r\n"],"sourceRoot":""}