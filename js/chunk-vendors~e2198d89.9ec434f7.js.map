{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/editor/standalone/common/themes.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/standalone/common/monarch/monarchCompile.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/standalone/common/monarch/monarchCommon.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/standalone/common/standaloneThemeService.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/standalone/common/monarch/monarchLexer.js"],"names":["_a","_b","_c","vs","base","inherit","rules","token","foreground","background","fontStyle","colors","vs_dark","hc_black","isArrayOf","elemType","obj","Array","isArray","_i","obj_1","length","el","bool","prop","defValue","string","arrayToHash","array","result","array_1","e","createKeywordMatcher","arr","caseInsensitive","map","x","toLowerCase","hash","word","undefined","hasOwnProperty","compileRegExp","lexer","str","n","indexOf","replace","s","attr","sub","RegExp","source","ignoreCase","selectScrutinee","id","matches","state","num","parts","split","unshift","createGuard","ruleName","tkey","val","scrut","oppat","match","parseInt","tester","op","pat","test","words","elem","inWords_2","re_1","re","patx_1","patx_2","eos","patexp","inWords_1","name","value","scrutinee","compileAction","action","newAction","tokenSubst","bracket","next","substr","goBack","switchTo","log","nextEmbedded","usesEmbedded","results","i","len","group","cases","cases_1","push","def_1","defaultToken","cases_2","_case","didmatch","Rule","this","regex","matchOnlyAtLineStart","prototype","setRegex","sregex","setAction","act","compile","languageId","json","Error","noThrow","maxStack","start","tokenPostfix","lexerMin","addRules","newrules","rules_1","rule","include","tokenizer","newrule","rule1","matchOnlyAtStart","stateNames","key","brackets","open","close","desc","isFuzzyActionArr","what","isFuzzyAction","isString","isIAction","empty","fixCase","sanitize","msg","console","createError","substituteMatches","stateMatches","full","dollar","ofs","total","findRules","inState","idx","lastIndexOf","stateExists","exist","IStandaloneThemeService","CACHE_STACK_DEPTH","MonarchStackElementFactory","maxCacheDepth","_maxCacheDepth","_entries","Object","create","parent","_INSTANCE","depth","MonarchStackElement","stackElementId","getStackElementId","element","_equals","a","b","equals","other","pop","popall","EmbeddedModeData","modeId","clone","stateClone","MonarchLineStateFactory","stack","embeddedModeData","MonarchLineState","embeddedModeDataClone","MonarchClassicTokensCollector","_tokens","_language","_lastTokenType","_lastTokenLanguage","enterMode","startOffset","emit","type","nestedModeTokenize","embeddedModeLine","offsetDelta","nestedModeId","embeddedModeState","nestedModeTokenizationSupport","get","nestedResult","tokenize","concat","tokens","endState","finalize","MonarchModernTokensCollector","modeService","theme","_modeService","_theme","_prependTokens","_currentLanguageId","_lastTokenMetadata","getLanguageIdentifier","metadata","_merge","c","aLen","bLen","cLen","Uint32Array","set","tokenize2","MonarchTokenizer","standaloneThemeService","_this","_standaloneThemeService","_modeId","_lexer","_embeddedModes","embeddedLoaded","Promise","resolve","emitting","_tokenizationRegistryListener","onDidChange","isOneOfMyEmbeddedModes","changedLanguages","language","fire","dispose","getLoadStatus","promises","tokenizationSupport","nestedModeStatus","loaded","promise","tokenizationSupportPromise","getPromise","all","then","_","getInitialState","rootState","line","lineState","tokensCollector","endLineState","_tokenize","getTheme","tokenTheme","collector","_nestedTokenize","_myTokenize","_findLeavingNestedModeOffset","popOffset","hasEmbeddedPopRule","regexSource","search","nestedEndState","nestedModeLine","substring","restOfTheLine","_safeRuleName","lineLength","pos","groupMatching","forceEvaluation","pos0","stackLen0","groupLen0","groups","matched","enteringEmbeddedMode","groupEntry","shift","restOfLine","rules_2","rule_1","charAt","Math","max","nextState","transform","totalLen","tokenType","rest","findBracket","enteringEmbeddedModeId","getModeIdForLanguageName","embeddedModeData_1","_getNestedEmbeddedModeData","mimetypeOrModeId","_locateMode","isRegisteredMode","getModeId","triggerMode","brackets_1","bracketType","createTokenizationSupport"],"mappings":"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","file":"js/chunk-vendors~e2198d89.9ec434f7.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar _a, _b, _c;\r\nimport { editorActiveIndentGuides, editorIndentGuides } from '../../common/view/editorColorRegistry.js';\r\nimport { editorBackground, editorForeground, editorInactiveSelection, editorSelectionHighlight } from '../../../platform/theme/common/colorRegistry.js';\r\n/* -------------------------------- Begin vs theme -------------------------------- */\r\nexport var vs = {\r\n    base: 'vs',\r\n    inherit: false,\r\n    rules: [\r\n        { token: '', foreground: '000000', background: 'fffffe' },\r\n        { token: 'invalid', foreground: 'cd3131' },\r\n        { token: 'emphasis', fontStyle: 'italic' },\r\n        { token: 'strong', fontStyle: 'bold' },\r\n        { token: 'variable', foreground: '001188' },\r\n        { token: 'variable.predefined', foreground: '4864AA' },\r\n        { token: 'constant', foreground: 'dd0000' },\r\n        { token: 'comment', foreground: '008000' },\r\n        { token: 'number', foreground: '098658' },\r\n        { token: 'number.hex', foreground: '3030c0' },\r\n        { token: 'regexp', foreground: '800000' },\r\n        { token: 'annotation', foreground: '808080' },\r\n        { token: 'type', foreground: '008080' },\r\n        { token: 'delimiter', foreground: '000000' },\r\n        { token: 'delimiter.html', foreground: '383838' },\r\n        { token: 'delimiter.xml', foreground: '0000FF' },\r\n        { token: 'tag', foreground: '800000' },\r\n        { token: 'tag.id.pug', foreground: '4F76AC' },\r\n        { token: 'tag.class.pug', foreground: '4F76AC' },\r\n        { token: 'meta.scss', foreground: '800000' },\r\n        { token: 'metatag', foreground: 'e00000' },\r\n        { token: 'metatag.content.html', foreground: 'FF0000' },\r\n        { token: 'metatag.html', foreground: '808080' },\r\n        { token: 'metatag.xml', foreground: '808080' },\r\n        { token: 'metatag.php', fontStyle: 'bold' },\r\n        { token: 'key', foreground: '863B00' },\r\n        { token: 'string.key.json', foreground: 'A31515' },\r\n        { token: 'string.value.json', foreground: '0451A5' },\r\n        { token: 'attribute.name', foreground: 'FF0000' },\r\n        { token: 'attribute.value', foreground: '0451A5' },\r\n        { token: 'attribute.value.number', foreground: '098658' },\r\n        { token: 'attribute.value.unit', foreground: '098658' },\r\n        { token: 'attribute.value.html', foreground: '0000FF' },\r\n        { token: 'attribute.value.xml', foreground: '0000FF' },\r\n        { token: 'string', foreground: 'A31515' },\r\n        { token: 'string.html', foreground: '0000FF' },\r\n        { token: 'string.sql', foreground: 'FF0000' },\r\n        { token: 'string.yaml', foreground: '0451A5' },\r\n        { token: 'keyword', foreground: '0000FF' },\r\n        { token: 'keyword.json', foreground: '0451A5' },\r\n        { token: 'keyword.flow', foreground: 'AF00DB' },\r\n        { token: 'keyword.flow.scss', foreground: '0000FF' },\r\n        { token: 'operator.scss', foreground: '666666' },\r\n        { token: 'operator.sql', foreground: '778899' },\r\n        { token: 'operator.swift', foreground: '666666' },\r\n        { token: 'predefined.sql', foreground: 'FF00FF' },\r\n    ],\r\n    colors: (_a = {},\r\n        _a[editorBackground] = '#FFFFFE',\r\n        _a[editorForeground] = '#000000',\r\n        _a[editorInactiveSelection] = '#E5EBF1',\r\n        _a[editorIndentGuides] = '#D3D3D3',\r\n        _a[editorActiveIndentGuides] = '#939393',\r\n        _a[editorSelectionHighlight] = '#ADD6FF4D',\r\n        _a)\r\n};\r\n/* -------------------------------- End vs theme -------------------------------- */\r\n/* -------------------------------- Begin vs-dark theme -------------------------------- */\r\nexport var vs_dark = {\r\n    base: 'vs-dark',\r\n    inherit: false,\r\n    rules: [\r\n        { token: '', foreground: 'D4D4D4', background: '1E1E1E' },\r\n        { token: 'invalid', foreground: 'f44747' },\r\n        { token: 'emphasis', fontStyle: 'italic' },\r\n        { token: 'strong', fontStyle: 'bold' },\r\n        { token: 'variable', foreground: '74B0DF' },\r\n        { token: 'variable.predefined', foreground: '4864AA' },\r\n        { token: 'variable.parameter', foreground: '9CDCFE' },\r\n        { token: 'constant', foreground: '569CD6' },\r\n        { token: 'comment', foreground: '608B4E' },\r\n        { token: 'number', foreground: 'B5CEA8' },\r\n        { token: 'number.hex', foreground: '5BB498' },\r\n        { token: 'regexp', foreground: 'B46695' },\r\n        { token: 'annotation', foreground: 'cc6666' },\r\n        { token: 'type', foreground: '3DC9B0' },\r\n        { token: 'delimiter', foreground: 'DCDCDC' },\r\n        { token: 'delimiter.html', foreground: '808080' },\r\n        { token: 'delimiter.xml', foreground: '808080' },\r\n        { token: 'tag', foreground: '569CD6' },\r\n        { token: 'tag.id.pug', foreground: '4F76AC' },\r\n        { token: 'tag.class.pug', foreground: '4F76AC' },\r\n        { token: 'meta.scss', foreground: 'A79873' },\r\n        { token: 'meta.tag', foreground: 'CE9178' },\r\n        { token: 'metatag', foreground: 'DD6A6F' },\r\n        { token: 'metatag.content.html', foreground: '9CDCFE' },\r\n        { token: 'metatag.html', foreground: '569CD6' },\r\n        { token: 'metatag.xml', foreground: '569CD6' },\r\n        { token: 'metatag.php', fontStyle: 'bold' },\r\n        { token: 'key', foreground: '9CDCFE' },\r\n        { token: 'string.key.json', foreground: '9CDCFE' },\r\n        { token: 'string.value.json', foreground: 'CE9178' },\r\n        { token: 'attribute.name', foreground: '9CDCFE' },\r\n        { token: 'attribute.value', foreground: 'CE9178' },\r\n        { token: 'attribute.value.number.css', foreground: 'B5CEA8' },\r\n        { token: 'attribute.value.unit.css', foreground: 'B5CEA8' },\r\n        { token: 'attribute.value.hex.css', foreground: 'D4D4D4' },\r\n        { token: 'string', foreground: 'CE9178' },\r\n        { token: 'string.sql', foreground: 'FF0000' },\r\n        { token: 'keyword', foreground: '569CD6' },\r\n        { token: 'keyword.flow', foreground: 'C586C0' },\r\n        { token: 'keyword.json', foreground: 'CE9178' },\r\n        { token: 'keyword.flow.scss', foreground: '569CD6' },\r\n        { token: 'operator.scss', foreground: '909090' },\r\n        { token: 'operator.sql', foreground: '778899' },\r\n        { token: 'operator.swift', foreground: '909090' },\r\n        { token: 'predefined.sql', foreground: 'FF00FF' },\r\n    ],\r\n    colors: (_b = {},\r\n        _b[editorBackground] = '#1E1E1E',\r\n        _b[editorForeground] = '#D4D4D4',\r\n        _b[editorInactiveSelection] = '#3A3D41',\r\n        _b[editorIndentGuides] = '#404040',\r\n        _b[editorActiveIndentGuides] = '#707070',\r\n        _b[editorSelectionHighlight] = '#ADD6FF26',\r\n        _b)\r\n};\r\n/* -------------------------------- End vs-dark theme -------------------------------- */\r\n/* -------------------------------- Begin hc-black theme -------------------------------- */\r\nexport var hc_black = {\r\n    base: 'hc-black',\r\n    inherit: false,\r\n    rules: [\r\n        { token: '', foreground: 'FFFFFF', background: '000000' },\r\n        { token: 'invalid', foreground: 'f44747' },\r\n        { token: 'emphasis', fontStyle: 'italic' },\r\n        { token: 'strong', fontStyle: 'bold' },\r\n        { token: 'variable', foreground: '1AEBFF' },\r\n        { token: 'variable.parameter', foreground: '9CDCFE' },\r\n        { token: 'constant', foreground: '569CD6' },\r\n        { token: 'comment', foreground: '608B4E' },\r\n        { token: 'number', foreground: 'FFFFFF' },\r\n        { token: 'regexp', foreground: 'C0C0C0' },\r\n        { token: 'annotation', foreground: '569CD6' },\r\n        { token: 'type', foreground: '3DC9B0' },\r\n        { token: 'delimiter', foreground: 'FFFF00' },\r\n        { token: 'delimiter.html', foreground: 'FFFF00' },\r\n        { token: 'tag', foreground: '569CD6' },\r\n        { token: 'tag.id.pug', foreground: '4F76AC' },\r\n        { token: 'tag.class.pug', foreground: '4F76AC' },\r\n        { token: 'meta', foreground: 'D4D4D4' },\r\n        { token: 'meta.tag', foreground: 'CE9178' },\r\n        { token: 'metatag', foreground: '569CD6' },\r\n        { token: 'metatag.content.html', foreground: '1AEBFF' },\r\n        { token: 'metatag.html', foreground: '569CD6' },\r\n        { token: 'metatag.xml', foreground: '569CD6' },\r\n        { token: 'metatag.php', fontStyle: 'bold' },\r\n        { token: 'key', foreground: '9CDCFE' },\r\n        { token: 'string.key', foreground: '9CDCFE' },\r\n        { token: 'string.value', foreground: 'CE9178' },\r\n        { token: 'attribute.name', foreground: '569CD6' },\r\n        { token: 'attribute.value', foreground: '3FF23F' },\r\n        { token: 'string', foreground: 'CE9178' },\r\n        { token: 'string.sql', foreground: 'FF0000' },\r\n        { token: 'keyword', foreground: '569CD6' },\r\n        { token: 'keyword.flow', foreground: 'C586C0' },\r\n        { token: 'operator.sql', foreground: '778899' },\r\n        { token: 'operator.swift', foreground: '909090' },\r\n        { token: 'predefined.sql', foreground: 'FF00FF' },\r\n    ],\r\n    colors: (_c = {},\r\n        _c[editorBackground] = '#000000',\r\n        _c[editorForeground] = '#FFFFFF',\r\n        _c[editorIndentGuides] = '#FFFFFF',\r\n        _c[editorActiveIndentGuides] = '#FFFFFF',\r\n        _c)\r\n};\r\n/* -------------------------------- End hc-black theme -------------------------------- */\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n/*\r\n * This module only exports 'compile' which compiles a JSON language definition\r\n * into a typed and checked ILexer definition.\r\n */\r\nimport * as monarchCommon from './monarchCommon.js';\r\n/*\r\n * Type helpers\r\n *\r\n * Note: this is just for sanity checks on the JSON description which is\r\n * helpful for the programmer. No checks are done anymore once the lexer is\r\n * already 'compiled and checked'.\r\n *\r\n */\r\nfunction isArrayOf(elemType, obj) {\r\n    if (!obj) {\r\n        return false;\r\n    }\r\n    if (!(Array.isArray(obj))) {\r\n        return false;\r\n    }\r\n    for (var _i = 0, obj_1 = obj; _i < obj_1.length; _i++) {\r\n        var el = obj_1[_i];\r\n        if (!(elemType(el))) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction bool(prop, defValue) {\r\n    if (typeof prop === 'boolean') {\r\n        return prop;\r\n    }\r\n    return defValue;\r\n}\r\nfunction string(prop, defValue) {\r\n    if (typeof (prop) === 'string') {\r\n        return prop;\r\n    }\r\n    return defValue;\r\n}\r\nfunction arrayToHash(array) {\r\n    var result = {};\r\n    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\r\n        var e = array_1[_i];\r\n        result[e] = true;\r\n    }\r\n    return result;\r\n}\r\nfunction createKeywordMatcher(arr, caseInsensitive) {\r\n    if (caseInsensitive === void 0) { caseInsensitive = false; }\r\n    if (caseInsensitive) {\r\n        arr = arr.map(function (x) { return x.toLowerCase(); });\r\n    }\r\n    var hash = arrayToHash(arr);\r\n    if (caseInsensitive) {\r\n        return function (word) {\r\n            return hash[word.toLowerCase()] !== undefined && hash.hasOwnProperty(word.toLowerCase());\r\n        };\r\n    }\r\n    else {\r\n        return function (word) {\r\n            return hash[word] !== undefined && hash.hasOwnProperty(word);\r\n        };\r\n    }\r\n}\r\n// Lexer helpers\r\n/**\r\n * Compiles a regular expression string, adding the 'i' flag if 'ignoreCase' is set.\r\n * Also replaces @\\w+ or sequences with the content of the specified attribute\r\n */\r\nfunction compileRegExp(lexer, str) {\r\n    var n = 0;\r\n    while (str.indexOf('@') >= 0 && n < 5) { // at most 5 expansions\r\n        n++;\r\n        str = str.replace(/@(\\w+)/g, function (s, attr) {\r\n            var sub = '';\r\n            if (typeof (lexer[attr]) === 'string') {\r\n                sub = lexer[attr];\r\n            }\r\n            else if (lexer[attr] && lexer[attr] instanceof RegExp) {\r\n                sub = lexer[attr].source;\r\n            }\r\n            else {\r\n                if (lexer[attr] === undefined) {\r\n                    throw monarchCommon.createError(lexer, 'language definition does not contain attribute \\'' + attr + '\\', used at: ' + str);\r\n                }\r\n                else {\r\n                    throw monarchCommon.createError(lexer, 'attribute reference \\'' + attr + '\\' must be a string, used at: ' + str);\r\n                }\r\n            }\r\n            return (monarchCommon.empty(sub) ? '' : '(?:' + sub + ')');\r\n        });\r\n    }\r\n    return new RegExp(str, (lexer.ignoreCase ? 'i' : ''));\r\n}\r\n/**\r\n * Compiles guard functions for case matches.\r\n * This compiles 'cases' attributes into efficient match functions.\r\n *\r\n */\r\nfunction selectScrutinee(id, matches, state, num) {\r\n    if (num < 0) {\r\n        return id;\r\n    }\r\n    if (num < matches.length) {\r\n        return matches[num];\r\n    }\r\n    if (num >= 100) {\r\n        num = num - 100;\r\n        var parts = state.split('.');\r\n        parts.unshift(state);\r\n        if (num < parts.length) {\r\n            return parts[num];\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction createGuard(lexer, ruleName, tkey, val) {\r\n    // get the scrutinee and pattern\r\n    var scrut = -1; // -1: $!, 0-99: $n, 100+n: $Sn\r\n    var oppat = tkey;\r\n    var matches = tkey.match(/^\\$(([sS]?)(\\d\\d?)|#)(.*)$/);\r\n    if (matches) {\r\n        if (matches[3]) { // if digits\r\n            scrut = parseInt(matches[3]);\r\n            if (matches[2]) {\r\n                scrut = scrut + 100; // if [sS] present\r\n            }\r\n        }\r\n        oppat = matches[4];\r\n    }\r\n    // get operator\r\n    var op = '~';\r\n    var pat = oppat;\r\n    if (!oppat || oppat.length === 0) {\r\n        op = '!=';\r\n        pat = '';\r\n    }\r\n    else if (/^\\w*$/.test(pat)) { // just a word\r\n        op = '==';\r\n    }\r\n    else {\r\n        matches = oppat.match(/^(@|!@|~|!~|==|!=)(.*)$/);\r\n        if (matches) {\r\n            op = matches[1];\r\n            pat = matches[2];\r\n        }\r\n    }\r\n    // set the tester function\r\n    var tester;\r\n    // special case a regexp that matches just words\r\n    if ((op === '~' || op === '!~') && /^(\\w|\\|)*$/.test(pat)) {\r\n        var inWords_1 = createKeywordMatcher(pat.split('|'), lexer.ignoreCase);\r\n        tester = function (s) { return (op === '~' ? inWords_1(s) : !inWords_1(s)); };\r\n    }\r\n    else if (op === '@' || op === '!@') {\r\n        var words = lexer[pat];\r\n        if (!words) {\r\n            throw monarchCommon.createError(lexer, 'the @ match target \\'' + pat + '\\' is not defined, in rule: ' + ruleName);\r\n        }\r\n        if (!(isArrayOf(function (elem) { return (typeof (elem) === 'string'); }, words))) {\r\n            throw monarchCommon.createError(lexer, 'the @ match target \\'' + pat + '\\' must be an array of strings, in rule: ' + ruleName);\r\n        }\r\n        var inWords_2 = createKeywordMatcher(words, lexer.ignoreCase);\r\n        tester = function (s) { return (op === '@' ? inWords_2(s) : !inWords_2(s)); };\r\n    }\r\n    else if (op === '~' || op === '!~') {\r\n        if (pat.indexOf('$') < 0) {\r\n            // precompile regular expression\r\n            var re_1 = compileRegExp(lexer, '^' + pat + '$');\r\n            tester = function (s) { return (op === '~' ? re_1.test(s) : !re_1.test(s)); };\r\n        }\r\n        else {\r\n            tester = function (s, id, matches, state) {\r\n                var re = compileRegExp(lexer, '^' + monarchCommon.substituteMatches(lexer, pat, id, matches, state) + '$');\r\n                return re.test(s);\r\n            };\r\n        }\r\n    }\r\n    else { // if (op==='==' || op==='!=') {\r\n        if (pat.indexOf('$') < 0) {\r\n            var patx_1 = monarchCommon.fixCase(lexer, pat);\r\n            tester = function (s) { return (op === '==' ? s === patx_1 : s !== patx_1); };\r\n        }\r\n        else {\r\n            var patx_2 = monarchCommon.fixCase(lexer, pat);\r\n            tester = function (s, id, matches, state, eos) {\r\n                var patexp = monarchCommon.substituteMatches(lexer, patx_2, id, matches, state);\r\n                return (op === '==' ? s === patexp : s !== patexp);\r\n            };\r\n        }\r\n    }\r\n    // return the branch object\r\n    if (scrut === -1) {\r\n        return {\r\n            name: tkey, value: val, test: function (id, matches, state, eos) {\r\n                return tester(id, id, matches, state, eos);\r\n            }\r\n        };\r\n    }\r\n    else {\r\n        return {\r\n            name: tkey, value: val, test: function (id, matches, state, eos) {\r\n                var scrutinee = selectScrutinee(id, matches, state, scrut);\r\n                return tester(!scrutinee ? '' : scrutinee, id, matches, state, eos);\r\n            }\r\n        };\r\n    }\r\n}\r\n/**\r\n * Compiles an action: i.e. optimize regular expressions and case matches\r\n * and do many sanity checks.\r\n *\r\n * This is called only during compilation but if the lexer definition\r\n * contains user functions as actions (which is usually not allowed), then this\r\n * may be called during lexing. It is important therefore to compile common cases efficiently\r\n */\r\nfunction compileAction(lexer, ruleName, action) {\r\n    if (!action) {\r\n        return { token: '' };\r\n    }\r\n    else if (typeof (action) === 'string') {\r\n        return action; // { token: action };\r\n    }\r\n    else if (action.token || action.token === '') {\r\n        if (typeof (action.token) !== 'string') {\r\n            throw monarchCommon.createError(lexer, 'a \\'token\\' attribute must be of type string, in rule: ' + ruleName);\r\n        }\r\n        else {\r\n            // only copy specific typed fields (only happens once during compile Lexer)\r\n            var newAction = { token: action.token };\r\n            if (action.token.indexOf('$') >= 0) {\r\n                newAction.tokenSubst = true;\r\n            }\r\n            if (typeof (action.bracket) === 'string') {\r\n                if (action.bracket === '@open') {\r\n                    newAction.bracket = 1 /* Open */;\r\n                }\r\n                else if (action.bracket === '@close') {\r\n                    newAction.bracket = -1 /* Close */;\r\n                }\r\n                else {\r\n                    throw monarchCommon.createError(lexer, 'a \\'bracket\\' attribute must be either \\'@open\\' or \\'@close\\', in rule: ' + ruleName);\r\n                }\r\n            }\r\n            if (action.next) {\r\n                if (typeof (action.next) !== 'string') {\r\n                    throw monarchCommon.createError(lexer, 'the next state must be a string value in rule: ' + ruleName);\r\n                }\r\n                else {\r\n                    var next = action.next;\r\n                    if (!/^(@pop|@push|@popall)$/.test(next)) {\r\n                        if (next[0] === '@') {\r\n                            next = next.substr(1); // peel off starting @ sign\r\n                        }\r\n                        if (next.indexOf('$') < 0) { // no dollar substitution, we can check if the state exists\r\n                            if (!monarchCommon.stateExists(lexer, monarchCommon.substituteMatches(lexer, next, '', [], ''))) {\r\n                                throw monarchCommon.createError(lexer, 'the next state \\'' + action.next + '\\' is not defined in rule: ' + ruleName);\r\n                            }\r\n                        }\r\n                    }\r\n                    newAction.next = next;\r\n                }\r\n            }\r\n            if (typeof (action.goBack) === 'number') {\r\n                newAction.goBack = action.goBack;\r\n            }\r\n            if (typeof (action.switchTo) === 'string') {\r\n                newAction.switchTo = action.switchTo;\r\n            }\r\n            if (typeof (action.log) === 'string') {\r\n                newAction.log = action.log;\r\n            }\r\n            if (typeof (action.nextEmbedded) === 'string') {\r\n                newAction.nextEmbedded = action.nextEmbedded;\r\n                lexer.usesEmbedded = true;\r\n            }\r\n            return newAction;\r\n        }\r\n    }\r\n    else if (Array.isArray(action)) {\r\n        var results = [];\r\n        for (var i = 0, len = action.length; i < len; i++) {\r\n            results[i] = compileAction(lexer, ruleName, action[i]);\r\n        }\r\n        return { group: results };\r\n    }\r\n    else if (action.cases) {\r\n        // build an array of test cases\r\n        var cases_1 = [];\r\n        // for each case, push a test function and result value\r\n        for (var tkey in action.cases) {\r\n            if (action.cases.hasOwnProperty(tkey)) {\r\n                var val = compileAction(lexer, ruleName, action.cases[tkey]);\r\n                // what kind of case\r\n                if (tkey === '@default' || tkey === '@' || tkey === '') {\r\n                    cases_1.push({ test: undefined, value: val, name: tkey });\r\n                }\r\n                else if (tkey === '@eos') {\r\n                    cases_1.push({ test: function (id, matches, state, eos) { return eos; }, value: val, name: tkey });\r\n                }\r\n                else {\r\n                    cases_1.push(createGuard(lexer, ruleName, tkey, val)); // call separate function to avoid local variable capture\r\n                }\r\n            }\r\n        }\r\n        // create a matching function\r\n        var def_1 = lexer.defaultToken;\r\n        return {\r\n            test: function (id, matches, state, eos) {\r\n                for (var _i = 0, cases_2 = cases_1; _i < cases_2.length; _i++) {\r\n                    var _case = cases_2[_i];\r\n                    var didmatch = (!_case.test || _case.test(id, matches, state, eos));\r\n                    if (didmatch) {\r\n                        return _case.value;\r\n                    }\r\n                }\r\n                return def_1;\r\n            }\r\n        };\r\n    }\r\n    else {\r\n        throw monarchCommon.createError(lexer, 'an action must be a string, an object with a \\'token\\' or \\'cases\\' attribute, or an array of actions; in rule: ' + ruleName);\r\n    }\r\n}\r\n/**\r\n * Helper class for creating matching rules\r\n */\r\nvar Rule = /** @class */ (function () {\r\n    function Rule(name) {\r\n        this.regex = new RegExp('');\r\n        this.action = { token: '' };\r\n        this.matchOnlyAtLineStart = false;\r\n        this.name = '';\r\n        this.name = name;\r\n    }\r\n    Rule.prototype.setRegex = function (lexer, re) {\r\n        var sregex;\r\n        if (typeof (re) === 'string') {\r\n            sregex = re;\r\n        }\r\n        else if (re instanceof RegExp) {\r\n            sregex = re.source;\r\n        }\r\n        else {\r\n            throw monarchCommon.createError(lexer, 'rules must start with a match string or regular expression: ' + this.name);\r\n        }\r\n        this.matchOnlyAtLineStart = (sregex.length > 0 && sregex[0] === '^');\r\n        this.name = this.name + ': ' + sregex;\r\n        this.regex = compileRegExp(lexer, '^(?:' + (this.matchOnlyAtLineStart ? sregex.substr(1) : sregex) + ')');\r\n    };\r\n    Rule.prototype.setAction = function (lexer, act) {\r\n        this.action = compileAction(lexer, this.name, act);\r\n    };\r\n    return Rule;\r\n}());\r\n/**\r\n * Compiles a json description function into json where all regular expressions,\r\n * case matches etc, are compiled and all include rules are expanded.\r\n * We also compile the bracket definitions, supply defaults, and do many sanity checks.\r\n * If the 'jsonStrict' parameter is 'false', we allow at certain locations\r\n * regular expression objects and functions that get called during lexing.\r\n * (Currently we have no samples that need this so perhaps we should always have\r\n * jsonStrict to true).\r\n */\r\nexport function compile(languageId, json) {\r\n    if (!json || typeof (json) !== 'object') {\r\n        throw new Error('Monarch: expecting a language definition object');\r\n    }\r\n    // Create our lexer\r\n    var lexer = {};\r\n    lexer.languageId = languageId;\r\n    lexer.noThrow = false; // raise exceptions during compilation\r\n    lexer.maxStack = 100;\r\n    // Set standard fields: be defensive about types\r\n    lexer.start = (typeof json.start === 'string' ? json.start : null);\r\n    lexer.ignoreCase = bool(json.ignoreCase, false);\r\n    lexer.tokenPostfix = string(json.tokenPostfix, '.' + lexer.languageId);\r\n    lexer.defaultToken = string(json.defaultToken, 'source');\r\n    lexer.usesEmbedded = false; // becomes true if we find a nextEmbedded action\r\n    // For calling compileAction later on\r\n    var lexerMin = json;\r\n    lexerMin.languageId = languageId;\r\n    lexerMin.ignoreCase = lexer.ignoreCase;\r\n    lexerMin.noThrow = lexer.noThrow;\r\n    lexerMin.usesEmbedded = lexer.usesEmbedded;\r\n    lexerMin.stateNames = json.tokenizer;\r\n    lexerMin.defaultToken = lexer.defaultToken;\r\n    // Compile an array of rules into newrules where RegExp objects are created.\r\n    function addRules(state, newrules, rules) {\r\n        for (var _i = 0, rules_1 = rules; _i < rules_1.length; _i++) {\r\n            var rule = rules_1[_i];\r\n            var include = rule.include;\r\n            if (include) {\r\n                if (typeof (include) !== 'string') {\r\n                    throw monarchCommon.createError(lexer, 'an \\'include\\' attribute must be a string at: ' + state);\r\n                }\r\n                if (include[0] === '@') {\r\n                    include = include.substr(1); // peel off starting @\r\n                }\r\n                if (!json.tokenizer[include]) {\r\n                    throw monarchCommon.createError(lexer, 'include target \\'' + include + '\\' is not defined at: ' + state);\r\n                }\r\n                addRules(state + '.' + include, newrules, json.tokenizer[include]);\r\n            }\r\n            else {\r\n                var newrule = new Rule(state);\r\n                // Set up new rule attributes\r\n                if (Array.isArray(rule) && rule.length >= 1 && rule.length <= 3) {\r\n                    newrule.setRegex(lexerMin, rule[0]);\r\n                    if (rule.length >= 3) {\r\n                        if (typeof (rule[1]) === 'string') {\r\n                            newrule.setAction(lexerMin, { token: rule[1], next: rule[2] });\r\n                        }\r\n                        else if (typeof (rule[1]) === 'object') {\r\n                            var rule1 = rule[1];\r\n                            rule1.next = rule[2];\r\n                            newrule.setAction(lexerMin, rule1);\r\n                        }\r\n                        else {\r\n                            throw monarchCommon.createError(lexer, 'a next state as the last element of a rule can only be given if the action is either an object or a string, at: ' + state);\r\n                        }\r\n                    }\r\n                    else {\r\n                        newrule.setAction(lexerMin, rule[1]);\r\n                    }\r\n                }\r\n                else {\r\n                    if (!rule.regex) {\r\n                        throw monarchCommon.createError(lexer, 'a rule must either be an array, or an object with a \\'regex\\' or \\'include\\' field at: ' + state);\r\n                    }\r\n                    if (rule.name) {\r\n                        if (typeof rule.name === 'string') {\r\n                            newrule.name = rule.name;\r\n                        }\r\n                    }\r\n                    if (rule.matchOnlyAtStart) {\r\n                        newrule.matchOnlyAtLineStart = bool(rule.matchOnlyAtLineStart, false);\r\n                    }\r\n                    newrule.setRegex(lexerMin, rule.regex);\r\n                    newrule.setAction(lexerMin, rule.action);\r\n                }\r\n                newrules.push(newrule);\r\n            }\r\n        }\r\n    }\r\n    // compile the tokenizer rules\r\n    if (!json.tokenizer || typeof (json.tokenizer) !== 'object') {\r\n        throw monarchCommon.createError(lexer, 'a language definition must define the \\'tokenizer\\' attribute as an object');\r\n    }\r\n    lexer.tokenizer = [];\r\n    for (var key in json.tokenizer) {\r\n        if (json.tokenizer.hasOwnProperty(key)) {\r\n            if (!lexer.start) {\r\n                lexer.start = key;\r\n            }\r\n            var rules = json.tokenizer[key];\r\n            lexer.tokenizer[key] = new Array();\r\n            addRules('tokenizer.' + key, lexer.tokenizer[key], rules);\r\n        }\r\n    }\r\n    lexer.usesEmbedded = lexerMin.usesEmbedded; // can be set during compileAction\r\n    // Set simple brackets\r\n    if (json.brackets) {\r\n        if (!(Array.isArray(json.brackets))) {\r\n            throw monarchCommon.createError(lexer, 'the \\'brackets\\' attribute must be defined as an array');\r\n        }\r\n    }\r\n    else {\r\n        json.brackets = [\r\n            { open: '{', close: '}', token: 'delimiter.curly' },\r\n            { open: '[', close: ']', token: 'delimiter.square' },\r\n            { open: '(', close: ')', token: 'delimiter.parenthesis' },\r\n            { open: '<', close: '>', token: 'delimiter.angle' }\r\n        ];\r\n    }\r\n    var brackets = [];\r\n    for (var _i = 0, _a = json.brackets; _i < _a.length; _i++) {\r\n        var el = _a[_i];\r\n        var desc = el;\r\n        if (desc && Array.isArray(desc) && desc.length === 3) {\r\n            desc = { token: desc[2], open: desc[0], close: desc[1] };\r\n        }\r\n        if (desc.open === desc.close) {\r\n            throw monarchCommon.createError(lexer, 'open and close brackets in a \\'brackets\\' attribute must be different: ' + desc.open +\r\n                '\\n hint: use the \\'bracket\\' attribute if matching on equal brackets is required.');\r\n        }\r\n        if (typeof desc.open === 'string' && typeof desc.token === 'string' && typeof desc.close === 'string') {\r\n            brackets.push({\r\n                token: desc.token + lexer.tokenPostfix,\r\n                open: monarchCommon.fixCase(lexer, desc.open),\r\n                close: monarchCommon.fixCase(lexer, desc.close)\r\n            });\r\n        }\r\n        else {\r\n            throw monarchCommon.createError(lexer, 'every element in the \\'brackets\\' array must be a \\'{open,close,token}\\' object or array');\r\n        }\r\n    }\r\n    lexer.brackets = brackets;\r\n    // Disable throw so the syntax highlighter goes, no matter what\r\n    lexer.noThrow = true;\r\n    return lexer;\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport function isFuzzyActionArr(what) {\r\n    return (Array.isArray(what));\r\n}\r\nexport function isFuzzyAction(what) {\r\n    return !isFuzzyActionArr(what);\r\n}\r\nexport function isString(what) {\r\n    return (typeof what === 'string');\r\n}\r\nexport function isIAction(what) {\r\n    return !isString(what);\r\n}\r\n// Small helper functions\r\n/**\r\n * Is a string null, undefined, or empty?\r\n */\r\nexport function empty(s) {\r\n    return (s ? false : true);\r\n}\r\n/**\r\n * Puts a string to lower case if 'ignoreCase' is set.\r\n */\r\nexport function fixCase(lexer, str) {\r\n    return (lexer.ignoreCase && str ? str.toLowerCase() : str);\r\n}\r\n/**\r\n * Ensures there are no bad characters in a CSS token class.\r\n */\r\nexport function sanitize(s) {\r\n    return s.replace(/[&<>'\"_]/g, '-'); // used on all output token CSS classes\r\n}\r\n// Logging\r\n/**\r\n * Logs a message.\r\n */\r\nexport function log(lexer, msg) {\r\n    console.log(lexer.languageId + \": \" + msg);\r\n}\r\n// Throwing errors\r\nexport function createError(lexer, msg) {\r\n    return new Error(lexer.languageId + \": \" + msg);\r\n}\r\n// Helper functions for rule finding and substitution\r\n/**\r\n * substituteMatches is used on lexer strings and can substitutes predefined patterns:\r\n * \t\t$$  => $\r\n * \t\t$#  => id\r\n * \t\t$n  => matched entry n\r\n * \t\t@attr => contents of lexer[attr]\r\n *\r\n * See documentation for more info\r\n */\r\nexport function substituteMatches(lexer, str, id, matches, state) {\r\n    var re = /\\$((\\$)|(#)|(\\d\\d?)|[sS](\\d\\d?)|@(\\w+))/g;\r\n    var stateMatches = null;\r\n    return str.replace(re, function (full, sub, dollar, hash, n, s, attr, ofs, total) {\r\n        if (!empty(dollar)) {\r\n            return '$'; // $$\r\n        }\r\n        if (!empty(hash)) {\r\n            return fixCase(lexer, id); // default $#\r\n        }\r\n        if (!empty(n) && n < matches.length) {\r\n            return fixCase(lexer, matches[n]); // $n\r\n        }\r\n        if (!empty(attr) && lexer && typeof (lexer[attr]) === 'string') {\r\n            return lexer[attr]; //@attribute\r\n        }\r\n        if (stateMatches === null) { // split state on demand\r\n            stateMatches = state.split('.');\r\n            stateMatches.unshift(state);\r\n        }\r\n        if (!empty(s) && s < stateMatches.length) {\r\n            return fixCase(lexer, stateMatches[s]); //$Sn\r\n        }\r\n        return '';\r\n    });\r\n}\r\n/**\r\n * Find the tokenizer rules for a specific state (i.e. next action)\r\n */\r\nexport function findRules(lexer, inState) {\r\n    var state = inState;\r\n    while (state && state.length > 0) {\r\n        var rules = lexer.tokenizer[state];\r\n        if (rules) {\r\n            return rules;\r\n        }\r\n        var idx = state.lastIndexOf('.');\r\n        if (idx < 0) {\r\n            state = null; // no further parent\r\n        }\r\n        else {\r\n            state = state.substr(0, idx);\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Is a certain state defined? In contrast to 'findRules' this works on a ILexerMin.\r\n * This is used during compilation where we may know the defined states\r\n * but not yet whether the corresponding rules are correct.\r\n */\r\nexport function stateExists(lexer, inState) {\r\n    var state = inState;\r\n    while (state && state.length > 0) {\r\n        var exist = lexer.stateNames[state];\r\n        if (exist) {\r\n            return true;\r\n        }\r\n        var idx = state.lastIndexOf('.');\r\n        if (idx < 0) {\r\n            state = null; // no further parent\r\n        }\r\n        else {\r\n            state = state.substr(0, idx);\r\n        }\r\n    }\r\n    return false;\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\r\nexport var IStandaloneThemeService = createDecorator('themeService');\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { Token, TokenizationResult, TokenizationResult2 } from '../../../common/core/token.js';\r\nimport * as modes from '../../../common/modes.js';\r\nimport { NULL_MODE_ID, NULL_STATE } from '../../../common/modes/nullMode.js';\r\nimport * as monarchCommon from './monarchCommon.js';\r\nvar CACHE_STACK_DEPTH = 5;\r\n/**\r\n * Reuse the same stack elements up to a certain depth.\r\n */\r\nvar MonarchStackElementFactory = /** @class */ (function () {\r\n    function MonarchStackElementFactory(maxCacheDepth) {\r\n        this._maxCacheDepth = maxCacheDepth;\r\n        this._entries = Object.create(null);\r\n    }\r\n    MonarchStackElementFactory.create = function (parent, state) {\r\n        return this._INSTANCE.create(parent, state);\r\n    };\r\n    MonarchStackElementFactory.prototype.create = function (parent, state) {\r\n        if (parent !== null && parent.depth >= this._maxCacheDepth) {\r\n            // no caching above a certain depth\r\n            return new MonarchStackElement(parent, state);\r\n        }\r\n        var stackElementId = MonarchStackElement.getStackElementId(parent);\r\n        if (stackElementId.length > 0) {\r\n            stackElementId += '|';\r\n        }\r\n        stackElementId += state;\r\n        var result = this._entries[stackElementId];\r\n        if (result) {\r\n            return result;\r\n        }\r\n        result = new MonarchStackElement(parent, state);\r\n        this._entries[stackElementId] = result;\r\n        return result;\r\n    };\r\n    MonarchStackElementFactory._INSTANCE = new MonarchStackElementFactory(CACHE_STACK_DEPTH);\r\n    return MonarchStackElementFactory;\r\n}());\r\nvar MonarchStackElement = /** @class */ (function () {\r\n    function MonarchStackElement(parent, state) {\r\n        this.parent = parent;\r\n        this.state = state;\r\n        this.depth = (this.parent ? this.parent.depth : 0) + 1;\r\n    }\r\n    MonarchStackElement.getStackElementId = function (element) {\r\n        var result = '';\r\n        while (element !== null) {\r\n            if (result.length > 0) {\r\n                result += '|';\r\n            }\r\n            result += element.state;\r\n            element = element.parent;\r\n        }\r\n        return result;\r\n    };\r\n    MonarchStackElement._equals = function (a, b) {\r\n        while (a !== null && b !== null) {\r\n            if (a === b) {\r\n                return true;\r\n            }\r\n            if (a.state !== b.state) {\r\n                return false;\r\n            }\r\n            a = a.parent;\r\n            b = b.parent;\r\n        }\r\n        if (a === null && b === null) {\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    MonarchStackElement.prototype.equals = function (other) {\r\n        return MonarchStackElement._equals(this, other);\r\n    };\r\n    MonarchStackElement.prototype.push = function (state) {\r\n        return MonarchStackElementFactory.create(this, state);\r\n    };\r\n    MonarchStackElement.prototype.pop = function () {\r\n        return this.parent;\r\n    };\r\n    MonarchStackElement.prototype.popall = function () {\r\n        var result = this;\r\n        while (result.parent) {\r\n            result = result.parent;\r\n        }\r\n        return result;\r\n    };\r\n    MonarchStackElement.prototype.switchTo = function (state) {\r\n        return MonarchStackElementFactory.create(this.parent, state);\r\n    };\r\n    return MonarchStackElement;\r\n}());\r\nvar EmbeddedModeData = /** @class */ (function () {\r\n    function EmbeddedModeData(modeId, state) {\r\n        this.modeId = modeId;\r\n        this.state = state;\r\n    }\r\n    EmbeddedModeData.prototype.equals = function (other) {\r\n        return (this.modeId === other.modeId\r\n            && this.state.equals(other.state));\r\n    };\r\n    EmbeddedModeData.prototype.clone = function () {\r\n        var stateClone = this.state.clone();\r\n        // save an object\r\n        if (stateClone === this.state) {\r\n            return this;\r\n        }\r\n        return new EmbeddedModeData(this.modeId, this.state);\r\n    };\r\n    return EmbeddedModeData;\r\n}());\r\n/**\r\n * Reuse the same line states up to a certain depth.\r\n */\r\nvar MonarchLineStateFactory = /** @class */ (function () {\r\n    function MonarchLineStateFactory(maxCacheDepth) {\r\n        this._maxCacheDepth = maxCacheDepth;\r\n        this._entries = Object.create(null);\r\n    }\r\n    MonarchLineStateFactory.create = function (stack, embeddedModeData) {\r\n        return this._INSTANCE.create(stack, embeddedModeData);\r\n    };\r\n    MonarchLineStateFactory.prototype.create = function (stack, embeddedModeData) {\r\n        if (embeddedModeData !== null) {\r\n            // no caching when embedding\r\n            return new MonarchLineState(stack, embeddedModeData);\r\n        }\r\n        if (stack !== null && stack.depth >= this._maxCacheDepth) {\r\n            // no caching above a certain depth\r\n            return new MonarchLineState(stack, embeddedModeData);\r\n        }\r\n        var stackElementId = MonarchStackElement.getStackElementId(stack);\r\n        var result = this._entries[stackElementId];\r\n        if (result) {\r\n            return result;\r\n        }\r\n        result = new MonarchLineState(stack, null);\r\n        this._entries[stackElementId] = result;\r\n        return result;\r\n    };\r\n    MonarchLineStateFactory._INSTANCE = new MonarchLineStateFactory(CACHE_STACK_DEPTH);\r\n    return MonarchLineStateFactory;\r\n}());\r\nvar MonarchLineState = /** @class */ (function () {\r\n    function MonarchLineState(stack, embeddedModeData) {\r\n        this.stack = stack;\r\n        this.embeddedModeData = embeddedModeData;\r\n    }\r\n    MonarchLineState.prototype.clone = function () {\r\n        var embeddedModeDataClone = this.embeddedModeData ? this.embeddedModeData.clone() : null;\r\n        // save an object\r\n        if (embeddedModeDataClone === this.embeddedModeData) {\r\n            return this;\r\n        }\r\n        return MonarchLineStateFactory.create(this.stack, this.embeddedModeData);\r\n    };\r\n    MonarchLineState.prototype.equals = function (other) {\r\n        if (!(other instanceof MonarchLineState)) {\r\n            return false;\r\n        }\r\n        if (!this.stack.equals(other.stack)) {\r\n            return false;\r\n        }\r\n        if (this.embeddedModeData === null && other.embeddedModeData === null) {\r\n            return true;\r\n        }\r\n        if (this.embeddedModeData === null || other.embeddedModeData === null) {\r\n            return false;\r\n        }\r\n        return this.embeddedModeData.equals(other.embeddedModeData);\r\n    };\r\n    return MonarchLineState;\r\n}());\r\nvar MonarchClassicTokensCollector = /** @class */ (function () {\r\n    function MonarchClassicTokensCollector() {\r\n        this._tokens = [];\r\n        this._language = null;\r\n        this._lastTokenType = null;\r\n        this._lastTokenLanguage = null;\r\n    }\r\n    MonarchClassicTokensCollector.prototype.enterMode = function (startOffset, modeId) {\r\n        this._language = modeId;\r\n    };\r\n    MonarchClassicTokensCollector.prototype.emit = function (startOffset, type) {\r\n        if (this._lastTokenType === type && this._lastTokenLanguage === this._language) {\r\n            return;\r\n        }\r\n        this._lastTokenType = type;\r\n        this._lastTokenLanguage = this._language;\r\n        this._tokens.push(new Token(startOffset, type, this._language));\r\n    };\r\n    MonarchClassicTokensCollector.prototype.nestedModeTokenize = function (embeddedModeLine, embeddedModeData, offsetDelta) {\r\n        var nestedModeId = embeddedModeData.modeId;\r\n        var embeddedModeState = embeddedModeData.state;\r\n        var nestedModeTokenizationSupport = modes.TokenizationRegistry.get(nestedModeId);\r\n        if (!nestedModeTokenizationSupport) {\r\n            this.enterMode(offsetDelta, nestedModeId);\r\n            this.emit(offsetDelta, '');\r\n            return embeddedModeState;\r\n        }\r\n        var nestedResult = nestedModeTokenizationSupport.tokenize(embeddedModeLine, embeddedModeState, offsetDelta);\r\n        this._tokens = this._tokens.concat(nestedResult.tokens);\r\n        this._lastTokenType = null;\r\n        this._lastTokenLanguage = null;\r\n        this._language = null;\r\n        return nestedResult.endState;\r\n    };\r\n    MonarchClassicTokensCollector.prototype.finalize = function (endState) {\r\n        return new TokenizationResult(this._tokens, endState);\r\n    };\r\n    return MonarchClassicTokensCollector;\r\n}());\r\nvar MonarchModernTokensCollector = /** @class */ (function () {\r\n    function MonarchModernTokensCollector(modeService, theme) {\r\n        this._modeService = modeService;\r\n        this._theme = theme;\r\n        this._prependTokens = null;\r\n        this._tokens = [];\r\n        this._currentLanguageId = 0 /* Null */;\r\n        this._lastTokenMetadata = 0;\r\n    }\r\n    MonarchModernTokensCollector.prototype.enterMode = function (startOffset, modeId) {\r\n        this._currentLanguageId = this._modeService.getLanguageIdentifier(modeId).id;\r\n    };\r\n    MonarchModernTokensCollector.prototype.emit = function (startOffset, type) {\r\n        var metadata = this._theme.match(this._currentLanguageId, type);\r\n        if (this._lastTokenMetadata === metadata) {\r\n            return;\r\n        }\r\n        this._lastTokenMetadata = metadata;\r\n        this._tokens.push(startOffset);\r\n        this._tokens.push(metadata);\r\n    };\r\n    MonarchModernTokensCollector._merge = function (a, b, c) {\r\n        var aLen = (a !== null ? a.length : 0);\r\n        var bLen = b.length;\r\n        var cLen = (c !== null ? c.length : 0);\r\n        if (aLen === 0 && bLen === 0 && cLen === 0) {\r\n            return new Uint32Array(0);\r\n        }\r\n        if (aLen === 0 && bLen === 0) {\r\n            return c;\r\n        }\r\n        if (bLen === 0 && cLen === 0) {\r\n            return a;\r\n        }\r\n        var result = new Uint32Array(aLen + bLen + cLen);\r\n        if (a !== null) {\r\n            result.set(a);\r\n        }\r\n        for (var i = 0; i < bLen; i++) {\r\n            result[aLen + i] = b[i];\r\n        }\r\n        if (c !== null) {\r\n            result.set(c, aLen + bLen);\r\n        }\r\n        return result;\r\n    };\r\n    MonarchModernTokensCollector.prototype.nestedModeTokenize = function (embeddedModeLine, embeddedModeData, offsetDelta) {\r\n        var nestedModeId = embeddedModeData.modeId;\r\n        var embeddedModeState = embeddedModeData.state;\r\n        var nestedModeTokenizationSupport = modes.TokenizationRegistry.get(nestedModeId);\r\n        if (!nestedModeTokenizationSupport) {\r\n            this.enterMode(offsetDelta, nestedModeId);\r\n            this.emit(offsetDelta, '');\r\n            return embeddedModeState;\r\n        }\r\n        var nestedResult = nestedModeTokenizationSupport.tokenize2(embeddedModeLine, embeddedModeState, offsetDelta);\r\n        this._prependTokens = MonarchModernTokensCollector._merge(this._prependTokens, this._tokens, nestedResult.tokens);\r\n        this._tokens = [];\r\n        this._currentLanguageId = 0;\r\n        this._lastTokenMetadata = 0;\r\n        return nestedResult.endState;\r\n    };\r\n    MonarchModernTokensCollector.prototype.finalize = function (endState) {\r\n        return new TokenizationResult2(MonarchModernTokensCollector._merge(this._prependTokens, this._tokens, null), endState);\r\n    };\r\n    return MonarchModernTokensCollector;\r\n}());\r\nvar MonarchTokenizer = /** @class */ (function () {\r\n    function MonarchTokenizer(modeService, standaloneThemeService, modeId, lexer) {\r\n        var _this = this;\r\n        this._modeService = modeService;\r\n        this._standaloneThemeService = standaloneThemeService;\r\n        this._modeId = modeId;\r\n        this._lexer = lexer;\r\n        this._embeddedModes = Object.create(null);\r\n        this.embeddedLoaded = Promise.resolve(undefined);\r\n        // Set up listening for embedded modes\r\n        var emitting = false;\r\n        this._tokenizationRegistryListener = modes.TokenizationRegistry.onDidChange(function (e) {\r\n            if (emitting) {\r\n                return;\r\n            }\r\n            var isOneOfMyEmbeddedModes = false;\r\n            for (var i = 0, len = e.changedLanguages.length; i < len; i++) {\r\n                var language = e.changedLanguages[i];\r\n                if (_this._embeddedModes[language]) {\r\n                    isOneOfMyEmbeddedModes = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (isOneOfMyEmbeddedModes) {\r\n                emitting = true;\r\n                modes.TokenizationRegistry.fire([_this._modeId]);\r\n                emitting = false;\r\n            }\r\n        });\r\n    }\r\n    MonarchTokenizer.prototype.dispose = function () {\r\n        this._tokenizationRegistryListener.dispose();\r\n    };\r\n    MonarchTokenizer.prototype.getLoadStatus = function () {\r\n        var promises = [];\r\n        for (var nestedModeId in this._embeddedModes) {\r\n            var tokenizationSupport = modes.TokenizationRegistry.get(nestedModeId);\r\n            if (tokenizationSupport) {\r\n                // The nested mode is already loaded\r\n                if (tokenizationSupport instanceof MonarchTokenizer) {\r\n                    var nestedModeStatus = tokenizationSupport.getLoadStatus();\r\n                    if (nestedModeStatus.loaded === false) {\r\n                        promises.push(nestedModeStatus.promise);\r\n                    }\r\n                }\r\n                continue;\r\n            }\r\n            var tokenizationSupportPromise = modes.TokenizationRegistry.getPromise(nestedModeId);\r\n            if (tokenizationSupportPromise) {\r\n                // The nested mode is in the process of being loaded\r\n                promises.push(tokenizationSupportPromise);\r\n            }\r\n        }\r\n        if (promises.length === 0) {\r\n            return {\r\n                loaded: true\r\n            };\r\n        }\r\n        return {\r\n            loaded: false,\r\n            promise: Promise.all(promises).then(function (_) { return undefined; })\r\n        };\r\n    };\r\n    MonarchTokenizer.prototype.getInitialState = function () {\r\n        var rootState = MonarchStackElementFactory.create(null, this._lexer.start);\r\n        return MonarchLineStateFactory.create(rootState, null);\r\n    };\r\n    MonarchTokenizer.prototype.tokenize = function (line, lineState, offsetDelta) {\r\n        var tokensCollector = new MonarchClassicTokensCollector();\r\n        var endLineState = this._tokenize(line, lineState, offsetDelta, tokensCollector);\r\n        return tokensCollector.finalize(endLineState);\r\n    };\r\n    MonarchTokenizer.prototype.tokenize2 = function (line, lineState, offsetDelta) {\r\n        var tokensCollector = new MonarchModernTokensCollector(this._modeService, this._standaloneThemeService.getTheme().tokenTheme);\r\n        var endLineState = this._tokenize(line, lineState, offsetDelta, tokensCollector);\r\n        return tokensCollector.finalize(endLineState);\r\n    };\r\n    MonarchTokenizer.prototype._tokenize = function (line, lineState, offsetDelta, collector) {\r\n        if (lineState.embeddedModeData) {\r\n            return this._nestedTokenize(line, lineState, offsetDelta, collector);\r\n        }\r\n        else {\r\n            return this._myTokenize(line, lineState, offsetDelta, collector);\r\n        }\r\n    };\r\n    MonarchTokenizer.prototype._findLeavingNestedModeOffset = function (line, state) {\r\n        var rules = this._lexer.tokenizer[state.stack.state];\r\n        if (!rules) {\r\n            rules = monarchCommon.findRules(this._lexer, state.stack.state); // do parent matching\r\n            if (!rules) {\r\n                throw monarchCommon.createError(this._lexer, 'tokenizer state is not defined: ' + state.stack.state);\r\n            }\r\n        }\r\n        var popOffset = -1;\r\n        var hasEmbeddedPopRule = false;\r\n        for (var _i = 0, rules_1 = rules; _i < rules_1.length; _i++) {\r\n            var rule = rules_1[_i];\r\n            if (!monarchCommon.isIAction(rule.action) || rule.action.nextEmbedded !== '@pop') {\r\n                continue;\r\n            }\r\n            hasEmbeddedPopRule = true;\r\n            var regex = rule.regex;\r\n            var regexSource = rule.regex.source;\r\n            if (regexSource.substr(0, 4) === '^(?:' && regexSource.substr(regexSource.length - 1, 1) === ')') {\r\n                regex = new RegExp(regexSource.substr(4, regexSource.length - 5), regex.ignoreCase ? 'i' : '');\r\n            }\r\n            var result = line.search(regex);\r\n            if (result === -1 || (result !== 0 && rule.matchOnlyAtLineStart)) {\r\n                continue;\r\n            }\r\n            if (popOffset === -1 || result < popOffset) {\r\n                popOffset = result;\r\n            }\r\n        }\r\n        if (!hasEmbeddedPopRule) {\r\n            throw monarchCommon.createError(this._lexer, 'no rule containing nextEmbedded: \"@pop\" in tokenizer embedded state: ' + state.stack.state);\r\n        }\r\n        return popOffset;\r\n    };\r\n    MonarchTokenizer.prototype._nestedTokenize = function (line, lineState, offsetDelta, tokensCollector) {\r\n        var popOffset = this._findLeavingNestedModeOffset(line, lineState);\r\n        if (popOffset === -1) {\r\n            // tokenization will not leave nested mode\r\n            var nestedEndState = tokensCollector.nestedModeTokenize(line, lineState.embeddedModeData, offsetDelta);\r\n            return MonarchLineStateFactory.create(lineState.stack, new EmbeddedModeData(lineState.embeddedModeData.modeId, nestedEndState));\r\n        }\r\n        var nestedModeLine = line.substring(0, popOffset);\r\n        if (nestedModeLine.length > 0) {\r\n            // tokenize with the nested mode\r\n            tokensCollector.nestedModeTokenize(nestedModeLine, lineState.embeddedModeData, offsetDelta);\r\n        }\r\n        var restOfTheLine = line.substring(popOffset);\r\n        return this._myTokenize(restOfTheLine, lineState, offsetDelta + popOffset, tokensCollector);\r\n    };\r\n    MonarchTokenizer.prototype._safeRuleName = function (rule) {\r\n        if (rule) {\r\n            return rule.name;\r\n        }\r\n        return '(unknown)';\r\n    };\r\n    MonarchTokenizer.prototype._myTokenize = function (line, lineState, offsetDelta, tokensCollector) {\r\n        tokensCollector.enterMode(offsetDelta, this._modeId);\r\n        var lineLength = line.length;\r\n        var embeddedModeData = lineState.embeddedModeData;\r\n        var stack = lineState.stack;\r\n        var pos = 0;\r\n        var groupMatching = null;\r\n        // See https://github.com/Microsoft/monaco-editor/issues/1235:\r\n        // Evaluate rules at least once for an empty line\r\n        var forceEvaluation = true;\r\n        while (forceEvaluation || pos < lineLength) {\r\n            var pos0 = pos;\r\n            var stackLen0 = stack.depth;\r\n            var groupLen0 = groupMatching ? groupMatching.groups.length : 0;\r\n            var state = stack.state;\r\n            var matches = null;\r\n            var matched = null;\r\n            var action = null;\r\n            var rule = null;\r\n            var enteringEmbeddedMode = null;\r\n            // check if we need to process group matches first\r\n            if (groupMatching) {\r\n                matches = groupMatching.matches;\r\n                var groupEntry = groupMatching.groups.shift();\r\n                matched = groupEntry.matched;\r\n                action = groupEntry.action;\r\n                rule = groupMatching.rule;\r\n                // cleanup if necessary\r\n                if (groupMatching.groups.length === 0) {\r\n                    groupMatching = null;\r\n                }\r\n            }\r\n            else {\r\n                // otherwise we match on the token stream\r\n                if (!forceEvaluation && pos >= lineLength) {\r\n                    // nothing to do\r\n                    break;\r\n                }\r\n                forceEvaluation = false;\r\n                // get the rules for this state\r\n                var rules = this._lexer.tokenizer[state];\r\n                if (!rules) {\r\n                    rules = monarchCommon.findRules(this._lexer, state); // do parent matching\r\n                    if (!rules) {\r\n                        throw monarchCommon.createError(this._lexer, 'tokenizer state is not defined: ' + state);\r\n                    }\r\n                }\r\n                // try each rule until we match\r\n                var restOfLine = line.substr(pos);\r\n                for (var _i = 0, rules_2 = rules; _i < rules_2.length; _i++) {\r\n                    var rule_1 = rules_2[_i];\r\n                    if (pos === 0 || !rule_1.matchOnlyAtLineStart) {\r\n                        matches = restOfLine.match(rule_1.regex);\r\n                        if (matches) {\r\n                            matched = matches[0];\r\n                            action = rule_1.action;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            // We matched 'rule' with 'matches' and 'action'\r\n            if (!matches) {\r\n                matches = [''];\r\n                matched = '';\r\n            }\r\n            if (!action) {\r\n                // bad: we didn't match anything, and there is no action to take\r\n                // we need to advance the stream or we get progress trouble\r\n                if (pos < lineLength) {\r\n                    matches = [line.charAt(pos)];\r\n                    matched = matches[0];\r\n                }\r\n                action = this._lexer.defaultToken;\r\n            }\r\n            if (matched === null) {\r\n                // should never happen, needed for strict null checking\r\n                break;\r\n            }\r\n            // advance stream\r\n            pos += matched.length;\r\n            // maybe call action function (used for 'cases')\r\n            while (monarchCommon.isFuzzyAction(action) && monarchCommon.isIAction(action) && action.test) {\r\n                action = action.test(matched, matches, state, pos === lineLength);\r\n            }\r\n            var result = null;\r\n            // set the result: either a string or an array of actions\r\n            if (typeof action === 'string' || Array.isArray(action)) {\r\n                result = action;\r\n            }\r\n            else if (action.group) {\r\n                result = action.group;\r\n            }\r\n            else if (action.token !== null && action.token !== undefined) {\r\n                // do $n replacements?\r\n                if (action.tokenSubst) {\r\n                    result = monarchCommon.substituteMatches(this._lexer, action.token, matched, matches, state);\r\n                }\r\n                else {\r\n                    result = action.token;\r\n                }\r\n                // enter embedded mode?\r\n                if (action.nextEmbedded) {\r\n                    if (action.nextEmbedded === '@pop') {\r\n                        if (!embeddedModeData) {\r\n                            throw monarchCommon.createError(this._lexer, 'cannot pop embedded mode if not inside one');\r\n                        }\r\n                        embeddedModeData = null;\r\n                    }\r\n                    else if (embeddedModeData) {\r\n                        throw monarchCommon.createError(this._lexer, 'cannot enter embedded mode from within an embedded mode');\r\n                    }\r\n                    else {\r\n                        enteringEmbeddedMode = monarchCommon.substituteMatches(this._lexer, action.nextEmbedded, matched, matches, state);\r\n                    }\r\n                }\r\n                // state transformations\r\n                if (action.goBack) { // back up the stream..\r\n                    pos = Math.max(0, pos - action.goBack);\r\n                }\r\n                if (action.switchTo && typeof action.switchTo === 'string') {\r\n                    var nextState = monarchCommon.substituteMatches(this._lexer, action.switchTo, matched, matches, state); // switch state without a push...\r\n                    if (nextState[0] === '@') {\r\n                        nextState = nextState.substr(1); // peel off starting '@'\r\n                    }\r\n                    if (!monarchCommon.findRules(this._lexer, nextState)) {\r\n                        throw monarchCommon.createError(this._lexer, 'trying to switch to a state \\'' + nextState + '\\' that is undefined in rule: ' + this._safeRuleName(rule));\r\n                    }\r\n                    else {\r\n                        stack = stack.switchTo(nextState);\r\n                    }\r\n                }\r\n                else if (action.transform && typeof action.transform === 'function') {\r\n                    throw monarchCommon.createError(this._lexer, 'action.transform not supported');\r\n                }\r\n                else if (action.next) {\r\n                    if (action.next === '@push') {\r\n                        if (stack.depth >= this._lexer.maxStack) {\r\n                            throw monarchCommon.createError(this._lexer, 'maximum tokenizer stack size reached: [' +\r\n                                stack.state + ',' + stack.parent.state + ',...]');\r\n                        }\r\n                        else {\r\n                            stack = stack.push(state);\r\n                        }\r\n                    }\r\n                    else if (action.next === '@pop') {\r\n                        if (stack.depth <= 1) {\r\n                            throw monarchCommon.createError(this._lexer, 'trying to pop an empty stack in rule: ' + this._safeRuleName(rule));\r\n                        }\r\n                        else {\r\n                            stack = stack.pop();\r\n                        }\r\n                    }\r\n                    else if (action.next === '@popall') {\r\n                        stack = stack.popall();\r\n                    }\r\n                    else {\r\n                        var nextState = monarchCommon.substituteMatches(this._lexer, action.next, matched, matches, state);\r\n                        if (nextState[0] === '@') {\r\n                            nextState = nextState.substr(1); // peel off starting '@'\r\n                        }\r\n                        if (!monarchCommon.findRules(this._lexer, nextState)) {\r\n                            throw monarchCommon.createError(this._lexer, 'trying to set a next state \\'' + nextState + '\\' that is undefined in rule: ' + this._safeRuleName(rule));\r\n                        }\r\n                        else {\r\n                            stack = stack.push(nextState);\r\n                        }\r\n                    }\r\n                }\r\n                if (action.log && typeof (action.log) === 'string') {\r\n                    monarchCommon.log(this._lexer, this._lexer.languageId + ': ' + monarchCommon.substituteMatches(this._lexer, action.log, matched, matches, state));\r\n                }\r\n            }\r\n            // check result\r\n            if (result === null) {\r\n                throw monarchCommon.createError(this._lexer, 'lexer rule has no well-defined action in rule: ' + this._safeRuleName(rule));\r\n            }\r\n            // is the result a group match?\r\n            if (Array.isArray(result)) {\r\n                if (groupMatching && groupMatching.groups.length > 0) {\r\n                    throw monarchCommon.createError(this._lexer, 'groups cannot be nested: ' + this._safeRuleName(rule));\r\n                }\r\n                if (matches.length !== result.length + 1) {\r\n                    throw monarchCommon.createError(this._lexer, 'matched number of groups does not match the number of actions in rule: ' + this._safeRuleName(rule));\r\n                }\r\n                var totalLen = 0;\r\n                for (var i = 1; i < matches.length; i++) {\r\n                    totalLen += matches[i].length;\r\n                }\r\n                if (totalLen !== matched.length) {\r\n                    throw monarchCommon.createError(this._lexer, 'with groups, all characters should be matched in consecutive groups in rule: ' + this._safeRuleName(rule));\r\n                }\r\n                groupMatching = {\r\n                    rule: rule,\r\n                    matches: matches,\r\n                    groups: []\r\n                };\r\n                for (var i = 0; i < result.length; i++) {\r\n                    groupMatching.groups[i] = {\r\n                        action: result[i],\r\n                        matched: matches[i + 1]\r\n                    };\r\n                }\r\n                pos -= matched.length;\r\n                // call recursively to initiate first result match\r\n                continue;\r\n            }\r\n            else {\r\n                // regular result\r\n                // check for '@rematch'\r\n                if (result === '@rematch') {\r\n                    pos -= matched.length;\r\n                    matched = ''; // better set the next state too..\r\n                    matches = null;\r\n                    result = '';\r\n                }\r\n                // check progress\r\n                if (matched.length === 0) {\r\n                    if (lineLength === 0 || stackLen0 !== stack.depth || state !== stack.state || (!groupMatching ? 0 : groupMatching.groups.length) !== groupLen0) {\r\n                        continue;\r\n                    }\r\n                    else {\r\n                        throw monarchCommon.createError(this._lexer, 'no progress in tokenizer in rule: ' + this._safeRuleName(rule));\r\n                    }\r\n                }\r\n                // return the result (and check for brace matching)\r\n                // todo: for efficiency we could pre-sanitize tokenPostfix and substitutions\r\n                var tokenType = null;\r\n                if (monarchCommon.isString(result) && result.indexOf('@brackets') === 0) {\r\n                    var rest = result.substr('@brackets'.length);\r\n                    var bracket = findBracket(this._lexer, matched);\r\n                    if (!bracket) {\r\n                        throw monarchCommon.createError(this._lexer, '@brackets token returned but no bracket defined as: ' + matched);\r\n                    }\r\n                    tokenType = monarchCommon.sanitize(bracket.token + rest);\r\n                }\r\n                else {\r\n                    var token = (result === '' ? '' : result + this._lexer.tokenPostfix);\r\n                    tokenType = monarchCommon.sanitize(token);\r\n                }\r\n                tokensCollector.emit(pos0 + offsetDelta, tokenType);\r\n            }\r\n            if (enteringEmbeddedMode !== null) {\r\n                // substitute language alias to known modes to support syntax highlighting\r\n                var enteringEmbeddedModeId = this._modeService.getModeIdForLanguageName(enteringEmbeddedMode);\r\n                if (enteringEmbeddedModeId) {\r\n                    enteringEmbeddedMode = enteringEmbeddedModeId;\r\n                }\r\n                var embeddedModeData_1 = this._getNestedEmbeddedModeData(enteringEmbeddedMode);\r\n                if (pos < lineLength) {\r\n                    // there is content from the embedded mode on this line\r\n                    var restOfLine = line.substr(pos);\r\n                    return this._nestedTokenize(restOfLine, MonarchLineStateFactory.create(stack, embeddedModeData_1), offsetDelta + pos, tokensCollector);\r\n                }\r\n                else {\r\n                    return MonarchLineStateFactory.create(stack, embeddedModeData_1);\r\n                }\r\n            }\r\n        }\r\n        return MonarchLineStateFactory.create(stack, embeddedModeData);\r\n    };\r\n    MonarchTokenizer.prototype._getNestedEmbeddedModeData = function (mimetypeOrModeId) {\r\n        var nestedModeId = this._locateMode(mimetypeOrModeId);\r\n        if (nestedModeId) {\r\n            var tokenizationSupport = modes.TokenizationRegistry.get(nestedModeId);\r\n            if (tokenizationSupport) {\r\n                return new EmbeddedModeData(nestedModeId, tokenizationSupport.getInitialState());\r\n            }\r\n        }\r\n        return new EmbeddedModeData(nestedModeId || NULL_MODE_ID, NULL_STATE);\r\n    };\r\n    MonarchTokenizer.prototype._locateMode = function (mimetypeOrModeId) {\r\n        if (!mimetypeOrModeId || !this._modeService.isRegisteredMode(mimetypeOrModeId)) {\r\n            return null;\r\n        }\r\n        if (mimetypeOrModeId === this._modeId) {\r\n            // embedding myself...\r\n            return mimetypeOrModeId;\r\n        }\r\n        var modeId = this._modeService.getModeId(mimetypeOrModeId);\r\n        if (modeId) {\r\n            // Fire mode loading event\r\n            this._modeService.triggerMode(modeId);\r\n            this._embeddedModes[modeId] = true;\r\n        }\r\n        return modeId;\r\n    };\r\n    return MonarchTokenizer;\r\n}());\r\nexport { MonarchTokenizer };\r\n/**\r\n * Searches for a bracket in the 'brackets' attribute that matches the input.\r\n */\r\nfunction findBracket(lexer, matched) {\r\n    if (!matched) {\r\n        return null;\r\n    }\r\n    matched = monarchCommon.fixCase(lexer, matched);\r\n    var brackets = lexer.brackets;\r\n    for (var _i = 0, brackets_1 = brackets; _i < brackets_1.length; _i++) {\r\n        var bracket = brackets_1[_i];\r\n        if (bracket.open === matched) {\r\n            return { token: bracket.token, bracketType: 1 /* Open */ };\r\n        }\r\n        else if (bracket.close === matched) {\r\n            return { token: bracket.token, bracketType: -1 /* Close */ };\r\n        }\r\n    }\r\n    return null;\r\n}\r\nexport function createTokenizationSupport(modeService, standaloneThemeService, modeId, lexer) {\r\n    return new MonarchTokenizer(modeService, standaloneThemeService, modeId, lexer);\r\n}\r\n"],"sourceRoot":""}