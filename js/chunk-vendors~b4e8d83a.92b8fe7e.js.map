{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/editor/browser/view/dynamicViewOverlay.js","webpack:///./node_modules/monaco-editor/esm/vs/editor/browser/view/domLineBreaksComputer.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","this","constructor","prototype","create","DynamicViewOverlay","_super","apply","arguments","DOMLineBreaksComputerFactory","createLineBreaksComputer","fontInfo","tabSize","wrappingColumn","wrappingIndent","requests","addRequest","lineText","previousLineBreakData","push","finalize","createLineBreaks","firstLineBreakColumn","result_1","i","len","length","overallWidth","Math","round","typicalHalfwidthCharacterWidth","containerDomNode","document","createElement","applyFontInfoSlow","sb","firstNonWhitespaceIndices","wrappedTextIndentLengths","renderLineContents","allCharOffsets","allVisibleColumns","lineContent","firstNonWhitespaceIndex","wrappedTextIndentLength","width","i_1","charWidth","charCodeAt","indentWidth","ceil","spaceWidth","typicalFullwidthCharacterWidth","renderLineContent","substr","tmp","renderLine","innerHTML","build","style","position","top","wordWrap","body","appendChild","range","createRange","lineDomNodes","slice","call","children","result","lineDomNode","breakOffsets","readLineBreaks","visibleColumns","breakOffsetsVisibleColumn","j","removeChild","initialVisibleColumn","appendASCIIString","String","visibleColumn","charOffset","charOffsets","nextCharCode","charIndex","charCode","producedCharacters","space","write1","appendASCII","textContentNode","firstChild","discoverBreaks","low","lowRects","high","highRects","readClientRect","abs","mid","midRects","startOffset","endOffset","setStart","setEnd","getClientRects"],"mappings":"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","file":"js/chunk-vendors~b4e8d83a.92b8fe7e.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nimport { ViewEventHandler } from '../../common/viewModel/viewEventHandler.js';\r\nvar DynamicViewOverlay = /** @class */ (function (_super) {\r\n    __extends(DynamicViewOverlay, _super);\r\n    function DynamicViewOverlay() {\r\n        return _super !== null && _super.apply(this, arguments) || this;\r\n    }\r\n    return DynamicViewOverlay;\r\n}(ViewEventHandler));\r\nexport { DynamicViewOverlay };\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { LineBreakData } from '../../common/viewModel/splitLinesCollection.js';\r\nimport { createStringBuilder } from '../../common/core/stringBuilder.js';\r\nimport * as strings from '../../../base/common/strings.js';\r\nimport { Configuration } from '../config/configuration.js';\r\nvar DOMLineBreaksComputerFactory = /** @class */ (function () {\r\n    function DOMLineBreaksComputerFactory() {\r\n    }\r\n    DOMLineBreaksComputerFactory.create = function () {\r\n        return new DOMLineBreaksComputerFactory();\r\n    };\r\n    DOMLineBreaksComputerFactory.prototype.createLineBreaksComputer = function (fontInfo, tabSize, wrappingColumn, wrappingIndent) {\r\n        tabSize = tabSize | 0; //@perf\r\n        wrappingColumn = +wrappingColumn; //@perf\r\n        var requests = [];\r\n        return {\r\n            addRequest: function (lineText, previousLineBreakData) {\r\n                requests.push(lineText);\r\n            },\r\n            finalize: function () {\r\n                return createLineBreaks(requests, fontInfo, tabSize, wrappingColumn, wrappingIndent);\r\n            }\r\n        };\r\n    };\r\n    return DOMLineBreaksComputerFactory;\r\n}());\r\nexport { DOMLineBreaksComputerFactory };\r\nfunction createLineBreaks(requests, fontInfo, tabSize, firstLineBreakColumn, wrappingIndent) {\r\n    if (firstLineBreakColumn === -1) {\r\n        var result_1 = [];\r\n        for (var i = 0, len = requests.length; i < len; i++) {\r\n            result_1[i] = null;\r\n        }\r\n        return result_1;\r\n    }\r\n    var overallWidth = Math.round(firstLineBreakColumn * fontInfo.typicalHalfwidthCharacterWidth);\r\n    // Cannot respect WrappingIndent.Indent and WrappingIndent.DeepIndent because that would require\r\n    // two dom layouts, in order to first set the width of the first line, and then set the width of the wrapped lines\r\n    if (wrappingIndent === 2 /* Indent */ || wrappingIndent === 3 /* DeepIndent */) {\r\n        wrappingIndent = 1 /* Same */;\r\n    }\r\n    var containerDomNode = document.createElement('div');\r\n    Configuration.applyFontInfoSlow(containerDomNode, fontInfo);\r\n    var sb = createStringBuilder(10000);\r\n    var firstNonWhitespaceIndices = [];\r\n    var wrappedTextIndentLengths = [];\r\n    var renderLineContents = [];\r\n    var allCharOffsets = [];\r\n    var allVisibleColumns = [];\r\n    for (var i = 0; i < requests.length; i++) {\r\n        var lineContent = requests[i];\r\n        var firstNonWhitespaceIndex = 0;\r\n        var wrappedTextIndentLength = 0;\r\n        var width = overallWidth;\r\n        if (wrappingIndent !== 0 /* None */) {\r\n            firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\r\n            if (firstNonWhitespaceIndex === -1) {\r\n                // all whitespace line\r\n                firstNonWhitespaceIndex = 0;\r\n            }\r\n            else {\r\n                // Track existing indent\r\n                for (var i_1 = 0; i_1 < firstNonWhitespaceIndex; i_1++) {\r\n                    var charWidth = (lineContent.charCodeAt(i_1) === 9 /* Tab */\r\n                        ? (tabSize - (wrappedTextIndentLength % tabSize))\r\n                        : 1);\r\n                    wrappedTextIndentLength += charWidth;\r\n                }\r\n                var indentWidth = Math.ceil(fontInfo.spaceWidth * wrappedTextIndentLength);\r\n                // Force sticking to beginning of line if no character would fit except for the indentation\r\n                if (indentWidth + fontInfo.typicalFullwidthCharacterWidth > overallWidth) {\r\n                    firstNonWhitespaceIndex = 0;\r\n                    wrappedTextIndentLength = 0;\r\n                }\r\n                else {\r\n                    width = overallWidth - indentWidth;\r\n                }\r\n            }\r\n        }\r\n        var renderLineContent = lineContent.substr(firstNonWhitespaceIndex);\r\n        var tmp = renderLine(renderLineContent, wrappedTextIndentLength, tabSize, width, sb);\r\n        firstNonWhitespaceIndices[i] = firstNonWhitespaceIndex;\r\n        wrappedTextIndentLengths[i] = wrappedTextIndentLength;\r\n        renderLineContents[i] = renderLineContent;\r\n        allCharOffsets[i] = tmp[0];\r\n        allVisibleColumns[i] = tmp[1];\r\n    }\r\n    containerDomNode.innerHTML = sb.build();\r\n    containerDomNode.style.position = 'absolute';\r\n    containerDomNode.style.top = '10000';\r\n    containerDomNode.style.wordWrap = 'break-word';\r\n    document.body.appendChild(containerDomNode);\r\n    var range = document.createRange();\r\n    var lineDomNodes = Array.prototype.slice.call(containerDomNode.children, 0);\r\n    var result = [];\r\n    for (var i = 0; i < requests.length; i++) {\r\n        var lineDomNode = lineDomNodes[i];\r\n        var breakOffsets = readLineBreaks(range, lineDomNode, renderLineContents[i], allCharOffsets[i]);\r\n        if (breakOffsets === null) {\r\n            result[i] = null;\r\n            continue;\r\n        }\r\n        var firstNonWhitespaceIndex = firstNonWhitespaceIndices[i];\r\n        var wrappedTextIndentLength = wrappedTextIndentLengths[i];\r\n        var visibleColumns = allVisibleColumns[i];\r\n        var breakOffsetsVisibleColumn = [];\r\n        for (var j = 0, len = breakOffsets.length; j < len; j++) {\r\n            breakOffsetsVisibleColumn[j] = visibleColumns[breakOffsets[j]];\r\n        }\r\n        if (firstNonWhitespaceIndex !== 0) {\r\n            // All break offsets are relative to the renderLineContent, make them absolute again\r\n            for (var j = 0, len = breakOffsets.length; j < len; j++) {\r\n                breakOffsets[j] += firstNonWhitespaceIndex;\r\n            }\r\n        }\r\n        result[i] = new LineBreakData(breakOffsets, breakOffsetsVisibleColumn, wrappedTextIndentLength);\r\n    }\r\n    document.body.removeChild(containerDomNode);\r\n    return result;\r\n}\r\nfunction renderLine(lineContent, initialVisibleColumn, tabSize, width, sb) {\r\n    sb.appendASCIIString('<div style=\"width:');\r\n    sb.appendASCIIString(String(width));\r\n    sb.appendASCIIString('px;\">');\r\n    // if (containsRTL) {\r\n    // \tsb.appendASCIIString('\" dir=\"ltr');\r\n    // }\r\n    var len = lineContent.length;\r\n    var visibleColumn = initialVisibleColumn;\r\n    var charOffset = 0;\r\n    var charOffsets = [];\r\n    var visibleColumns = [];\r\n    var nextCharCode = (0 < len ? lineContent.charCodeAt(0) : 0 /* Null */);\r\n    for (var charIndex = 0; charIndex < len; charIndex++) {\r\n        charOffsets[charIndex] = charOffset;\r\n        visibleColumns[charIndex] = visibleColumn;\r\n        var charCode = nextCharCode;\r\n        nextCharCode = (charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : 0 /* Null */);\r\n        var producedCharacters = 1;\r\n        var charWidth = 1;\r\n        switch (charCode) {\r\n            case 9 /* Tab */:\r\n                producedCharacters = (tabSize - (visibleColumn % tabSize));\r\n                charWidth = producedCharacters;\r\n                for (var space = 1; space <= producedCharacters; space++) {\r\n                    if (space < producedCharacters) {\r\n                        sb.write1(0xA0); // &nbsp;\r\n                    }\r\n                    else {\r\n                        sb.appendASCII(32 /* Space */);\r\n                    }\r\n                }\r\n                break;\r\n            case 32 /* Space */:\r\n                if (nextCharCode === 32 /* Space */) {\r\n                    sb.write1(0xA0); // &nbsp;\r\n                }\r\n                else {\r\n                    sb.appendASCII(32 /* Space */);\r\n                }\r\n                break;\r\n            case 60 /* LessThan */:\r\n                sb.appendASCIIString('&lt;');\r\n                break;\r\n            case 62 /* GreaterThan */:\r\n                sb.appendASCIIString('&gt;');\r\n                break;\r\n            case 38 /* Ampersand */:\r\n                sb.appendASCIIString('&amp;');\r\n                break;\r\n            case 0 /* Null */:\r\n                sb.appendASCIIString('&#00;');\r\n                break;\r\n            case 65279 /* UTF8_BOM */:\r\n            case 8232 /* LINE_SEPARATOR_2028 */:\r\n                sb.write1(0xFFFD);\r\n                break;\r\n            default:\r\n                if (strings.isFullWidthCharacter(charCode)) {\r\n                    charWidth++;\r\n                }\r\n                // if (renderControlCharacters && charCode < 32) {\r\n                // \tsb.write1(9216 + charCode);\r\n                // } else {\r\n                sb.write1(charCode);\r\n            // }\r\n        }\r\n        charOffset += producedCharacters;\r\n        visibleColumn += charWidth;\r\n    }\r\n    charOffsets[lineContent.length] = charOffset;\r\n    visibleColumns[lineContent.length] = visibleColumn;\r\n    sb.appendASCIIString('</div>');\r\n    return [charOffsets, visibleColumns];\r\n}\r\nfunction readLineBreaks(range, lineDomNode, lineContent, charOffsets) {\r\n    if (lineContent.length <= 1) {\r\n        return null;\r\n    }\r\n    var textContentNode = lineDomNode.firstChild;\r\n    var breakOffsets = [];\r\n    discoverBreaks(range, textContentNode, charOffsets, 0, null, lineContent.length - 1, null, breakOffsets);\r\n    if (breakOffsets.length === 0) {\r\n        return null;\r\n    }\r\n    breakOffsets.push(lineContent.length);\r\n    return breakOffsets;\r\n}\r\nfunction discoverBreaks(range, textContentNode, charOffsets, low, lowRects, high, highRects, result) {\r\n    if (low === high) {\r\n        return;\r\n    }\r\n    lowRects = lowRects || readClientRect(range, textContentNode, charOffsets[low], charOffsets[low + 1]);\r\n    highRects = highRects || readClientRect(range, textContentNode, charOffsets[high], charOffsets[high + 1]);\r\n    if (Math.abs(lowRects[0].top - highRects[0].top) <= 0.1) {\r\n        // same line\r\n        return;\r\n    }\r\n    // there is at least one line break between these two offsets\r\n    if (low + 1 === high) {\r\n        // the two characters are adjacent, so the line break must be exactly between them\r\n        result.push(high);\r\n        return;\r\n    }\r\n    var mid = low + ((high - low) / 2) | 0;\r\n    var midRects = readClientRect(range, textContentNode, charOffsets[mid], charOffsets[mid + 1]);\r\n    discoverBreaks(range, textContentNode, charOffsets, low, lowRects, mid, midRects, result);\r\n    discoverBreaks(range, textContentNode, charOffsets, mid, midRects, high, highRects, result);\r\n}\r\nfunction readClientRect(range, textContentNode, startOffset, endOffset) {\r\n    range.setStart(textContentNode, startOffset);\r\n    range.setEnd(textContentNode, endOffset);\r\n    return range.getClientRects();\r\n}\r\n"],"sourceRoot":""}